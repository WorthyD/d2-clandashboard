/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieAPI.Client;
using BungieAPI.Model;

namespace BungieAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 ContentGetContentById (long? id, string locale, bool? head = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> ContentGetContentByIdWithHttpInfo (long? id, string locale, bool? head = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 ContentGetContentByTagAndType (string locale, string tag, string type, bool? head = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> ContentGetContentByTagAndTypeWithHttpInfo (string locale, string tag, string type, bool? head = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 ContentGetContentType (string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> ContentGetContentTypeWithHttpInfo (string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ContentSearchContentByTagAndType (string locale, string tag, string type, int? currentpage = null, bool? head = null, int? itemsperpage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ContentSearchContentByTagAndTypeWithHttpInfo (string locale, string tag, string type, int? currentpage = null, bool? head = null, int? itemsperpage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ContentSearchContentWithText (string locale, string ctype = null, int? currentpage = null, bool? head = null, string searchtext = null, string source = null, string tag = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ContentSearchContentWithTextWithHttpInfo (string locale, string ctype = null, int? currentpage = null, bool? head = null, string searchtext = null, string source = null, string tag = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> ContentGetContentByIdAsync (long? id, string locale, bool? head = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ContentGetContentByIdAsyncWithHttpInfo (long? id, string locale, bool? head = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> ContentGetContentByTagAndTypeAsync (string locale, string tag, string type, bool? head = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ContentGetContentByTagAndTypeAsyncWithHttpInfo (string locale, string tag, string type, bool? head = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> ContentGetContentTypeAsync (string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> ContentGetContentTypeAsyncWithHttpInfo (string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ContentSearchContentByTagAndTypeAsync (string locale, string tag, string type, int? currentpage = null, bool? head = null, int? itemsperpage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ContentSearchContentByTagAndTypeAsyncWithHttpInfo (string locale, string tag, string type, int? currentpage = null, bool? head = null, int? itemsperpage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ContentSearchContentWithTextAsync (string locale, string ctype = null, int? currentpage = null, bool? head = null, string searchtext = null, string source = null, string tag = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ContentSearchContentWithTextAsyncWithHttpInfo (string locale, string ctype = null, int? currentpage = null, bool? head = null, string searchtext = null, string source = null, string tag = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentApi : IContentApi
    {
        private BungieAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentApi(String basePath)
        {
            this.Configuration = new BungieAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BungieAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentApi(BungieAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BungieAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 ContentGetContentById (long? id, string locale, bool? head = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = ContentGetContentByIdWithHttpInfo(id, locale, head);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > ContentGetContentByIdWithHttpInfo (long? id, string locale, bool? head = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContentApi->ContentGetContentById");
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentById");

            var localVarPath = "/Content/GetContentById/{id}/{locale}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (locale != null) localVarPathParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // path parameter
            if (head != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "head", head)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentGetContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> ContentGetContentByIdAsync (long? id, string locale, bool? head = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await ContentGetContentByIdAsyncWithHttpInfo(id, locale, head);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ContentGetContentByIdAsyncWithHttpInfo (long? id, string locale, bool? head = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContentApi->ContentGetContentById");
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentById");

            var localVarPath = "/Content/GetContentById/{id}/{locale}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (locale != null) localVarPathParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // path parameter
            if (head != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "head", head)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentGetContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 ContentGetContentByTagAndType (string locale, string tag, string type, bool? head = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = ContentGetContentByTagAndTypeWithHttpInfo(locale, tag, type, head);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > ContentGetContentByTagAndTypeWithHttpInfo (string locale, string tag, string type, bool? head = null)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentByTagAndType");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentGetContentByTagAndType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentByTagAndType");

            var localVarPath = "/Content/GetContentByTagAndType/{tag}/{type}/{locale}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locale != null) localVarPathParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (head != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "head", head)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentGetContentByTagAndType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> ContentGetContentByTagAndTypeAsync (string locale, string tag, string type, bool? head = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await ContentGetContentByTagAndTypeAsyncWithHttpInfo(locale, tag, type, head);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ContentGetContentByTagAndTypeAsyncWithHttpInfo (string locale, string tag, string type, bool? head = null)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentByTagAndType");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentGetContentByTagAndType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentByTagAndType");

            var localVarPath = "/Content/GetContentByTagAndType/{tag}/{type}/{locale}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locale != null) localVarPathParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (head != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "head", head)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentGetContentByTagAndType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 ContentGetContentType (string type)
        {
             ApiResponse<InlineResponse2007> localVarResponse = ContentGetContentTypeWithHttpInfo(type);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > ContentGetContentTypeWithHttpInfo (string type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentType");

            var localVarPath = "/Content/GetContentType/{type}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentGetContentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> ContentGetContentTypeAsync (string type)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await ContentGetContentTypeAsyncWithHttpInfo(type);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> ContentGetContentTypeAsyncWithHttpInfo (string type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentType");

            var localVarPath = "/Content/GetContentType/{type}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentGetContentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ContentSearchContentByTagAndType (string locale, string tag, string type, int? currentpage = null, bool? head = null, int? itemsperpage = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = ContentSearchContentByTagAndTypeWithHttpInfo(locale, tag, type, currentpage, head, itemsperpage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > ContentSearchContentByTagAndTypeWithHttpInfo (string locale, string tag, string type, int? currentpage = null, bool? head = null, int? itemsperpage = null)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentByTagAndType");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentSearchContentByTagAndType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentSearchContentByTagAndType");

            var localVarPath = "/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locale != null) localVarPathParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (currentpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentpage", currentpage)); // query parameter
            if (head != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "head", head)); // query parameter
            if (itemsperpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemsperpage", itemsperpage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentSearchContentByTagAndType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ContentSearchContentByTagAndTypeAsync (string locale, string tag, string type, int? currentpage = null, bool? head = null, int? itemsperpage = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await ContentSearchContentByTagAndTypeAsyncWithHttpInfo(locale, tag, type, currentpage, head, itemsperpage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ContentSearchContentByTagAndTypeAsyncWithHttpInfo (string locale, string tag, string type, int? currentpage = null, bool? head = null, int? itemsperpage = null)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentByTagAndType");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentSearchContentByTagAndType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentSearchContentByTagAndType");

            var localVarPath = "/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locale != null) localVarPathParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (currentpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentpage", currentpage)); // query parameter
            if (head != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "head", head)); // query parameter
            if (itemsperpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemsperpage", itemsperpage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentSearchContentByTagAndType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ContentSearchContentWithText (string locale, string ctype = null, int? currentpage = null, bool? head = null, string searchtext = null, string source = null, string tag = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = ContentSearchContentWithTextWithHttpInfo(locale, ctype, currentpage, head, searchtext, source, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > ContentSearchContentWithTextWithHttpInfo (string locale, string ctype = null, int? currentpage = null, bool? head = null, string searchtext = null, string source = null, string tag = null)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentWithText");

            var localVarPath = "/Content/Search/{locale}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locale != null) localVarPathParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // path parameter
            if (ctype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ctype", ctype)); // query parameter
            if (currentpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentpage", currentpage)); // query parameter
            if (head != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "head", head)); // query parameter
            if (searchtext != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchtext", searchtext)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentSearchContentWithText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ContentSearchContentWithTextAsync (string locale, string ctype = null, int? currentpage = null, bool? head = null, string searchtext = null, string source = null, string tag = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await ContentSearchContentWithTextAsyncWithHttpInfo(locale, ctype, currentpage, head, searchtext, source, tag);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ContentSearchContentWithTextAsyncWithHttpInfo (string locale, string ctype = null, int? currentpage = null, bool? head = null, string searchtext = null, string source = null, string tag = null)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentWithText");

            var localVarPath = "/Content/Search/{locale}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locale != null) localVarPathParams.Add("locale", this.Configuration.ApiClient.ParameterToString(locale)); // path parameter
            if (ctype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ctype", ctype)); // query parameter
            if (currentpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentpage", currentpage)); // query parameter
            if (head != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "head", head)); // query parameter
            if (searchtext != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchtext", searchtext)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentSearchContentWithText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

    }
}
