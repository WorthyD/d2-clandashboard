/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieAPI.Client;
using BungieAPI.Model;

namespace BungieAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestiny2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the action token if user approves the request.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <returns>InlineResponse20059</returns>
        InlineResponse20059 Destiny2AwaGetActionToken (string correlationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the action token if user approves the request.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <returns>ApiResponse of InlineResponse20059</returns>
        ApiResponse<InlineResponse20059> Destiny2AwaGetActionTokenWithHttpInfo (string correlationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a request to perform an advanced write action.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20058</returns>
        InlineResponse20058 Destiny2AwaInitializeRequest ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a request to perform an advanced write action.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20058</returns>
        ApiResponse<InlineResponse20058> Destiny2AwaInitializeRequestWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 Destiny2AwaProvideAuthorizationResult ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> Destiny2AwaProvideAuthorizationResultWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 Destiny2EquipItem ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> Destiny2EquipItemWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20044</returns>
        InlineResponse20044 Destiny2EquipItems ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        ApiResponse<InlineResponse20044> Destiny2EquipItemsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>InlineResponse20053</returns>
        InlineResponse20053 Destiny2GetActivityHistory (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        ApiResponse<InlineResponse20053> Destiny2GetActivityHistoryWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 Destiny2GetCharacter (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> Destiny2GetCharacterWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>InlineResponse20049</returns>
        InlineResponse20049 Destiny2GetClanAggregateStats (long? groupId, string modes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        ApiResponse<InlineResponse20049> Destiny2GetClanAggregateStatsWithHttpInfo (long? groupId, string modes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 Destiny2GetClanLeaderboards (long? groupId, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> Destiny2GetClanLeaderboardsWithHttpInfo (long? groupId, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>InlineResponse20039</returns>
        InlineResponse20039 Destiny2GetClanWeeklyRewardState (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        ApiResponse<InlineResponse20039> Destiny2GetClanWeeklyRewardStateWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 Destiny2GetCollectibleNodeDetails (long? characterId, int? collectiblePresentationNodeHash, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> Destiny2GetCollectibleNodeDetailsWithHttpInfo (long? characterId, int? collectiblePresentationNodeHash, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>InlineResponse20055</returns>
        InlineResponse20055 Destiny2GetDestinyAggregateActivityStats (long? characterId, long? destinyMembershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        ApiResponse<InlineResponse20055> Destiny2GetDestinyAggregateActivityStatsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 Destiny2GetDestinyEntityDefinition (string entityType, int? hashIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> Destiny2GetDestinyEntityDefinitionWithHttpInfo (string entityType, int? hashIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 Destiny2GetDestinyManifest ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> Destiny2GetDestinyManifestWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>InlineResponse20051</returns>
        InlineResponse20051 Destiny2GetHistoricalStats (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        ApiResponse<InlineResponse20051> Destiny2GetHistoricalStatsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 Destiny2GetHistoricalStatsDefinition ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> Destiny2GetHistoricalStatsDefinitionWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>InlineResponse20052</returns>
        InlineResponse20052 Destiny2GetHistoricalStatsForAccount (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        ApiResponse<InlineResponse20052> Destiny2GetHistoricalStatsForAccountWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 Destiny2GetItem (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> Destiny2GetItemWithHttpInfo (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 Destiny2GetLeaderboards (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> Destiny2GetLeaderboardsWithHttpInfo (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 Destiny2GetLeaderboardsForCharacter (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> Destiny2GetLeaderboardsForCharacterWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 Destiny2GetLinkedProfiles (long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> Destiny2GetLinkedProfilesWithHttpInfo (long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>InlineResponse20046</returns>
        InlineResponse20046 Destiny2GetPostGameCarnageReport (long? activityId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        ApiResponse<InlineResponse20046> Destiny2GetPostGameCarnageReportWithHttpInfo (long? activityId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 Destiny2GetProfile (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> Destiny2GetProfileWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>InlineResponse20056</returns>
        InlineResponse20056 Destiny2GetPublicMilestoneContent (int? milestoneHash);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>ApiResponse of InlineResponse20056</returns>
        ApiResponse<InlineResponse20056> Destiny2GetPublicMilestoneContentWithHttpInfo (int? milestoneHash);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20057</returns>
        InlineResponse20057 Destiny2GetPublicMilestones ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20057</returns>
        ApiResponse<InlineResponse20057> Destiny2GetPublicMilestonesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>InlineResponse20054</returns>
        InlineResponse20054 Destiny2GetUniqueWeaponHistory (long? characterId, long? destinyMembershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        ApiResponse<InlineResponse20054> Destiny2GetUniqueWeaponHistoryWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20042</returns>
        InlineResponse20042 Destiny2GetVendor (long? characterId, long? destinyMembershipId, int? membershipType, int? vendorHash, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        ApiResponse<InlineResponse20042> Destiny2GetVendorWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? vendorHash, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 Destiny2GetVendors (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> Destiny2GetVendorsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 Destiny2InsertSocketPlug ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> Destiny2InsertSocketPlugWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 Destiny2PullFromPostmaster ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> Destiny2PullFromPostmasterWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 Destiny2ReportOffensivePostGameCarnageReportPlayer (long? activityId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfo (long? activityId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 Destiny2SearchDestinyEntities (string searchTerm, string type, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> Destiny2SearchDestinyEntitiesWithHttpInfo (string searchTerm, string type, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 Destiny2SearchDestinyPlayer (string displayName, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> Destiny2SearchDestinyPlayerWithHttpInfo (string displayName, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 Destiny2SetItemLockState ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> Destiny2SetItemLockStateWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 Destiny2TransferItem ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> Destiny2TransferItemWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the action token if user approves the request.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <returns>Task of InlineResponse20059</returns>
        System.Threading.Tasks.Task<InlineResponse20059> Destiny2AwaGetActionTokenAsync (string correlationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the action token if user approves the request.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20059)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20059>> Destiny2AwaGetActionTokenAsyncWithHttpInfo (string correlationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a request to perform an advanced write action.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20058</returns>
        System.Threading.Tasks.Task<InlineResponse20058> Destiny2AwaInitializeRequestAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a request to perform an advanced write action.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20058)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20058>> Destiny2AwaInitializeRequestAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> Destiny2AwaProvideAuthorizationResultAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2AwaProvideAuthorizationResultAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> Destiny2EquipItemAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2EquipItemAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20044</returns>
        System.Threading.Tasks.Task<InlineResponse20044> Destiny2EquipItemsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> Destiny2EquipItemsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of InlineResponse20053</returns>
        System.Threading.Tasks.Task<InlineResponse20053> Destiny2GetActivityHistoryAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> Destiny2GetActivityHistoryAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> Destiny2GetCharacterAsync (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> Destiny2GetCharacterAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>Task of InlineResponse20049</returns>
        System.Threading.Tasks.Task<InlineResponse20049> Destiny2GetClanAggregateStatsAsync (long? groupId, string modes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> Destiny2GetClanAggregateStatsAsyncWithHttpInfo (long? groupId, string modes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> Destiny2GetClanLeaderboardsAsync (long? groupId, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> Destiny2GetClanLeaderboardsAsyncWithHttpInfo (long? groupId, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>Task of InlineResponse20039</returns>
        System.Threading.Tasks.Task<InlineResponse20039> Destiny2GetClanWeeklyRewardStateAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> Destiny2GetClanWeeklyRewardStateAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> Destiny2GetCollectibleNodeDetailsAsync (long? characterId, int? collectiblePresentationNodeHash, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> Destiny2GetCollectibleNodeDetailsAsyncWithHttpInfo (long? characterId, int? collectiblePresentationNodeHash, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of InlineResponse20055</returns>
        System.Threading.Tasks.Task<InlineResponse20055> Destiny2GetDestinyAggregateActivityStatsAsync (long? characterId, long? destinyMembershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> Destiny2GetDestinyAggregateActivityStatsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> Destiny2GetDestinyEntityDefinitionAsync (string entityType, int? hashIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> Destiny2GetDestinyEntityDefinitionAsyncWithHttpInfo (string entityType, int? hashIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> Destiny2GetDestinyManifestAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> Destiny2GetDestinyManifestAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>Task of InlineResponse20051</returns>
        System.Threading.Tasks.Task<InlineResponse20051> Destiny2GetHistoricalStatsAsync (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> Destiny2GetHistoricalStatsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> Destiny2GetHistoricalStatsDefinitionAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> Destiny2GetHistoricalStatsDefinitionAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>Task of InlineResponse20052</returns>
        System.Threading.Tasks.Task<InlineResponse20052> Destiny2GetHistoricalStatsForAccountAsync (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> Destiny2GetHistoricalStatsForAccountAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> Destiny2GetItemAsync (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> Destiny2GetItemAsyncWithHttpInfo (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> Destiny2GetLeaderboardsAsync (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> Destiny2GetLeaderboardsAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> Destiny2GetLeaderboardsForCharacterAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> Destiny2GetLeaderboardsForCharacterAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> Destiny2GetLinkedProfilesAsync (long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> Destiny2GetLinkedProfilesAsyncWithHttpInfo (long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>Task of InlineResponse20046</returns>
        System.Threading.Tasks.Task<InlineResponse20046> Destiny2GetPostGameCarnageReportAsync (long? activityId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> Destiny2GetPostGameCarnageReportAsyncWithHttpInfo (long? activityId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> Destiny2GetProfileAsync (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> Destiny2GetProfileAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>Task of InlineResponse20056</returns>
        System.Threading.Tasks.Task<InlineResponse20056> Destiny2GetPublicMilestoneContentAsync (int? milestoneHash);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20056)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20056>> Destiny2GetPublicMilestoneContentAsyncWithHttpInfo (int? milestoneHash);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20057</returns>
        System.Threading.Tasks.Task<InlineResponse20057> Destiny2GetPublicMilestonesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20057)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20057>> Destiny2GetPublicMilestonesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of InlineResponse20054</returns>
        System.Threading.Tasks.Task<InlineResponse20054> Destiny2GetUniqueWeaponHistoryAsync (long? characterId, long? destinyMembershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> Destiny2GetUniqueWeaponHistoryAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20042</returns>
        System.Threading.Tasks.Task<InlineResponse20042> Destiny2GetVendorAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? vendorHash, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> Destiny2GetVendorAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? vendorHash, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> Destiny2GetVendorsAsync (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> Destiny2GetVendorsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> Destiny2InsertSocketPlugAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> Destiny2InsertSocketPlugAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> Destiny2PullFromPostmasterAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2PullFromPostmasterAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> Destiny2ReportOffensivePostGameCarnageReportPlayerAsync (long? activityId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2ReportOffensivePostGameCarnageReportPlayerAsyncWithHttpInfo (long? activityId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> Destiny2SearchDestinyEntitiesAsync (string searchTerm, string type, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> Destiny2SearchDestinyEntitiesAsyncWithHttpInfo (string searchTerm, string type, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> Destiny2SearchDestinyPlayerAsync (string displayName, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> Destiny2SearchDestinyPlayerAsyncWithHttpInfo (string displayName, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> Destiny2SetItemLockStateAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2SetItemLockStateAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> Destiny2TransferItemAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2TransferItemAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Destiny2Api : IDestiny2Api
    {
        private BungieAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Destiny2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Destiny2Api(String basePath)
        {
            this.Configuration = new BungieAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BungieAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Destiny2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Destiny2Api(BungieAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BungieAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns the action token if user approves the request.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <returns>InlineResponse20059</returns>
        public InlineResponse20059 Destiny2AwaGetActionToken (string correlationId)
        {
             ApiResponse<InlineResponse20059> localVarResponse = Destiny2AwaGetActionTokenWithHttpInfo(correlationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the action token if user approves the request.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <returns>ApiResponse of InlineResponse20059</returns>
        public ApiResponse< InlineResponse20059 > Destiny2AwaGetActionTokenWithHttpInfo (string correlationId)
        {
            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
                throw new ApiException(400, "Missing required parameter 'correlationId' when calling Destiny2Api->Destiny2AwaGetActionToken");

            var localVarPath = "/Destiny2/Awa/GetActionToken/{correlationId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (correlationId != null) localVarPathParams.Add("correlationId", this.Configuration.ApiClient.ParameterToString(correlationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2AwaGetActionToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20059>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20059) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20059)));
        }

        /// <summary>
        ///  Returns the action token if user approves the request.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <returns>Task of InlineResponse20059</returns>
        public async System.Threading.Tasks.Task<InlineResponse20059> Destiny2AwaGetActionTokenAsync (string correlationId)
        {
             ApiResponse<InlineResponse20059> localVarResponse = await Destiny2AwaGetActionTokenAsyncWithHttpInfo(correlationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the action token if user approves the request.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20059)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20059>> Destiny2AwaGetActionTokenAsyncWithHttpInfo (string correlationId)
        {
            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
                throw new ApiException(400, "Missing required parameter 'correlationId' when calling Destiny2Api->Destiny2AwaGetActionToken");

            var localVarPath = "/Destiny2/Awa/GetActionToken/{correlationId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (correlationId != null) localVarPathParams.Add("correlationId", this.Configuration.ApiClient.ParameterToString(correlationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2AwaGetActionToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20059>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20059) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20059)));
        }

        /// <summary>
        ///  Initialize a request to perform an advanced write action.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20058</returns>
        public InlineResponse20058 Destiny2AwaInitializeRequest ()
        {
             ApiResponse<InlineResponse20058> localVarResponse = Destiny2AwaInitializeRequestWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Initialize a request to perform an advanced write action.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20058</returns>
        public ApiResponse< InlineResponse20058 > Destiny2AwaInitializeRequestWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Awa/Initialize/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2AwaInitializeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20058>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20058) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20058)));
        }

        /// <summary>
        ///  Initialize a request to perform an advanced write action.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20058</returns>
        public async System.Threading.Tasks.Task<InlineResponse20058> Destiny2AwaInitializeRequestAsync ()
        {
             ApiResponse<InlineResponse20058> localVarResponse = await Destiny2AwaInitializeRequestAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Initialize a request to perform an advanced write action.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20058)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20058>> Destiny2AwaInitializeRequestAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Awa/Initialize/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2AwaInitializeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20058>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20058) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20058)));
        }

        /// <summary>
        ///  Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 Destiny2AwaProvideAuthorizationResult ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = Destiny2AwaProvideAuthorizationResultWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > Destiny2AwaProvideAuthorizationResultWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Awa/AwaProvideAuthorizationResult/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2AwaProvideAuthorizationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> Destiny2AwaProvideAuthorizationResultAsync ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = await Destiny2AwaProvideAuthorizationResultAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2AwaProvideAuthorizationResultAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Awa/AwaProvideAuthorizationResult/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2AwaProvideAuthorizationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 Destiny2EquipItem ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = Destiny2EquipItemWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > Destiny2EquipItemWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/EquipItem/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2EquipItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> Destiny2EquipItemAsync ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = await Destiny2EquipItemAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2EquipItemAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/EquipItem/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2EquipItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20044</returns>
        public InlineResponse20044 Destiny2EquipItems ()
        {
             ApiResponse<InlineResponse20044> localVarResponse = Destiny2EquipItemsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        public ApiResponse< InlineResponse20044 > Destiny2EquipItemsWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/EquipItems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2EquipItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20044) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20044</returns>
        public async System.Threading.Tasks.Task<InlineResponse20044> Destiny2EquipItemsAsync ()
        {
             ApiResponse<InlineResponse20044> localVarResponse = await Destiny2EquipItemsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> Destiny2EquipItemsAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/EquipItems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2EquipItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20044) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
        }

        /// <summary>
        ///  Gets activity history stats for indicated character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>InlineResponse20053</returns>
        public InlineResponse20053 Destiny2GetActivityHistory (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null)
        {
             ApiResponse<InlineResponse20053> localVarResponse = Destiny2GetActivityHistoryWithHttpInfo(characterId, destinyMembershipId, membershipType, count, mode, page);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets activity history stats for indicated character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        public ApiResponse< InlineResponse20053 > Destiny2GetActivityHistoryWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetActivityHistory");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetActivityHistory");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetActivityHistory");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetActivityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        ///  Gets activity history stats for indicated character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of InlineResponse20053</returns>
        public async System.Threading.Tasks.Task<InlineResponse20053> Destiny2GetActivityHistoryAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null)
        {
             ApiResponse<InlineResponse20053> localVarResponse = await Destiny2GetActivityHistoryAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, count, mode, page);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets activity history stats for indicated character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> Destiny2GetActivityHistoryAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetActivityHistory");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetActivityHistory");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetActivityHistory");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetActivityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 Destiny2GetCharacter (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20038> localVarResponse = Destiny2GetCharacterWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public ApiResponse< InlineResponse20038 > Destiny2GetCharacterWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetCharacter");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetCharacter");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetCharacter");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetCharacter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20038) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038> Destiny2GetCharacterAsync (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20038> localVarResponse = await Destiny2GetCharacterAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> Destiny2GetCharacterAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetCharacter");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetCharacter");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetCharacter");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetCharacter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20038) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>InlineResponse20049</returns>
        public InlineResponse20049 Destiny2GetClanAggregateStats (long? groupId, string modes = null)
        {
             ApiResponse<InlineResponse20049> localVarResponse = Destiny2GetClanAggregateStatsWithHttpInfo(groupId, modes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        public ApiResponse< InlineResponse20049 > Destiny2GetClanAggregateStatsWithHttpInfo (long? groupId, string modes = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanAggregateStats");

            var localVarPath = "/Destiny2/Stats/AggregateClanStats/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanAggregateStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20049) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>Task of InlineResponse20049</returns>
        public async System.Threading.Tasks.Task<InlineResponse20049> Destiny2GetClanAggregateStatsAsync (long? groupId, string modes = null)
        {
             ApiResponse<InlineResponse20049> localVarResponse = await Destiny2GetClanAggregateStatsAsyncWithHttpInfo(groupId, modes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> Destiny2GetClanAggregateStatsAsyncWithHttpInfo (long? groupId, string modes = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanAggregateStats");

            var localVarPath = "/Destiny2/Stats/AggregateClanStats/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanAggregateStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20049) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 Destiny2GetClanLeaderboards (long? groupId, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20048> localVarResponse = Destiny2GetClanLeaderboardsWithHttpInfo(groupId, maxtop, modes, statid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse< InlineResponse20048 > Destiny2GetClanLeaderboardsWithHttpInfo (long? groupId, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanLeaderboards");

            var localVarPath = "/Destiny2/Stats/Leaderboards/Clans/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048> Destiny2GetClanLeaderboardsAsync (long? groupId, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20048> localVarResponse = await Destiny2GetClanLeaderboardsAsyncWithHttpInfo(groupId, maxtop, modes, statid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> Destiny2GetClanLeaderboardsAsyncWithHttpInfo (long? groupId, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanLeaderboards");

            var localVarPath = "/Destiny2/Stats/Leaderboards/Clans/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>InlineResponse20039</returns>
        public InlineResponse20039 Destiny2GetClanWeeklyRewardState (long? groupId)
        {
             ApiResponse<InlineResponse20039> localVarResponse = Destiny2GetClanWeeklyRewardStateWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        public ApiResponse< InlineResponse20039 > Destiny2GetClanWeeklyRewardStateWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanWeeklyRewardState");

            var localVarPath = "/Destiny2/Clan/{groupId}/WeeklyRewardState/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanWeeklyRewardState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20039>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20039) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20039)));
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>Task of InlineResponse20039</returns>
        public async System.Threading.Tasks.Task<InlineResponse20039> Destiny2GetClanWeeklyRewardStateAsync (long? groupId)
        {
             ApiResponse<InlineResponse20039> localVarResponse = await Destiny2GetClanWeeklyRewardStateAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> Destiny2GetClanWeeklyRewardStateAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanWeeklyRewardState");

            var localVarPath = "/Destiny2/Clan/{groupId}/WeeklyRewardState/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanWeeklyRewardState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20039>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20039) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20039)));
        }

        /// <summary>
        ///  Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 Destiny2GetCollectibleNodeDetails (long? characterId, int? collectiblePresentationNodeHash, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20043> localVarResponse = Destiny2GetCollectibleNodeDetailsWithHttpInfo(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public ApiResponse< InlineResponse20043 > Destiny2GetCollectibleNodeDetailsWithHttpInfo (long? characterId, int? collectiblePresentationNodeHash, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetCollectibleNodeDetails");
            // verify the required parameter 'collectiblePresentationNodeHash' is set
            if (collectiblePresentationNodeHash == null)
                throw new ApiException(400, "Missing required parameter 'collectiblePresentationNodeHash' when calling Destiny2Api->Destiny2GetCollectibleNodeDetails");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetCollectibleNodeDetails");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetCollectibleNodeDetails");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (collectiblePresentationNodeHash != null) localVarPathParams.Add("collectiblePresentationNodeHash", this.Configuration.ApiClient.ParameterToString(collectiblePresentationNodeHash)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetCollectibleNodeDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
        }

        /// <summary>
        ///  Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043> Destiny2GetCollectibleNodeDetailsAsync (long? characterId, int? collectiblePresentationNodeHash, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20043> localVarResponse = await Destiny2GetCollectibleNodeDetailsAsyncWithHttpInfo(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> Destiny2GetCollectibleNodeDetailsAsyncWithHttpInfo (long? characterId, int? collectiblePresentationNodeHash, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetCollectibleNodeDetails");
            // verify the required parameter 'collectiblePresentationNodeHash' is set
            if (collectiblePresentationNodeHash == null)
                throw new ApiException(400, "Missing required parameter 'collectiblePresentationNodeHash' when calling Destiny2Api->Destiny2GetCollectibleNodeDetails");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetCollectibleNodeDetails");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetCollectibleNodeDetails");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (collectiblePresentationNodeHash != null) localVarPathParams.Add("collectiblePresentationNodeHash", this.Configuration.ApiClient.ParameterToString(collectiblePresentationNodeHash)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetCollectibleNodeDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>InlineResponse20055</returns>
        public InlineResponse20055 Destiny2GetDestinyAggregateActivityStats (long? characterId, long? destinyMembershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20055> localVarResponse = Destiny2GetDestinyAggregateActivityStatsWithHttpInfo(characterId, destinyMembershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        public ApiResponse< InlineResponse20055 > Destiny2GetDestinyAggregateActivityStatsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyAggregateActivityStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20055>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20055) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20055)));
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of InlineResponse20055</returns>
        public async System.Threading.Tasks.Task<InlineResponse20055> Destiny2GetDestinyAggregateActivityStatsAsync (long? characterId, long? destinyMembershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20055> localVarResponse = await Destiny2GetDestinyAggregateActivityStatsAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> Destiny2GetDestinyAggregateActivityStatsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyAggregateActivityStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20055>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20055) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20055)));
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 Destiny2GetDestinyEntityDefinition (string entityType, int? hashIdentifier)
        {
             ApiResponse<InlineResponse20034> localVarResponse = Destiny2GetDestinyEntityDefinitionWithHttpInfo(entityType, hashIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public ApiResponse< InlineResponse20034 > Destiny2GetDestinyEntityDefinitionWithHttpInfo (string entityType, int? hashIdentifier)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");
            // verify the required parameter 'hashIdentifier' is set
            if (hashIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'hashIdentifier' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");

            var localVarPath = "/Destiny2/Manifest/{entityType}/{hashIdentifier}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("entityType", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (hashIdentifier != null) localVarPathParams.Add("hashIdentifier", this.Configuration.ApiClient.ParameterToString(hashIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyEntityDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034> Destiny2GetDestinyEntityDefinitionAsync (string entityType, int? hashIdentifier)
        {
             ApiResponse<InlineResponse20034> localVarResponse = await Destiny2GetDestinyEntityDefinitionAsyncWithHttpInfo(entityType, hashIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> Destiny2GetDestinyEntityDefinitionAsyncWithHttpInfo (string entityType, int? hashIdentifier)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");
            // verify the required parameter 'hashIdentifier' is set
            if (hashIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'hashIdentifier' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");

            var localVarPath = "/Destiny2/Manifest/{entityType}/{hashIdentifier}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("entityType", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (hashIdentifier != null) localVarPathParams.Add("hashIdentifier", this.Configuration.ApiClient.ParameterToString(hashIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyEntityDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 Destiny2GetDestinyManifest ()
        {
             ApiResponse<InlineResponse20033> localVarResponse = Destiny2GetDestinyManifestWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse< InlineResponse20033 > Destiny2GetDestinyManifestWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Manifest/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> Destiny2GetDestinyManifestAsync ()
        {
             ApiResponse<InlineResponse20033> localVarResponse = await Destiny2GetDestinyManifestAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> Destiny2GetDestinyManifestAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Manifest/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        ///  Gets historical stats for indicated character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>InlineResponse20051</returns>
        public InlineResponse20051 Destiny2GetHistoricalStats (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null)
        {
             ApiResponse<InlineResponse20051> localVarResponse = Destiny2GetHistoricalStatsWithHttpInfo(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets historical stats for indicated character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        public ApiResponse< InlineResponse20051 > Destiny2GetHistoricalStatsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetHistoricalStats");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetHistoricalStats");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetHistoricalStats");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (dayend != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayend", dayend)); // query parameter
            if (daystart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "daystart", daystart)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "groups", groups)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "modes", modes)); // query parameter
            if (periodType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "periodType", periodType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20051>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20051) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20051)));
        }

        /// <summary>
        ///  Gets historical stats for indicated character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>Task of InlineResponse20051</returns>
        public async System.Threading.Tasks.Task<InlineResponse20051> Destiny2GetHistoricalStatsAsync (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null)
        {
             ApiResponse<InlineResponse20051> localVarResponse = await Destiny2GetHistoricalStatsAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets historical stats for indicated character.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> Destiny2GetHistoricalStatsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetHistoricalStats");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetHistoricalStats");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetHistoricalStats");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (dayend != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayend", dayend)); // query parameter
            if (daystart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "daystart", daystart)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "groups", groups)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "modes", modes)); // query parameter
            if (periodType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "periodType", periodType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20051>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20051) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20051)));
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 Destiny2GetHistoricalStatsDefinition ()
        {
             ApiResponse<InlineResponse20047> localVarResponse = Destiny2GetHistoricalStatsDefinitionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public ApiResponse< InlineResponse20047 > Destiny2GetHistoricalStatsDefinitionWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Stats/Definition/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStatsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047> Destiny2GetHistoricalStatsDefinitionAsync ()
        {
             ApiResponse<InlineResponse20047> localVarResponse = await Destiny2GetHistoricalStatsDefinitionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> Destiny2GetHistoricalStatsDefinitionAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Stats/Definition/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStatsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>InlineResponse20052</returns>
        public InlineResponse20052 Destiny2GetHistoricalStatsForAccount (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null)
        {
             ApiResponse<InlineResponse20052> localVarResponse = Destiny2GetHistoricalStatsForAccountWithHttpInfo(destinyMembershipId, membershipType, groups);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        public ApiResponse< InlineResponse20052 > Destiny2GetHistoricalStatsForAccountWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetHistoricalStatsForAccount");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetHistoricalStatsForAccount");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStatsForAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20052>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20052) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20052)));
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>Task of InlineResponse20052</returns>
        public async System.Threading.Tasks.Task<InlineResponse20052> Destiny2GetHistoricalStatsForAccountAsync (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null)
        {
             ApiResponse<InlineResponse20052> localVarResponse = await Destiny2GetHistoricalStatsForAccountAsyncWithHttpInfo(destinyMembershipId, membershipType, groups);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> Destiny2GetHistoricalStatsForAccountAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetHistoricalStatsForAccount");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetHistoricalStatsForAccount");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStatsForAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20052>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20052) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20052)));
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 Destiny2GetItem (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20040> localVarResponse = Destiny2GetItemWithHttpInfo(destinyMembershipId, itemInstanceId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public ApiResponse< InlineResponse20040 > Destiny2GetItemWithHttpInfo (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetItem");
            // verify the required parameter 'itemInstanceId' is set
            if (itemInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'itemInstanceId' when calling Destiny2Api->Destiny2GetItem");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetItem");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (itemInstanceId != null) localVarPathParams.Add("itemInstanceId", this.Configuration.ApiClient.ParameterToString(itemInstanceId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20040) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040> Destiny2GetItemAsync (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20040> localVarResponse = await Destiny2GetItemAsyncWithHttpInfo(destinyMembershipId, itemInstanceId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> Destiny2GetItemAsyncWithHttpInfo (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetItem");
            // verify the required parameter 'itemInstanceId' is set
            if (itemInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'itemInstanceId' when calling Destiny2Api->Destiny2GetItem");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetItem");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (itemInstanceId != null) localVarPathParams.Add("itemInstanceId", this.Configuration.ApiClient.ParameterToString(itemInstanceId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20040) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 Destiny2GetLeaderboards (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20048> localVarResponse = Destiny2GetLeaderboardsWithHttpInfo(destinyMembershipId, membershipType, maxtop, modes, statid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse< InlineResponse20048 > Destiny2GetLeaderboardsWithHttpInfo (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetLeaderboards");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLeaderboards");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048> Destiny2GetLeaderboardsAsync (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20048> localVarResponse = await Destiny2GetLeaderboardsAsyncWithHttpInfo(destinyMembershipId, membershipType, maxtop, modes, statid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> Destiny2GetLeaderboardsAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetLeaderboards");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLeaderboards");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 Destiny2GetLeaderboardsForCharacter (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20048> localVarResponse = Destiny2GetLeaderboardsForCharacterWithHttpInfo(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse< InlineResponse20048 > Destiny2GetLeaderboardsForCharacterWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");

            var localVarPath = "/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLeaderboardsForCharacter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048> Destiny2GetLeaderboardsForCharacterAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20048> localVarResponse = await Destiny2GetLeaderboardsForCharacterAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> Destiny2GetLeaderboardsForCharacterAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");

            var localVarPath = "/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLeaderboardsForCharacter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 Destiny2GetLinkedProfiles (long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20036> localVarResponse = Destiny2GetLinkedProfilesWithHttpInfo(membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse< InlineResponse20036 > Destiny2GetLinkedProfilesWithHttpInfo (long? membershipId, int? membershipType)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling Destiny2Api->Destiny2GetLinkedProfiles");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLinkedProfiles");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (membershipId != null) localVarPathParams.Add("membershipId", this.Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLinkedProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> Destiny2GetLinkedProfilesAsync (long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20036> localVarResponse = await Destiny2GetLinkedProfilesAsyncWithHttpInfo(membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> Destiny2GetLinkedProfilesAsyncWithHttpInfo (long? membershipId, int? membershipType)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling Destiny2Api->Destiny2GetLinkedProfiles");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLinkedProfiles");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (membershipId != null) localVarPathParams.Add("membershipId", this.Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLinkedProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>InlineResponse20046</returns>
        public InlineResponse20046 Destiny2GetPostGameCarnageReport (long? activityId)
        {
             ApiResponse<InlineResponse20046> localVarResponse = Destiny2GetPostGameCarnageReportWithHttpInfo(activityId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        public ApiResponse< InlineResponse20046 > Destiny2GetPostGameCarnageReportWithHttpInfo (long? activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new ApiException(400, "Missing required parameter 'activityId' when calling Destiny2Api->Destiny2GetPostGameCarnageReport");

            var localVarPath = "/Destiny2/Stats/PostGameCarnageReport/{activityId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityId != null) localVarPathParams.Add("activityId", this.Configuration.ApiClient.ParameterToString(activityId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPostGameCarnageReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20046>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20046) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20046)));
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>Task of InlineResponse20046</returns>
        public async System.Threading.Tasks.Task<InlineResponse20046> Destiny2GetPostGameCarnageReportAsync (long? activityId)
        {
             ApiResponse<InlineResponse20046> localVarResponse = await Destiny2GetPostGameCarnageReportAsyncWithHttpInfo(activityId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> Destiny2GetPostGameCarnageReportAsyncWithHttpInfo (long? activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new ApiException(400, "Missing required parameter 'activityId' when calling Destiny2Api->Destiny2GetPostGameCarnageReport");

            var localVarPath = "/Destiny2/Stats/PostGameCarnageReport/{activityId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityId != null) localVarPathParams.Add("activityId", this.Configuration.ApiClient.ParameterToString(activityId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPostGameCarnageReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20046>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20046) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20046)));
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 Destiny2GetProfile (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20037> localVarResponse = Destiny2GetProfileWithHttpInfo(destinyMembershipId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public ApiResponse< InlineResponse20037 > Destiny2GetProfileWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetProfile");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetProfile");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20037) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037> Destiny2GetProfileAsync (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20037> localVarResponse = await Destiny2GetProfileAsyncWithHttpInfo(destinyMembershipId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> Destiny2GetProfileAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetProfile");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetProfile");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20037) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>InlineResponse20056</returns>
        public InlineResponse20056 Destiny2GetPublicMilestoneContent (int? milestoneHash)
        {
             ApiResponse<InlineResponse20056> localVarResponse = Destiny2GetPublicMilestoneContentWithHttpInfo(milestoneHash);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>ApiResponse of InlineResponse20056</returns>
        public ApiResponse< InlineResponse20056 > Destiny2GetPublicMilestoneContentWithHttpInfo (int? milestoneHash)
        {
            // verify the required parameter 'milestoneHash' is set
            if (milestoneHash == null)
                throw new ApiException(400, "Missing required parameter 'milestoneHash' when calling Destiny2Api->Destiny2GetPublicMilestoneContent");

            var localVarPath = "/Destiny2/Milestones/{milestoneHash}/Content/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (milestoneHash != null) localVarPathParams.Add("milestoneHash", this.Configuration.ApiClient.ParameterToString(milestoneHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPublicMilestoneContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20056>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20056) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20056)));
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>Task of InlineResponse20056</returns>
        public async System.Threading.Tasks.Task<InlineResponse20056> Destiny2GetPublicMilestoneContentAsync (int? milestoneHash)
        {
             ApiResponse<InlineResponse20056> localVarResponse = await Destiny2GetPublicMilestoneContentAsyncWithHttpInfo(milestoneHash);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20056)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20056>> Destiny2GetPublicMilestoneContentAsyncWithHttpInfo (int? milestoneHash)
        {
            // verify the required parameter 'milestoneHash' is set
            if (milestoneHash == null)
                throw new ApiException(400, "Missing required parameter 'milestoneHash' when calling Destiny2Api->Destiny2GetPublicMilestoneContent");

            var localVarPath = "/Destiny2/Milestones/{milestoneHash}/Content/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (milestoneHash != null) localVarPathParams.Add("milestoneHash", this.Configuration.ApiClient.ParameterToString(milestoneHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPublicMilestoneContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20056>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20056) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20056)));
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20057</returns>
        public InlineResponse20057 Destiny2GetPublicMilestones ()
        {
             ApiResponse<InlineResponse20057> localVarResponse = Destiny2GetPublicMilestonesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20057</returns>
        public ApiResponse< InlineResponse20057 > Destiny2GetPublicMilestonesWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Milestones/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPublicMilestones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20057>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20057) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20057)));
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20057</returns>
        public async System.Threading.Tasks.Task<InlineResponse20057> Destiny2GetPublicMilestonesAsync ()
        {
             ApiResponse<InlineResponse20057> localVarResponse = await Destiny2GetPublicMilestonesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20057)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20057>> Destiny2GetPublicMilestonesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Milestones/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPublicMilestones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20057>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20057) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20057)));
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>InlineResponse20054</returns>
        public InlineResponse20054 Destiny2GetUniqueWeaponHistory (long? characterId, long? destinyMembershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20054> localVarResponse = Destiny2GetUniqueWeaponHistoryWithHttpInfo(characterId, destinyMembershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        public ApiResponse< InlineResponse20054 > Destiny2GetUniqueWeaponHistoryWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetUniqueWeaponHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20054) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of InlineResponse20054</returns>
        public async System.Threading.Tasks.Task<InlineResponse20054> Destiny2GetUniqueWeaponHistoryAsync (long? characterId, long? destinyMembershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20054> localVarResponse = await Destiny2GetUniqueWeaponHistoryAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> Destiny2GetUniqueWeaponHistoryAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetUniqueWeaponHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20054) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        ///  Get the details of a specific Vendor.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20042</returns>
        public InlineResponse20042 Destiny2GetVendor (long? characterId, long? destinyMembershipId, int? membershipType, int? vendorHash, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20042> localVarResponse = Destiny2GetVendorWithHttpInfo(characterId, destinyMembershipId, membershipType, vendorHash, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the details of a specific Vendor.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        public ApiResponse< InlineResponse20042 > Destiny2GetVendorWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? vendorHash, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'vendorHash' is set
            if (vendorHash == null)
                throw new ApiException(400, "Missing required parameter 'vendorHash' when calling Destiny2Api->Destiny2GetVendor");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (vendorHash != null) localVarPathParams.Add("vendorHash", this.Configuration.ApiClient.ParameterToString(vendorHash)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20042) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
        }

        /// <summary>
        ///  Get the details of a specific Vendor.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20042</returns>
        public async System.Threading.Tasks.Task<InlineResponse20042> Destiny2GetVendorAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? vendorHash, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20042> localVarResponse = await Destiny2GetVendorAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, vendorHash, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the details of a specific Vendor.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> Destiny2GetVendorAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? vendorHash, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'vendorHash' is set
            if (vendorHash == null)
                throw new ApiException(400, "Missing required parameter 'vendorHash' when calling Destiny2Api->Destiny2GetVendor");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (vendorHash != null) localVarPathParams.Add("vendorHash", this.Configuration.ApiClient.ParameterToString(vendorHash)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20042) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
        }

        /// <summary>
        ///  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 Destiny2GetVendors (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20041> localVarResponse = Destiny2GetVendorsWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public ApiResponse< InlineResponse20041 > Destiny2GetVendorsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetVendors");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetVendors");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetVendors");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetVendors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        ///  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041> Destiny2GetVendorsAsync (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20041> localVarResponse = await Destiny2GetVendorsAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> Destiny2GetVendorsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetVendors");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetVendors");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetVendors");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", this.Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", this.Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetVendors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 Destiny2InsertSocketPlug ()
        {
             ApiResponse<InlineResponse20045> localVarResponse = Destiny2InsertSocketPlugWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public ApiResponse< InlineResponse20045 > Destiny2InsertSocketPlugWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/InsertSocketPlug/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2InsertSocketPlug", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045> Destiny2InsertSocketPlugAsync ()
        {
             ApiResponse<InlineResponse20045> localVarResponse = await Destiny2InsertSocketPlugAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> Destiny2InsertSocketPlugAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/InsertSocketPlug/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2InsertSocketPlug", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
        }

        /// <summary>
        ///  Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 Destiny2PullFromPostmaster ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = Destiny2PullFromPostmasterWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > Destiny2PullFromPostmasterWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/PullFromPostmaster/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2PullFromPostmaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> Destiny2PullFromPostmasterAsync ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = await Destiny2PullFromPostmasterAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2PullFromPostmasterAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/PullFromPostmaster/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2PullFromPostmaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 Destiny2ReportOffensivePostGameCarnageReportPlayer (long? activityId)
        {
             ApiResponse<InlineResponse20019> localVarResponse = Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfo(activityId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfo (long? activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new ApiException(400, "Missing required parameter 'activityId' when calling Destiny2Api->Destiny2ReportOffensivePostGameCarnageReportPlayer");

            var localVarPath = "/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityId != null) localVarPathParams.Add("activityId", this.Configuration.ApiClient.ParameterToString(activityId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2ReportOffensivePostGameCarnageReportPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> Destiny2ReportOffensivePostGameCarnageReportPlayerAsync (long? activityId)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await Destiny2ReportOffensivePostGameCarnageReportPlayerAsyncWithHttpInfo(activityId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2ReportOffensivePostGameCarnageReportPlayerAsyncWithHttpInfo (long? activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new ApiException(400, "Missing required parameter 'activityId' when calling Destiny2Api->Destiny2ReportOffensivePostGameCarnageReportPlayer");

            var localVarPath = "/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityId != null) localVarPathParams.Add("activityId", this.Configuration.ApiClient.ParameterToString(activityId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2ReportOffensivePostGameCarnageReportPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 Destiny2SearchDestinyEntities (string searchTerm, string type, int? page = null)
        {
             ApiResponse<InlineResponse20050> localVarResponse = Destiny2SearchDestinyEntitiesWithHttpInfo(searchTerm, type, page);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public ApiResponse< InlineResponse20050 > Destiny2SearchDestinyEntitiesWithHttpInfo (string searchTerm, string type, int? page = null)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
                throw new ApiException(400, "Missing required parameter 'searchTerm' when calling Destiny2Api->Destiny2SearchDestinyEntities");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling Destiny2Api->Destiny2SearchDestinyEntities");

            var localVarPath = "/Destiny2/Armory/Search/{type}/{searchTerm}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchTerm != null) localVarPathParams.Add("searchTerm", this.Configuration.ApiClient.ParameterToString(searchTerm)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SearchDestinyEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050> Destiny2SearchDestinyEntitiesAsync (string searchTerm, string type, int? page = null)
        {
             ApiResponse<InlineResponse20050> localVarResponse = await Destiny2SearchDestinyEntitiesAsyncWithHttpInfo(searchTerm, type, page);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> Destiny2SearchDestinyEntitiesAsyncWithHttpInfo (string searchTerm, string type, int? page = null)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
                throw new ApiException(400, "Missing required parameter 'searchTerm' when calling Destiny2Api->Destiny2SearchDestinyEntities");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling Destiny2Api->Destiny2SearchDestinyEntities");

            var localVarPath = "/Destiny2/Armory/Search/{type}/{searchTerm}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchTerm != null) localVarPathParams.Add("searchTerm", this.Configuration.ApiClient.ParameterToString(searchTerm)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SearchDestinyEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 Destiny2SearchDestinyPlayer (string displayName, int? membershipType)
        {
             ApiResponse<InlineResponse20035> localVarResponse = Destiny2SearchDestinyPlayerWithHttpInfo(displayName, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse< InlineResponse20035 > Destiny2SearchDestinyPlayerWithHttpInfo (string displayName, int? membershipType)
        {
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling Destiny2Api->Destiny2SearchDestinyPlayer");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2SearchDestinyPlayer");

            var localVarPath = "/Destiny2/SearchDestinyPlayer/{membershipType}/{displayName}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null) localVarPathParams.Add("displayName", this.Configuration.ApiClient.ParameterToString(displayName)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SearchDestinyPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> Destiny2SearchDestinyPlayerAsync (string displayName, int? membershipType)
        {
             ApiResponse<InlineResponse20035> localVarResponse = await Destiny2SearchDestinyPlayerAsyncWithHttpInfo(displayName, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> Destiny2SearchDestinyPlayerAsyncWithHttpInfo (string displayName, int? membershipType)
        {
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling Destiny2Api->Destiny2SearchDestinyPlayer");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2SearchDestinyPlayer");

            var localVarPath = "/Destiny2/SearchDestinyPlayer/{membershipType}/{displayName}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null) localVarPathParams.Add("displayName", this.Configuration.ApiClient.ParameterToString(displayName)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", this.Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SearchDestinyPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 Destiny2SetItemLockState ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = Destiny2SetItemLockStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > Destiny2SetItemLockStateWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/SetLockState/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SetItemLockState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> Destiny2SetItemLockStateAsync ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = await Destiny2SetItemLockStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2SetItemLockStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/SetLockState/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SetItemLockState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 Destiny2TransferItem ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = Destiny2TransferItemWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > Destiny2TransferItemWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/TransferItem/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2TransferItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> Destiny2TransferItemAsync ()
        {
             ApiResponse<InlineResponse20019> localVarResponse = await Destiny2TransferItemAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> Destiny2TransferItemAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/TransferItem/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2TransferItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

    }
}
