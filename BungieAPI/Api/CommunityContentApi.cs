/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieAPI.Client;
using BungieAPI.Model;

namespace BungieAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommunityContentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns community content.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaFilter">The type of media to get</param>
        /// <param name="page">Zero based page</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 CommunityContentGetCommunityContent (int? mediaFilter, int? page, int? sort);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns community content.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaFilter">The type of media to get</param>
        /// <param name="page">Zero based page</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> CommunityContentGetCommunityContentWithHttpInfo (int? mediaFilter, int? page, int? sort);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="modeHash">The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode. (optional)</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>InlineResponse20060</returns>
        InlineResponse20060 CommunityContentGetCommunityLiveStatuses (int? page, int? partnershipType, int? sort, uint? modeHash = null, string streamLocale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="modeHash">The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode. (optional)</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        ApiResponse<InlineResponse20060> CommunityContentGetCommunityLiveStatusesWithHttpInfo (int? page, int? partnershipType, int? sort, uint? modeHash = null, string streamLocale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming in your clans.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>InlineResponse20060</returns>
        InlineResponse20060 CommunityContentGetCommunityLiveStatusesForClanmates (int? page, int? partnershipType, int? sort);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming in your clans.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        ApiResponse<InlineResponse20060> CommunityContentGetCommunityLiveStatusesForClanmatesWithHttpInfo (int? page, int? partnershipType, int? sort);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming among your friends.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>InlineResponse20060</returns>
        InlineResponse20060 CommunityContentGetCommunityLiveStatusesForFriends (int? page, int? partnershipType, int? sort);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming among your friends.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        ApiResponse<InlineResponse20060> CommunityContentGetCommunityLiveStatusesForFriendsWithHttpInfo (int? page, int? partnershipType, int? sort);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about Featured live streams.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>InlineResponse20060</returns>
        InlineResponse20060 CommunityContentGetFeaturedCommunityLiveStatuses (int? page, int? partnershipType, int? sort, string streamLocale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about Featured live streams.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        ApiResponse<InlineResponse20060> CommunityContentGetFeaturedCommunityLiveStatusesWithHttpInfo (int? page, int? partnershipType, int? sort, string streamLocale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the Live Streaming status of a particular Account and Membership Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membershipId related to that type.</param>
        /// <param name="membershipType">The type of account for which info will be extracted.</param>
        /// <param name="partnershipType">The type of partnership for which info will be extracted.</param>
        /// <returns>InlineResponse20061</returns>
        InlineResponse20061 CommunityContentGetStreamingStatusForMember (long? membershipId, int? membershipType, int? partnershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the Live Streaming status of a particular Account and Membership Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membershipId related to that type.</param>
        /// <param name="membershipType">The type of account for which info will be extracted.</param>
        /// <param name="partnershipType">The type of partnership for which info will be extracted.</param>
        /// <returns>ApiResponse of InlineResponse20061</returns>
        ApiResponse<InlineResponse20061> CommunityContentGetStreamingStatusForMemberWithHttpInfo (long? membershipId, int? membershipType, int? partnershipType);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns community content.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaFilter">The type of media to get</param>
        /// <param name="page">Zero based page</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> CommunityContentGetCommunityContentAsync (int? mediaFilter, int? page, int? sort);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns community content.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaFilter">The type of media to get</param>
        /// <param name="page">Zero based page</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> CommunityContentGetCommunityContentAsyncWithHttpInfo (int? mediaFilter, int? page, int? sort);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="modeHash">The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode. (optional)</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>Task of InlineResponse20060</returns>
        System.Threading.Tasks.Task<InlineResponse20060> CommunityContentGetCommunityLiveStatusesAsync (int? page, int? partnershipType, int? sort, uint? modeHash = null, string streamLocale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="modeHash">The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode. (optional)</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> CommunityContentGetCommunityLiveStatusesAsyncWithHttpInfo (int? page, int? partnershipType, int? sort, uint? modeHash = null, string streamLocale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming in your clans.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of InlineResponse20060</returns>
        System.Threading.Tasks.Task<InlineResponse20060> CommunityContentGetCommunityLiveStatusesForClanmatesAsync (int? page, int? partnershipType, int? sort);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming in your clans.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> CommunityContentGetCommunityLiveStatusesForClanmatesAsyncWithHttpInfo (int? page, int? partnershipType, int? sort);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming among your friends.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of InlineResponse20060</returns>
        System.Threading.Tasks.Task<InlineResponse20060> CommunityContentGetCommunityLiveStatusesForFriendsAsync (int? page, int? partnershipType, int? sort);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about community members who are live streaming among your friends.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> CommunityContentGetCommunityLiveStatusesForFriendsAsyncWithHttpInfo (int? page, int? partnershipType, int? sort);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about Featured live streams.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>Task of InlineResponse20060</returns>
        System.Threading.Tasks.Task<InlineResponse20060> CommunityContentGetFeaturedCommunityLiveStatusesAsync (int? page, int? partnershipType, int? sort, string streamLocale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info about Featured live streams.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> CommunityContentGetFeaturedCommunityLiveStatusesAsyncWithHttpInfo (int? page, int? partnershipType, int? sort, string streamLocale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the Live Streaming status of a particular Account and Membership Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membershipId related to that type.</param>
        /// <param name="membershipType">The type of account for which info will be extracted.</param>
        /// <param name="partnershipType">The type of partnership for which info will be extracted.</param>
        /// <returns>Task of InlineResponse20061</returns>
        System.Threading.Tasks.Task<InlineResponse20061> CommunityContentGetStreamingStatusForMemberAsync (long? membershipId, int? membershipType, int? partnershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the Live Streaming status of a particular Account and Membership Type.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membershipId related to that type.</param>
        /// <param name="membershipType">The type of account for which info will be extracted.</param>
        /// <param name="partnershipType">The type of partnership for which info will be extracted.</param>
        /// <returns>Task of ApiResponse (InlineResponse20061)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20061>> CommunityContentGetStreamingStatusForMemberAsyncWithHttpInfo (long? membershipId, int? membershipType, int? partnershipType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommunityContentApi : ICommunityContentApi
    {
        private BungieAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommunityContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommunityContentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = BungieAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommunityContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommunityContentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns community content.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaFilter">The type of media to get</param>
        /// <param name="page">Zero based page</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 CommunityContentGetCommunityContent (int? mediaFilter, int? page, int? sort)
        {
             ApiResponse<InlineResponse20010> localVarResponse = CommunityContentGetCommunityContentWithHttpInfo(mediaFilter, page, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns community content.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaFilter">The type of media to get</param>
        /// <param name="page">Zero based page</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse< InlineResponse20010 > CommunityContentGetCommunityContentWithHttpInfo (int? mediaFilter, int? page, int? sort)
        {
            // verify the required parameter 'mediaFilter' is set
            if (mediaFilter == null)
                throw new ApiException(400, "Missing required parameter 'mediaFilter' when calling CommunityContentApi->CommunityContentGetCommunityContent");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetCommunityContent");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetCommunityContent");

            var localVarPath = "/CommunityContent/Get/{sort}/{mediaFilter}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediaFilter != null) localVarPathParams.Add("mediaFilter", Configuration.ApiClient.ParameterToString(mediaFilter)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetCommunityContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        ///  Returns community content.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaFilter">The type of media to get</param>
        /// <param name="page">Zero based page</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> CommunityContentGetCommunityContentAsync (int? mediaFilter, int? page, int? sort)
        {
             ApiResponse<InlineResponse20010> localVarResponse = await CommunityContentGetCommunityContentAsyncWithHttpInfo(mediaFilter, page, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns community content.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaFilter">The type of media to get</param>
        /// <param name="page">Zero based page</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> CommunityContentGetCommunityContentAsyncWithHttpInfo (int? mediaFilter, int? page, int? sort)
        {
            // verify the required parameter 'mediaFilter' is set
            if (mediaFilter == null)
                throw new ApiException(400, "Missing required parameter 'mediaFilter' when calling CommunityContentApi->CommunityContentGetCommunityContent");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetCommunityContent");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetCommunityContent");

            var localVarPath = "/CommunityContent/Get/{sort}/{mediaFilter}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediaFilter != null) localVarPathParams.Add("mediaFilter", Configuration.ApiClient.ParameterToString(mediaFilter)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetCommunityContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        ///  Returns info about community members who are live streaming.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="modeHash">The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode. (optional)</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>InlineResponse20060</returns>
        public InlineResponse20060 CommunityContentGetCommunityLiveStatuses (int? page, int? partnershipType, int? sort, uint? modeHash = null, string streamLocale = null)
        {
             ApiResponse<InlineResponse20060> localVarResponse = CommunityContentGetCommunityLiveStatusesWithHttpInfo(page, partnershipType, sort, modeHash, streamLocale);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns info about community members who are live streaming.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="modeHash">The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode. (optional)</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        public ApiResponse< InlineResponse20060 > CommunityContentGetCommunityLiveStatusesWithHttpInfo (int? page, int? partnershipType, int? sort, uint? modeHash = null, string streamLocale = null)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatuses");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatuses");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatuses");

            var localVarPath = "/CommunityContent/Live/All/{partnershipType}/{sort}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (modeHash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modeHash", modeHash)); // query parameter
            if (streamLocale != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "streamLocale", streamLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetCommunityLiveStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20060>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20060) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20060)));
        }

        /// <summary>
        ///  Returns info about community members who are live streaming.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="modeHash">The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode. (optional)</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>Task of InlineResponse20060</returns>
        public async System.Threading.Tasks.Task<InlineResponse20060> CommunityContentGetCommunityLiveStatusesAsync (int? page, int? partnershipType, int? sort, uint? modeHash = null, string streamLocale = null)
        {
             ApiResponse<InlineResponse20060> localVarResponse = await CommunityContentGetCommunityLiveStatusesAsyncWithHttpInfo(page, partnershipType, sort, modeHash, streamLocale);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns info about community members who are live streaming.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="modeHash">The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode. (optional)</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> CommunityContentGetCommunityLiveStatusesAsyncWithHttpInfo (int? page, int? partnershipType, int? sort, uint? modeHash = null, string streamLocale = null)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatuses");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatuses");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatuses");

            var localVarPath = "/CommunityContent/Live/All/{partnershipType}/{sort}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (modeHash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modeHash", modeHash)); // query parameter
            if (streamLocale != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "streamLocale", streamLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetCommunityLiveStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20060>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20060) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20060)));
        }

        /// <summary>
        ///  Returns info about community members who are live streaming in your clans.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>InlineResponse20060</returns>
        public InlineResponse20060 CommunityContentGetCommunityLiveStatusesForClanmates (int? page, int? partnershipType, int? sort)
        {
             ApiResponse<InlineResponse20060> localVarResponse = CommunityContentGetCommunityLiveStatusesForClanmatesWithHttpInfo(page, partnershipType, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns info about community members who are live streaming in your clans.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        public ApiResponse< InlineResponse20060 > CommunityContentGetCommunityLiveStatusesForClanmatesWithHttpInfo (int? page, int? partnershipType, int? sort)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForClanmates");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForClanmates");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForClanmates");

            var localVarPath = "/CommunityContent/Live/Clan/{partnershipType}/{sort}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetCommunityLiveStatusesForClanmates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20060>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20060) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20060)));
        }

        /// <summary>
        ///  Returns info about community members who are live streaming in your clans.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of InlineResponse20060</returns>
        public async System.Threading.Tasks.Task<InlineResponse20060> CommunityContentGetCommunityLiveStatusesForClanmatesAsync (int? page, int? partnershipType, int? sort)
        {
             ApiResponse<InlineResponse20060> localVarResponse = await CommunityContentGetCommunityLiveStatusesForClanmatesAsyncWithHttpInfo(page, partnershipType, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns info about community members who are live streaming in your clans.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> CommunityContentGetCommunityLiveStatusesForClanmatesAsyncWithHttpInfo (int? page, int? partnershipType, int? sort)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForClanmates");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForClanmates");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForClanmates");

            var localVarPath = "/CommunityContent/Live/Clan/{partnershipType}/{sort}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetCommunityLiveStatusesForClanmates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20060>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20060) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20060)));
        }

        /// <summary>
        ///  Returns info about community members who are live streaming among your friends.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>InlineResponse20060</returns>
        public InlineResponse20060 CommunityContentGetCommunityLiveStatusesForFriends (int? page, int? partnershipType, int? sort)
        {
             ApiResponse<InlineResponse20060> localVarResponse = CommunityContentGetCommunityLiveStatusesForFriendsWithHttpInfo(page, partnershipType, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns info about community members who are live streaming among your friends.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        public ApiResponse< InlineResponse20060 > CommunityContentGetCommunityLiveStatusesForFriendsWithHttpInfo (int? page, int? partnershipType, int? sort)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForFriends");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForFriends");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForFriends");

            var localVarPath = "/CommunityContent/Live/Friends/{partnershipType}/{sort}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetCommunityLiveStatusesForFriends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20060>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20060) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20060)));
        }

        /// <summary>
        ///  Returns info about community members who are live streaming among your friends.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of InlineResponse20060</returns>
        public async System.Threading.Tasks.Task<InlineResponse20060> CommunityContentGetCommunityLiveStatusesForFriendsAsync (int? page, int? partnershipType, int? sort)
        {
             ApiResponse<InlineResponse20060> localVarResponse = await CommunityContentGetCommunityLiveStatusesForFriendsAsyncWithHttpInfo(page, partnershipType, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns info about community members who are live streaming among your friends.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> CommunityContentGetCommunityLiveStatusesForFriendsAsyncWithHttpInfo (int? page, int? partnershipType, int? sort)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForFriends");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForFriends");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetCommunityLiveStatusesForFriends");

            var localVarPath = "/CommunityContent/Live/Friends/{partnershipType}/{sort}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetCommunityLiveStatusesForFriends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20060>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20060) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20060)));
        }

        /// <summary>
        ///  Returns info about Featured live streams.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>InlineResponse20060</returns>
        public InlineResponse20060 CommunityContentGetFeaturedCommunityLiveStatuses (int? page, int? partnershipType, int? sort, string streamLocale = null)
        {
             ApiResponse<InlineResponse20060> localVarResponse = CommunityContentGetFeaturedCommunityLiveStatusesWithHttpInfo(page, partnershipType, sort, streamLocale);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns info about Featured live streams.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        public ApiResponse< InlineResponse20060 > CommunityContentGetFeaturedCommunityLiveStatusesWithHttpInfo (int? page, int? partnershipType, int? sort, string streamLocale = null)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetFeaturedCommunityLiveStatuses");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetFeaturedCommunityLiveStatuses");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetFeaturedCommunityLiveStatuses");

            var localVarPath = "/CommunityContent/Live/Featured/{partnershipType}/{sort}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (streamLocale != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "streamLocale", streamLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetFeaturedCommunityLiveStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20060>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20060) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20060)));
        }

        /// <summary>
        ///  Returns info about Featured live streams.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>Task of InlineResponse20060</returns>
        public async System.Threading.Tasks.Task<InlineResponse20060> CommunityContentGetFeaturedCommunityLiveStatusesAsync (int? page, int? partnershipType, int? sort, string streamLocale = null)
        {
             ApiResponse<InlineResponse20060> localVarResponse = await CommunityContentGetFeaturedCommunityLiveStatusesAsyncWithHttpInfo(page, partnershipType, sort, streamLocale);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns info about Featured live streams.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero based page.</param>
        /// <param name="partnershipType">The type of partnership for which the status should be returned.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="streamLocale">The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> CommunityContentGetFeaturedCommunityLiveStatusesAsyncWithHttpInfo (int? page, int? partnershipType, int? sort, string streamLocale = null)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CommunityContentApi->CommunityContentGetFeaturedCommunityLiveStatuses");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetFeaturedCommunityLiveStatuses");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling CommunityContentApi->CommunityContentGetFeaturedCommunityLiveStatuses");

            var localVarPath = "/CommunityContent/Live/Featured/{partnershipType}/{sort}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (streamLocale != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "streamLocale", streamLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetFeaturedCommunityLiveStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20060>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20060) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20060)));
        }

        /// <summary>
        ///  Gets the Live Streaming status of a particular Account and Membership Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membershipId related to that type.</param>
        /// <param name="membershipType">The type of account for which info will be extracted.</param>
        /// <param name="partnershipType">The type of partnership for which info will be extracted.</param>
        /// <returns>InlineResponse20061</returns>
        public InlineResponse20061 CommunityContentGetStreamingStatusForMember (long? membershipId, int? membershipType, int? partnershipType)
        {
             ApiResponse<InlineResponse20061> localVarResponse = CommunityContentGetStreamingStatusForMemberWithHttpInfo(membershipId, membershipType, partnershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the Live Streaming status of a particular Account and Membership Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membershipId related to that type.</param>
        /// <param name="membershipType">The type of account for which info will be extracted.</param>
        /// <param name="partnershipType">The type of partnership for which info will be extracted.</param>
        /// <returns>ApiResponse of InlineResponse20061</returns>
        public ApiResponse< InlineResponse20061 > CommunityContentGetStreamingStatusForMemberWithHttpInfo (long? membershipId, int? membershipType, int? partnershipType)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling CommunityContentApi->CommunityContentGetStreamingStatusForMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling CommunityContentApi->CommunityContentGetStreamingStatusForMember");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetStreamingStatusForMember");

            var localVarPath = "/CommunityContent/Live/Users/{partnershipType}/{membershipType}/{membershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetStreamingStatusForMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20061>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20061) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20061)));
        }

        /// <summary>
        ///  Gets the Live Streaming status of a particular Account and Membership Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membershipId related to that type.</param>
        /// <param name="membershipType">The type of account for which info will be extracted.</param>
        /// <param name="partnershipType">The type of partnership for which info will be extracted.</param>
        /// <returns>Task of InlineResponse20061</returns>
        public async System.Threading.Tasks.Task<InlineResponse20061> CommunityContentGetStreamingStatusForMemberAsync (long? membershipId, int? membershipType, int? partnershipType)
        {
             ApiResponse<InlineResponse20061> localVarResponse = await CommunityContentGetStreamingStatusForMemberAsyncWithHttpInfo(membershipId, membershipType, partnershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the Live Streaming status of a particular Account and Membership Type.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membershipId related to that type.</param>
        /// <param name="membershipType">The type of account for which info will be extracted.</param>
        /// <param name="partnershipType">The type of partnership for which info will be extracted.</param>
        /// <returns>Task of ApiResponse (InlineResponse20061)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20061>> CommunityContentGetStreamingStatusForMemberAsyncWithHttpInfo (long? membershipId, int? membershipType, int? partnershipType)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling CommunityContentApi->CommunityContentGetStreamingStatusForMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling CommunityContentApi->CommunityContentGetStreamingStatusForMember");
            // verify the required parameter 'partnershipType' is set
            if (partnershipType == null)
                throw new ApiException(400, "Missing required parameter 'partnershipType' when calling CommunityContentApi->CommunityContentGetStreamingStatusForMember");

            var localVarPath = "/CommunityContent/Live/Users/{partnershipType}/{membershipType}/{membershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (partnershipType != null) localVarPathParams.Add("partnershipType", Configuration.ApiClient.ParameterToString(partnershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommunityContentGetStreamingStatusForMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20061>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20061) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20061)));
        }

    }
}
