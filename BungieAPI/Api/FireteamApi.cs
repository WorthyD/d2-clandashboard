/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieAPI.Client;
using BungieAPI.Model;

namespace BungieAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFireteamApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 FireteamGetActivePrivateClanFireteamCount (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> FireteamGetActivePrivateClanFireteamCountWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        InlineResponse20065 FireteamGetAvailableClanFireteams (int? activityType, int? dateRange, long? groupId, int? page, int? platform, int? publicOnly, int? slotFilter, string langFilter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        ApiResponse<InlineResponse20065> FireteamGetAvailableClanFireteamsWithHttpInfo (int? activityType, int? dateRange, long? groupId, int? page, int? platform, int? publicOnly, int? slotFilter, string langFilter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific clan fireteam.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>InlineResponse20067</returns>
        InlineResponse20067 FireteamGetClanFireteam (long? fireteamId, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific clan fireteam.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>ApiResponse of InlineResponse20067</returns>
        ApiResponse<InlineResponse20067> FireteamGetClanFireteamWithHttpInfo (long? fireteamId, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20066</returns>
        InlineResponse20066 FireteamGetMyClanFireteams (long? groupId, bool? includeClosed, int? page, int? platform, bool? groupFilter = null, string langFilter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20066</returns>
        ApiResponse<InlineResponse20066> FireteamGetMyClanFireteamsWithHttpInfo (long? groupId, bool? includeClosed, int? page, int? platform, bool? groupFilter = null, string langFilter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        InlineResponse20065 FireteamSearchPublicAvailableClanFireteams (int? activityType, int? dateRange, int? page, int? platform, int? slotFilter, string langFilter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        ApiResponse<InlineResponse20065> FireteamSearchPublicAvailableClanFireteamsWithHttpInfo (int? activityType, int? dateRange, int? page, int? platform, int? slotFilter, string langFilter = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> FireteamGetActivePrivateClanFireteamCountAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> FireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20065</returns>
        System.Threading.Tasks.Task<InlineResponse20065> FireteamGetAvailableClanFireteamsAsync (int? activityType, int? dateRange, long? groupId, int? page, int? platform, int? publicOnly, int? slotFilter, string langFilter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> FireteamGetAvailableClanFireteamsAsyncWithHttpInfo (int? activityType, int? dateRange, long? groupId, int? page, int? platform, int? publicOnly, int? slotFilter, string langFilter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific clan fireteam.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of InlineResponse20067</returns>
        System.Threading.Tasks.Task<InlineResponse20067> FireteamGetClanFireteamAsync (long? fireteamId, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific clan fireteam.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20067)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20067>> FireteamGetClanFireteamAsyncWithHttpInfo (long? fireteamId, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20066</returns>
        System.Threading.Tasks.Task<InlineResponse20066> FireteamGetMyClanFireteamsAsync (long? groupId, bool? includeClosed, int? page, int? platform, bool? groupFilter = null, string langFilter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20066)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20066>> FireteamGetMyClanFireteamsAsyncWithHttpInfo (long? groupId, bool? includeClosed, int? page, int? platform, bool? groupFilter = null, string langFilter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20065</returns>
        System.Threading.Tasks.Task<InlineResponse20065> FireteamSearchPublicAvailableClanFireteamsAsync (int? activityType, int? dateRange, int? page, int? platform, int? slotFilter, string langFilter = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> FireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo (int? activityType, int? dateRange, int? page, int? platform, int? slotFilter, string langFilter = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FireteamApi : IFireteamApi
    {
        private BungieAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FireteamApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = BungieAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FireteamApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 FireteamGetActivePrivateClanFireteamCount (long? groupId)
        {
             ApiResponse<InlineResponse20019> localVarResponse = FireteamGetActivePrivateClanFireteamCountWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > FireteamGetActivePrivateClanFireteamCountWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling FireteamApi->FireteamGetActivePrivateClanFireteamCount");

            var localVarPath = "/Fireteam/Clan/{groupId}/ActiveCount/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamGetActivePrivateClanFireteamCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> FireteamGetActivePrivateClanFireteamCountAsync (long? groupId)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await FireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> FireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling FireteamApi->FireteamGetActivePrivateClanFireteamCount");

            var localVarPath = "/Fireteam/Clan/{groupId}/ActiveCount/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamGetActivePrivateClanFireteamCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        public InlineResponse20065 FireteamGetAvailableClanFireteams (int? activityType, int? dateRange, long? groupId, int? page, int? platform, int? publicOnly, int? slotFilter, string langFilter = null)
        {
             ApiResponse<InlineResponse20065> localVarResponse = FireteamGetAvailableClanFireteamsWithHttpInfo(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, langFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        public ApiResponse< InlineResponse20065 > FireteamGetAvailableClanFireteamsWithHttpInfo (int? activityType, int? dateRange, long? groupId, int? page, int? platform, int? publicOnly, int? slotFilter, string langFilter = null)
        {
            // verify the required parameter 'activityType' is set
            if (activityType == null)
                throw new ApiException(400, "Missing required parameter 'activityType' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'dateRange' is set
            if (dateRange == null)
                throw new ApiException(400, "Missing required parameter 'dateRange' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'platform' is set
            if (platform == null)
                throw new ApiException(400, "Missing required parameter 'platform' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'publicOnly' is set
            if (publicOnly == null)
                throw new ApiException(400, "Missing required parameter 'publicOnly' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'slotFilter' is set
            if (slotFilter == null)
                throw new ApiException(400, "Missing required parameter 'slotFilter' when calling FireteamApi->FireteamGetAvailableClanFireteams");

            var localVarPath = "/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityType != null) localVarPathParams.Add("activityType", Configuration.ApiClient.ParameterToString(activityType)); // path parameter
            if (dateRange != null) localVarPathParams.Add("dateRange", Configuration.ApiClient.ParameterToString(dateRange)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (platform != null) localVarPathParams.Add("platform", Configuration.ApiClient.ParameterToString(platform)); // path parameter
            if (publicOnly != null) localVarPathParams.Add("publicOnly", Configuration.ApiClient.ParameterToString(publicOnly)); // path parameter
            if (slotFilter != null) localVarPathParams.Add("slotFilter", Configuration.ApiClient.ParameterToString(slotFilter)); // path parameter
            if (langFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "langFilter", langFilter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamGetAvailableClanFireteams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20065) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065)));
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20065</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065> FireteamGetAvailableClanFireteamsAsync (int? activityType, int? dateRange, long? groupId, int? page, int? platform, int? publicOnly, int? slotFilter, string langFilter = null)
        {
             ApiResponse<InlineResponse20065> localVarResponse = await FireteamGetAvailableClanFireteamsAsyncWithHttpInfo(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, langFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> FireteamGetAvailableClanFireteamsAsyncWithHttpInfo (int? activityType, int? dateRange, long? groupId, int? page, int? platform, int? publicOnly, int? slotFilter, string langFilter = null)
        {
            // verify the required parameter 'activityType' is set
            if (activityType == null)
                throw new ApiException(400, "Missing required parameter 'activityType' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'dateRange' is set
            if (dateRange == null)
                throw new ApiException(400, "Missing required parameter 'dateRange' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'platform' is set
            if (platform == null)
                throw new ApiException(400, "Missing required parameter 'platform' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'publicOnly' is set
            if (publicOnly == null)
                throw new ApiException(400, "Missing required parameter 'publicOnly' when calling FireteamApi->FireteamGetAvailableClanFireteams");
            // verify the required parameter 'slotFilter' is set
            if (slotFilter == null)
                throw new ApiException(400, "Missing required parameter 'slotFilter' when calling FireteamApi->FireteamGetAvailableClanFireteams");

            var localVarPath = "/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityType != null) localVarPathParams.Add("activityType", Configuration.ApiClient.ParameterToString(activityType)); // path parameter
            if (dateRange != null) localVarPathParams.Add("dateRange", Configuration.ApiClient.ParameterToString(dateRange)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (platform != null) localVarPathParams.Add("platform", Configuration.ApiClient.ParameterToString(platform)); // path parameter
            if (publicOnly != null) localVarPathParams.Add("publicOnly", Configuration.ApiClient.ParameterToString(publicOnly)); // path parameter
            if (slotFilter != null) localVarPathParams.Add("slotFilter", Configuration.ApiClient.ParameterToString(slotFilter)); // path parameter
            if (langFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "langFilter", langFilter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamGetAvailableClanFireteams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20065) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065)));
        }

        /// <summary>
        ///  Gets a specific clan fireteam.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>InlineResponse20067</returns>
        public InlineResponse20067 FireteamGetClanFireteam (long? fireteamId, long? groupId)
        {
             ApiResponse<InlineResponse20067> localVarResponse = FireteamGetClanFireteamWithHttpInfo(fireteamId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a specific clan fireteam.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>ApiResponse of InlineResponse20067</returns>
        public ApiResponse< InlineResponse20067 > FireteamGetClanFireteamWithHttpInfo (long? fireteamId, long? groupId)
        {
            // verify the required parameter 'fireteamId' is set
            if (fireteamId == null)
                throw new ApiException(400, "Missing required parameter 'fireteamId' when calling FireteamApi->FireteamGetClanFireteam");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling FireteamApi->FireteamGetClanFireteam");

            var localVarPath = "/Fireteam/Clan/{groupId}/Summary/{fireteamId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireteamId != null) localVarPathParams.Add("fireteamId", Configuration.ApiClient.ParameterToString(fireteamId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamGetClanFireteam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20067>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20067) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20067)));
        }

        /// <summary>
        ///  Gets a specific clan fireteam.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of InlineResponse20067</returns>
        public async System.Threading.Tasks.Task<InlineResponse20067> FireteamGetClanFireteamAsync (long? fireteamId, long? groupId)
        {
             ApiResponse<InlineResponse20067> localVarResponse = await FireteamGetClanFireteamAsyncWithHttpInfo(fireteamId, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a specific clan fireteam.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20067)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20067>> FireteamGetClanFireteamAsyncWithHttpInfo (long? fireteamId, long? groupId)
        {
            // verify the required parameter 'fireteamId' is set
            if (fireteamId == null)
                throw new ApiException(400, "Missing required parameter 'fireteamId' when calling FireteamApi->FireteamGetClanFireteam");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling FireteamApi->FireteamGetClanFireteam");

            var localVarPath = "/Fireteam/Clan/{groupId}/Summary/{fireteamId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireteamId != null) localVarPathParams.Add("fireteamId", Configuration.ApiClient.ParameterToString(fireteamId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamGetClanFireteam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20067>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20067) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20067)));
        }

        /// <summary>
        ///  Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20066</returns>
        public InlineResponse20066 FireteamGetMyClanFireteams (long? groupId, bool? includeClosed, int? page, int? platform, bool? groupFilter = null, string langFilter = null)
        {
             ApiResponse<InlineResponse20066> localVarResponse = FireteamGetMyClanFireteamsWithHttpInfo(groupId, includeClosed, page, platform, groupFilter, langFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20066</returns>
        public ApiResponse< InlineResponse20066 > FireteamGetMyClanFireteamsWithHttpInfo (long? groupId, bool? includeClosed, int? page, int? platform, bool? groupFilter = null, string langFilter = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling FireteamApi->FireteamGetMyClanFireteams");
            // verify the required parameter 'includeClosed' is set
            if (includeClosed == null)
                throw new ApiException(400, "Missing required parameter 'includeClosed' when calling FireteamApi->FireteamGetMyClanFireteams");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling FireteamApi->FireteamGetMyClanFireteams");
            // verify the required parameter 'platform' is set
            if (platform == null)
                throw new ApiException(400, "Missing required parameter 'platform' when calling FireteamApi->FireteamGetMyClanFireteams");

            var localVarPath = "/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (includeClosed != null) localVarPathParams.Add("includeClosed", Configuration.ApiClient.ParameterToString(includeClosed)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (platform != null) localVarPathParams.Add("platform", Configuration.ApiClient.ParameterToString(platform)); // path parameter
            if (groupFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "groupFilter", groupFilter)); // query parameter
            if (langFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "langFilter", langFilter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamGetMyClanFireteams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20066>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20066) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20066)));
        }

        /// <summary>
        ///  Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20066</returns>
        public async System.Threading.Tasks.Task<InlineResponse20066> FireteamGetMyClanFireteamsAsync (long? groupId, bool? includeClosed, int? page, int? platform, bool? groupFilter = null, string langFilter = null)
        {
             ApiResponse<InlineResponse20066> localVarResponse = await FireteamGetMyClanFireteamsAsyncWithHttpInfo(groupId, includeClosed, page, platform, groupFilter, langFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20066)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20066>> FireteamGetMyClanFireteamsAsyncWithHttpInfo (long? groupId, bool? includeClosed, int? page, int? platform, bool? groupFilter = null, string langFilter = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling FireteamApi->FireteamGetMyClanFireteams");
            // verify the required parameter 'includeClosed' is set
            if (includeClosed == null)
                throw new ApiException(400, "Missing required parameter 'includeClosed' when calling FireteamApi->FireteamGetMyClanFireteams");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling FireteamApi->FireteamGetMyClanFireteams");
            // verify the required parameter 'platform' is set
            if (platform == null)
                throw new ApiException(400, "Missing required parameter 'platform' when calling FireteamApi->FireteamGetMyClanFireteams");

            var localVarPath = "/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (includeClosed != null) localVarPathParams.Add("includeClosed", Configuration.ApiClient.ParameterToString(includeClosed)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (platform != null) localVarPathParams.Add("platform", Configuration.ApiClient.ParameterToString(platform)); // path parameter
            if (groupFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "groupFilter", groupFilter)); // query parameter
            if (langFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "langFilter", langFilter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamGetMyClanFireteams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20066>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20066) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20066)));
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        public InlineResponse20065 FireteamSearchPublicAvailableClanFireteams (int? activityType, int? dateRange, int? page, int? platform, int? slotFilter, string langFilter = null)
        {
             ApiResponse<InlineResponse20065> localVarResponse = FireteamSearchPublicAvailableClanFireteamsWithHttpInfo(activityType, dateRange, page, platform, slotFilter, langFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        public ApiResponse< InlineResponse20065 > FireteamSearchPublicAvailableClanFireteamsWithHttpInfo (int? activityType, int? dateRange, int? page, int? platform, int? slotFilter, string langFilter = null)
        {
            // verify the required parameter 'activityType' is set
            if (activityType == null)
                throw new ApiException(400, "Missing required parameter 'activityType' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");
            // verify the required parameter 'dateRange' is set
            if (dateRange == null)
                throw new ApiException(400, "Missing required parameter 'dateRange' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");
            // verify the required parameter 'platform' is set
            if (platform == null)
                throw new ApiException(400, "Missing required parameter 'platform' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");
            // verify the required parameter 'slotFilter' is set
            if (slotFilter == null)
                throw new ApiException(400, "Missing required parameter 'slotFilter' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");

            var localVarPath = "/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityType != null) localVarPathParams.Add("activityType", Configuration.ApiClient.ParameterToString(activityType)); // path parameter
            if (dateRange != null) localVarPathParams.Add("dateRange", Configuration.ApiClient.ParameterToString(dateRange)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (platform != null) localVarPathParams.Add("platform", Configuration.ApiClient.ParameterToString(platform)); // path parameter
            if (slotFilter != null) localVarPathParams.Add("slotFilter", Configuration.ApiClient.ParameterToString(slotFilter)); // path parameter
            if (langFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "langFilter", langFilter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamSearchPublicAvailableClanFireteams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20065) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065)));
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20065</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065> FireteamSearchPublicAvailableClanFireteamsAsync (int? activityType, int? dateRange, int? page, int? platform, int? slotFilter, string langFilter = null)
        {
             ApiResponse<InlineResponse20065> localVarResponse = await FireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo(activityType, dateRange, page, platform, slotFilter, langFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> FireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo (int? activityType, int? dateRange, int? page, int? platform, int? slotFilter, string langFilter = null)
        {
            // verify the required parameter 'activityType' is set
            if (activityType == null)
                throw new ApiException(400, "Missing required parameter 'activityType' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");
            // verify the required parameter 'dateRange' is set
            if (dateRange == null)
                throw new ApiException(400, "Missing required parameter 'dateRange' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");
            // verify the required parameter 'platform' is set
            if (platform == null)
                throw new ApiException(400, "Missing required parameter 'platform' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");
            // verify the required parameter 'slotFilter' is set
            if (slotFilter == null)
                throw new ApiException(400, "Missing required parameter 'slotFilter' when calling FireteamApi->FireteamSearchPublicAvailableClanFireteams");

            var localVarPath = "/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityType != null) localVarPathParams.Add("activityType", Configuration.ApiClient.ParameterToString(activityType)); // path parameter
            if (dateRange != null) localVarPathParams.Add("dateRange", Configuration.ApiClient.ParameterToString(dateRange)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (platform != null) localVarPathParams.Add("platform", Configuration.ApiClient.ParameterToString(platform)); // path parameter
            if (slotFilter != null) localVarPathParams.Add("slotFilter", Configuration.ApiClient.ParameterToString(slotFilter)); // path parameter
            if (langFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "langFilter", langFilter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FireteamSearchPublicAvailableClanFireteams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20065) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065)));
        }

    }
}
