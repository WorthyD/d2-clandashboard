/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// DestinyDefinitionsRecordsDestinyRecordCompletionBlock
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsRecordsDestinyRecordCompletionBlock :  IEquatable<DestinyDefinitionsRecordsDestinyRecordCompletionBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsRecordsDestinyRecordCompletionBlock" /> class.
        /// </summary>
        /// <param name="partialCompletionObjectiveCountThreshold">partialCompletionObjectiveCountThreshold.</param>
        /// <param name="scoreValue">scoreValue.</param>
        /// <param name="shouldFireToast">shouldFireToast.</param>
        /// <param name="toastStyle">toastStyle.</param>
        public DestinyDefinitionsRecordsDestinyRecordCompletionBlock(int? partialCompletionObjectiveCountThreshold = default(int?), int? scoreValue = default(int?), bool? shouldFireToast = default(bool?), DestinyDestinyRecordToastStyle toastStyle = default(DestinyDestinyRecordToastStyle))
        {
            this.PartialCompletionObjectiveCountThreshold = partialCompletionObjectiveCountThreshold;
            this.ScoreValue = scoreValue;
            this.ShouldFireToast = shouldFireToast;
            this.ToastStyle = toastStyle;
        }
        
        /// <summary>
        /// Gets or Sets PartialCompletionObjectiveCountThreshold
        /// </summary>
        [DataMember(Name="partialCompletionObjectiveCountThreshold", EmitDefaultValue=false)]
        public int? PartialCompletionObjectiveCountThreshold { get; set; }

        /// <summary>
        /// Gets or Sets ScoreValue
        /// </summary>
        [DataMember(Name="ScoreValue", EmitDefaultValue=false)]
        public int? ScoreValue { get; set; }

        /// <summary>
        /// Gets or Sets ShouldFireToast
        /// </summary>
        [DataMember(Name="shouldFireToast", EmitDefaultValue=false)]
        public bool? ShouldFireToast { get; set; }

        /// <summary>
        /// Gets or Sets ToastStyle
        /// </summary>
        [DataMember(Name="toastStyle", EmitDefaultValue=false)]
        public DestinyDestinyRecordToastStyle ToastStyle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsRecordsDestinyRecordCompletionBlock {\n");
            sb.Append("  PartialCompletionObjectiveCountThreshold: ").Append(PartialCompletionObjectiveCountThreshold).Append("\n");
            sb.Append("  ScoreValue: ").Append(ScoreValue).Append("\n");
            sb.Append("  ShouldFireToast: ").Append(ShouldFireToast).Append("\n");
            sb.Append("  ToastStyle: ").Append(ToastStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsRecordsDestinyRecordCompletionBlock);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsRecordsDestinyRecordCompletionBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsRecordsDestinyRecordCompletionBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsRecordsDestinyRecordCompletionBlock input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartialCompletionObjectiveCountThreshold == input.PartialCompletionObjectiveCountThreshold ||
                    (this.PartialCompletionObjectiveCountThreshold != null &&
                    this.PartialCompletionObjectiveCountThreshold.Equals(input.PartialCompletionObjectiveCountThreshold))
                ) && 
                (
                    this.ScoreValue == input.ScoreValue ||
                    (this.ScoreValue != null &&
                    this.ScoreValue.Equals(input.ScoreValue))
                ) && 
                (
                    this.ShouldFireToast == input.ShouldFireToast ||
                    (this.ShouldFireToast != null &&
                    this.ShouldFireToast.Equals(input.ShouldFireToast))
                ) && 
                (
                    this.ToastStyle == input.ToastStyle ||
                    (this.ToastStyle != null &&
                    this.ToastStyle.Equals(input.ToastStyle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartialCompletionObjectiveCountThreshold != null)
                    hashCode = hashCode * 59 + this.PartialCompletionObjectiveCountThreshold.GetHashCode();
                if (this.ScoreValue != null)
                    hashCode = hashCode * 59 + this.ScoreValue.GetHashCode();
                if (this.ShouldFireToast != null)
                    hashCode = hashCode * 59 + this.ShouldFireToast.GetHashCode();
                if (this.ToastStyle != null)
                    hashCode = hashCode * 59 + this.ToastStyle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
