/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// The information for how the vendor purchase should override a given socket with custom plug data.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyVendorItemSocketOverride :  IEquatable<DestinyDefinitionsDestinyVendorItemSocketOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorItemSocketOverride" /> class.
        /// </summary>
        /// <param name="SingleItemHash">If this is populated, the socket will be overridden with a specific plug.  If this isn&#39;t populated, it&#39;s being overridden by something more complicated that is only known by the Game Server and God, which means we can&#39;t tell you in advance what it&#39;ll be..</param>
        /// <param name="RandomizedOptionsCount">If this is greater than -1, the number of randomized plugs on this socket will be set to this quantity instead of whatever it&#39;s set to by default..</param>
        /// <param name="SocketTypeHash">This appears to be used to select which socket ultimately gets the override defined here..</param>
        public DestinyDefinitionsDestinyVendorItemSocketOverride(uint? SingleItemHash = default(uint?), int? RandomizedOptionsCount = default(int?), uint? SocketTypeHash = default(uint?))
        {
            this.SingleItemHash = SingleItemHash;
            this.RandomizedOptionsCount = RandomizedOptionsCount;
            this.SocketTypeHash = SocketTypeHash;
        }
        
        /// <summary>
        /// If this is populated, the socket will be overridden with a specific plug.  If this isn&#39;t populated, it&#39;s being overridden by something more complicated that is only known by the Game Server and God, which means we can&#39;t tell you in advance what it&#39;ll be.
        /// </summary>
        /// <value>If this is populated, the socket will be overridden with a specific plug.  If this isn&#39;t populated, it&#39;s being overridden by something more complicated that is only known by the Game Server and God, which means we can&#39;t tell you in advance what it&#39;ll be.</value>
        [DataMember(Name="singleItemHash", EmitDefaultValue=false)]
        public uint? SingleItemHash { get; set; }

        /// <summary>
        /// If this is greater than -1, the number of randomized plugs on this socket will be set to this quantity instead of whatever it&#39;s set to by default.
        /// </summary>
        /// <value>If this is greater than -1, the number of randomized plugs on this socket will be set to this quantity instead of whatever it&#39;s set to by default.</value>
        [DataMember(Name="randomizedOptionsCount", EmitDefaultValue=false)]
        public int? RandomizedOptionsCount { get; set; }

        /// <summary>
        /// This appears to be used to select which socket ultimately gets the override defined here.
        /// </summary>
        /// <value>This appears to be used to select which socket ultimately gets the override defined here.</value>
        [DataMember(Name="socketTypeHash", EmitDefaultValue=false)]
        public uint? SocketTypeHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorItemSocketOverride {\n");
            sb.Append("  SingleItemHash: ").Append(SingleItemHash).Append("\n");
            sb.Append("  RandomizedOptionsCount: ").Append(RandomizedOptionsCount).Append("\n");
            sb.Append("  SocketTypeHash: ").Append(SocketTypeHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorItemSocketOverride);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorItemSocketOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorItemSocketOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorItemSocketOverride input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SingleItemHash == input.SingleItemHash ||
                    (this.SingleItemHash != null &&
                    this.SingleItemHash.Equals(input.SingleItemHash))
                ) && 
                (
                    this.RandomizedOptionsCount == input.RandomizedOptionsCount ||
                    (this.RandomizedOptionsCount != null &&
                    this.RandomizedOptionsCount.Equals(input.RandomizedOptionsCount))
                ) && 
                (
                    this.SocketTypeHash == input.SocketTypeHash ||
                    (this.SocketTypeHash != null &&
                    this.SocketTypeHash.Equals(input.SocketTypeHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SingleItemHash != null)
                    hashCode = hashCode * 59 + this.SingleItemHash.GetHashCode();
                if (this.RandomizedOptionsCount != null)
                    hashCode = hashCode * 59 + this.RandomizedOptionsCount.GetHashCode();
                if (this.SocketTypeHash != null)
                    hashCode = hashCode * 59 + this.SocketTypeHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
