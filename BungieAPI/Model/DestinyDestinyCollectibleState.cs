/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// A Flags Enumeration where each bit represents a different state that the Collectible can be in. A collectible can be in any number of these states, and you can choose to use or ignore any or all of them when making your own UI that shows Collectible info. Our displays are going to honor them, but we&#39;re also the kind of people who only pretend to inhale before quickly passing it to the left. So, you know, do what you got to do.
    /// </summary>
    /// <value>A Flags Enumeration where each bit represents a different state that the Collectible can be in. A collectible can be in any number of these states, and you can choose to use or ignore any or all of them when making your own UI that shows Collectible info. Our displays are going to honor them, but we&#39;re also the kind of people who only pretend to inhale before quickly passing it to the left. So, you know, do what you got to do.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DestinyDestinyCollectibleState
    {
        
		/// <summary>
		/// A Flags Enumeration where each bit represents a different state that the Collectible can be in. A collectible can be in any number of these states, and you can choose to use or ignore any or all of them when making your own UI that shows Collectible info. Our displays are going to honor them, but we&#39;re also the kind of people who only pretend to inhale before quickly passing it to the left. So, you know, do what you got to do.
		/// </summary>
		[EnumMember(Value = "0")]
        None,
        
		/// <summary>
		/// If this flag is set, you have not yet obtained this collectible.
		/// </summary>
		[EnumMember(Value = "1")]
        NotAcquired,
        
		/// <summary>
		/// If this flag is set, the item is &quot;obscured&quot; to you: you can/should use the alternate item hash found in DestinyCollectibleDefinition.stateInfo.obscuredOverrideItemHash when displaying this collectible instead of the default display info.
		/// </summary>
		[EnumMember(Value = "2")]
        Obscured,
        
		/// <summary>
		/// If this flag is set, the collectible should not be shown to the user.
//But, I mean do what you want: I&#39;m not your mom. It&#39;s much more likely that I&#39;m your Dad - wait, I promised your mom that I wouldn&#39;t tell you. Don&#39;t tell her that I told you.
		/// </summary>
		[EnumMember(Value = "4")]
        Invisible,
        
		/// <summary>
		/// If this flag is set, the collectible requires payment for creating an instance of the item, and you are lacking in currency. Bring the benjamins next time. Or spinmetal. Whatever.
		/// </summary>
		[EnumMember(Value = "8")]
        CannotAffordMaterialRequirements,
        
		/// <summary>
		/// If this flag is set, you can&#39;t pull this item out of your collection because there&#39;s no room left in your inventory.
		/// </summary>
		[EnumMember(Value = "16")]
        InventorySpaceUnavailable,
        
		/// <summary>
		/// If this flag is set, you already have one of these items and can&#39;t have a second one.
		/// </summary>
		[EnumMember(Value = "32")]
        UniquenessViolation,
        
		/// <summary>
		/// If this flag is set, the ability to pull this item out of your collection has been disabled.
		/// </summary>
		[EnumMember(Value = "64")]
        PurchaseDisabled
    }

}
