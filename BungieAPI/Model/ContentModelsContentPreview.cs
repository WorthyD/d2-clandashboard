/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// ContentModelsContentPreview
    /// </summary>
    [DataContract]
    public partial class ContentModelsContentPreview :  IEquatable<ContentModelsContentPreview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModelsContentPreview" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="path">path.</param>
        /// <param name="itemInSet">itemInSet.</param>
        /// <param name="setTag">setTag.</param>
        /// <param name="setNesting">setNesting.</param>
        /// <param name="useSetId">useSetId.</param>
        public ContentModelsContentPreview(string name = default(string), string path = default(string), bool? itemInSet = default(bool?), string setTag = default(string), int? setNesting = default(int?), int? useSetId = default(int?))
        {
            this.Name = name;
            this.Path = path;
            this.ItemInSet = itemInSet;
            this.SetTag = setTag;
            this.SetNesting = setNesting;
            this.UseSetId = useSetId;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets ItemInSet
        /// </summary>
        [DataMember(Name="itemInSet", EmitDefaultValue=false)]
        public bool? ItemInSet { get; set; }

        /// <summary>
        /// Gets or Sets SetTag
        /// </summary>
        [DataMember(Name="setTag", EmitDefaultValue=false)]
        public string SetTag { get; set; }

        /// <summary>
        /// Gets or Sets SetNesting
        /// </summary>
        [DataMember(Name="setNesting", EmitDefaultValue=false)]
        public int? SetNesting { get; set; }

        /// <summary>
        /// Gets or Sets UseSetId
        /// </summary>
        [DataMember(Name="useSetId", EmitDefaultValue=false)]
        public int? UseSetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentModelsContentPreview {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ItemInSet: ").Append(ItemInSet).Append("\n");
            sb.Append("  SetTag: ").Append(SetTag).Append("\n");
            sb.Append("  SetNesting: ").Append(SetNesting).Append("\n");
            sb.Append("  UseSetId: ").Append(UseSetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentModelsContentPreview);
        }

        /// <summary>
        /// Returns true if ContentModelsContentPreview instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentModelsContentPreview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentModelsContentPreview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ItemInSet == input.ItemInSet ||
                    (this.ItemInSet != null &&
                    this.ItemInSet.Equals(input.ItemInSet))
                ) && 
                (
                    this.SetTag == input.SetTag ||
                    (this.SetTag != null &&
                    this.SetTag.Equals(input.SetTag))
                ) && 
                (
                    this.SetNesting == input.SetNesting ||
                    (this.SetNesting != null &&
                    this.SetNesting.Equals(input.SetNesting))
                ) && 
                (
                    this.UseSetId == input.UseSetId ||
                    (this.UseSetId != null &&
                    this.UseSetId.Equals(input.UseSetId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ItemInSet != null)
                    hashCode = hashCode * 59 + this.ItemInSet.GetHashCode();
                if (this.SetTag != null)
                    hashCode = hashCode * 59 + this.SetTag.GetHashCode();
                if (this.SetNesting != null)
                    hashCode = hashCode * 59 + this.SetNesting.GetHashCode();
                if (this.UseSetId != null)
                    hashCode = hashCode * 59 + this.UseSetId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
