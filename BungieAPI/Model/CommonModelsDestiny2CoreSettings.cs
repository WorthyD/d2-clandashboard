/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// CommonModelsDestiny2CoreSettings
    /// </summary>
    [DataContract]
    public partial class CommonModelsDestiny2CoreSettings :  IEquatable<CommonModelsDestiny2CoreSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonModelsDestiny2CoreSettings" /> class.
        /// </summary>
        /// <param name="CollectionRootNode">CollectionRootNode.</param>
        /// <param name="BadgesRootNode">BadgesRootNode.</param>
        /// <param name="RecordsRootNode">RecordsRootNode.</param>
        /// <param name="MedalsRootNode">MedalsRootNode.</param>
        /// <param name="UndiscoveredCollectibleImage">UndiscoveredCollectibleImage.</param>
        /// <param name="AmmoTypeHeavyIcon">AmmoTypeHeavyIcon.</param>
        /// <param name="AmmoTypeSpecialIcon">AmmoTypeSpecialIcon.</param>
        /// <param name="AmmoTypePrimaryIcon">AmmoTypePrimaryIcon.</param>
        public CommonModelsDestiny2CoreSettings(uint? CollectionRootNode = default(uint?), uint? BadgesRootNode = default(uint?), uint? RecordsRootNode = default(uint?), uint? MedalsRootNode = default(uint?), string UndiscoveredCollectibleImage = default(string), string AmmoTypeHeavyIcon = default(string), string AmmoTypeSpecialIcon = default(string), string AmmoTypePrimaryIcon = default(string))
        {
            this.CollectionRootNode = CollectionRootNode;
            this.BadgesRootNode = BadgesRootNode;
            this.RecordsRootNode = RecordsRootNode;
            this.MedalsRootNode = MedalsRootNode;
            this.UndiscoveredCollectibleImage = UndiscoveredCollectibleImage;
            this.AmmoTypeHeavyIcon = AmmoTypeHeavyIcon;
            this.AmmoTypeSpecialIcon = AmmoTypeSpecialIcon;
            this.AmmoTypePrimaryIcon = AmmoTypePrimaryIcon;
        }
        
        /// <summary>
        /// Gets or Sets CollectionRootNode
        /// </summary>
        [DataMember(Name="collectionRootNode", EmitDefaultValue=false)]
        public uint? CollectionRootNode { get; set; }

        /// <summary>
        /// Gets or Sets BadgesRootNode
        /// </summary>
        [DataMember(Name="badgesRootNode", EmitDefaultValue=false)]
        public uint? BadgesRootNode { get; set; }

        /// <summary>
        /// Gets or Sets RecordsRootNode
        /// </summary>
        [DataMember(Name="recordsRootNode", EmitDefaultValue=false)]
        public uint? RecordsRootNode { get; set; }

        /// <summary>
        /// Gets or Sets MedalsRootNode
        /// </summary>
        [DataMember(Name="medalsRootNode", EmitDefaultValue=false)]
        public uint? MedalsRootNode { get; set; }

        /// <summary>
        /// Gets or Sets UndiscoveredCollectibleImage
        /// </summary>
        [DataMember(Name="undiscoveredCollectibleImage", EmitDefaultValue=false)]
        public string UndiscoveredCollectibleImage { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypeHeavyIcon
        /// </summary>
        [DataMember(Name="ammoTypeHeavyIcon", EmitDefaultValue=false)]
        public string AmmoTypeHeavyIcon { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypeSpecialIcon
        /// </summary>
        [DataMember(Name="ammoTypeSpecialIcon", EmitDefaultValue=false)]
        public string AmmoTypeSpecialIcon { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypePrimaryIcon
        /// </summary>
        [DataMember(Name="ammoTypePrimaryIcon", EmitDefaultValue=false)]
        public string AmmoTypePrimaryIcon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonModelsDestiny2CoreSettings {\n");
            sb.Append("  CollectionRootNode: ").Append(CollectionRootNode).Append("\n");
            sb.Append("  BadgesRootNode: ").Append(BadgesRootNode).Append("\n");
            sb.Append("  RecordsRootNode: ").Append(RecordsRootNode).Append("\n");
            sb.Append("  MedalsRootNode: ").Append(MedalsRootNode).Append("\n");
            sb.Append("  UndiscoveredCollectibleImage: ").Append(UndiscoveredCollectibleImage).Append("\n");
            sb.Append("  AmmoTypeHeavyIcon: ").Append(AmmoTypeHeavyIcon).Append("\n");
            sb.Append("  AmmoTypeSpecialIcon: ").Append(AmmoTypeSpecialIcon).Append("\n");
            sb.Append("  AmmoTypePrimaryIcon: ").Append(AmmoTypePrimaryIcon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonModelsDestiny2CoreSettings);
        }

        /// <summary>
        /// Returns true if CommonModelsDestiny2CoreSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonModelsDestiny2CoreSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonModelsDestiny2CoreSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CollectionRootNode == input.CollectionRootNode ||
                    (this.CollectionRootNode != null &&
                    this.CollectionRootNode.Equals(input.CollectionRootNode))
                ) && 
                (
                    this.BadgesRootNode == input.BadgesRootNode ||
                    (this.BadgesRootNode != null &&
                    this.BadgesRootNode.Equals(input.BadgesRootNode))
                ) && 
                (
                    this.RecordsRootNode == input.RecordsRootNode ||
                    (this.RecordsRootNode != null &&
                    this.RecordsRootNode.Equals(input.RecordsRootNode))
                ) && 
                (
                    this.MedalsRootNode == input.MedalsRootNode ||
                    (this.MedalsRootNode != null &&
                    this.MedalsRootNode.Equals(input.MedalsRootNode))
                ) && 
                (
                    this.UndiscoveredCollectibleImage == input.UndiscoveredCollectibleImage ||
                    (this.UndiscoveredCollectibleImage != null &&
                    this.UndiscoveredCollectibleImage.Equals(input.UndiscoveredCollectibleImage))
                ) && 
                (
                    this.AmmoTypeHeavyIcon == input.AmmoTypeHeavyIcon ||
                    (this.AmmoTypeHeavyIcon != null &&
                    this.AmmoTypeHeavyIcon.Equals(input.AmmoTypeHeavyIcon))
                ) && 
                (
                    this.AmmoTypeSpecialIcon == input.AmmoTypeSpecialIcon ||
                    (this.AmmoTypeSpecialIcon != null &&
                    this.AmmoTypeSpecialIcon.Equals(input.AmmoTypeSpecialIcon))
                ) && 
                (
                    this.AmmoTypePrimaryIcon == input.AmmoTypePrimaryIcon ||
                    (this.AmmoTypePrimaryIcon != null &&
                    this.AmmoTypePrimaryIcon.Equals(input.AmmoTypePrimaryIcon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CollectionRootNode != null)
                    hashCode = hashCode * 59 + this.CollectionRootNode.GetHashCode();
                if (this.BadgesRootNode != null)
                    hashCode = hashCode * 59 + this.BadgesRootNode.GetHashCode();
                if (this.RecordsRootNode != null)
                    hashCode = hashCode * 59 + this.RecordsRootNode.GetHashCode();
                if (this.MedalsRootNode != null)
                    hashCode = hashCode * 59 + this.MedalsRootNode.GetHashCode();
                if (this.UndiscoveredCollectibleImage != null)
                    hashCode = hashCode * 59 + this.UndiscoveredCollectibleImage.GetHashCode();
                if (this.AmmoTypeHeavyIcon != null)
                    hashCode = hashCode * 59 + this.AmmoTypeHeavyIcon.GetHashCode();
                if (this.AmmoTypeSpecialIcon != null)
                    hashCode = hashCode * 59 + this.AmmoTypeSpecialIcon.GetHashCode();
                if (this.AmmoTypePrimaryIcon != null)
                    hashCode = hashCode * 59 + this.AmmoTypePrimaryIcon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
