/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// DestinyAdvancedAwaPermissionRequested
    /// </summary>
    [DataContract]
    public partial class DestinyAdvancedAwaPermissionRequested :  IEquatable<DestinyAdvancedAwaPermissionRequested>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyAdvancedAwaPermissionRequested" /> class.
        /// </summary>
        /// <param name="Type">Type of advanced write action..</param>
        /// <param name="AffectedItemId">Item instance ID the action shall be applied to. This is optional for all but a new AwaType values. Rule of thumb is to provide the item instance ID if one is available..</param>
        /// <param name="MembershipType">Destiny membership type of the account to modify..</param>
        /// <param name="CharacterId">Destiny character ID, if applicable, that will be affected by the action..</param>
        public DestinyAdvancedAwaPermissionRequested(DestinyAdvancedAwaType Type = default(DestinyAdvancedAwaType), long? AffectedItemId = default(long?), BungieMembershipType MembershipType = default(BungieMembershipType), long? CharacterId = default(long?))
        {
            this.Type = Type;
            this.AffectedItemId = AffectedItemId;
            this.MembershipType = MembershipType;
            this.CharacterId = CharacterId;
        }
        
        /// <summary>
        /// Type of advanced write action.
        /// </summary>
        /// <value>Type of advanced write action.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public DestinyAdvancedAwaType Type { get; set; }

        /// <summary>
        /// Item instance ID the action shall be applied to. This is optional for all but a new AwaType values. Rule of thumb is to provide the item instance ID if one is available.
        /// </summary>
        /// <value>Item instance ID the action shall be applied to. This is optional for all but a new AwaType values. Rule of thumb is to provide the item instance ID if one is available.</value>
        [DataMember(Name="affectedItemId", EmitDefaultValue=false)]
        public long? AffectedItemId { get; set; }

        /// <summary>
        /// Destiny membership type of the account to modify.
        /// </summary>
        /// <value>Destiny membership type of the account to modify.</value>
        [DataMember(Name="membershipType", EmitDefaultValue=false)]
        public BungieMembershipType MembershipType { get; set; }

        /// <summary>
        /// Destiny character ID, if applicable, that will be affected by the action.
        /// </summary>
        /// <value>Destiny character ID, if applicable, that will be affected by the action.</value>
        [DataMember(Name="characterId", EmitDefaultValue=false)]
        public long? CharacterId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyAdvancedAwaPermissionRequested {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AffectedItemId: ").Append(AffectedItemId).Append("\n");
            sb.Append("  MembershipType: ").Append(MembershipType).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyAdvancedAwaPermissionRequested);
        }

        /// <summary>
        /// Returns true if DestinyAdvancedAwaPermissionRequested instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyAdvancedAwaPermissionRequested to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyAdvancedAwaPermissionRequested input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AffectedItemId == input.AffectedItemId ||
                    (this.AffectedItemId != null &&
                    this.AffectedItemId.Equals(input.AffectedItemId))
                ) && 
                (
                    this.MembershipType == input.MembershipType ||
                    (this.MembershipType != null &&
                    this.MembershipType.Equals(input.MembershipType))
                ) && 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AffectedItemId != null)
                    hashCode = hashCode * 59 + this.AffectedItemId.GetHashCode();
                if (this.MembershipType != null)
                    hashCode = hashCode * 59 + this.MembershipType.GetHashCode();
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
