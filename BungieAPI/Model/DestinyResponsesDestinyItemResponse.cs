/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn&#39;t have an \&quot;itemInstanceId\&quot;: for those, get your information from the DestinyInventoryDefinition.
    /// </summary>
    [DataContract]
    public partial class DestinyResponsesDestinyItemResponse :  IEquatable<DestinyResponsesDestinyItemResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyResponsesDestinyItemResponse" /> class.
        /// </summary>
        /// <param name="characterId">If the item is on a character, this will return the ID of the character that is holding the item..</param>
        /// <param name="item">Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData.</param>
        /// <param name="instance">Basic instance data for the item.  COMPONENT TYPE: ItemInstances.</param>
        /// <param name="objectives">Information specifically about the item&#39;s objectives.  COMPONENT TYPE: ItemObjectives.</param>
        /// <param name="perks">Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks.</param>
        /// <param name="renderData">Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData.</param>
        /// <param name="stats">Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats.</param>
        /// <param name="talentGrid">Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character&#39;s \&quot;Builds\&quot;.  COMPONENT TYPE: ItemTalentGrids.</param>
        /// <param name="sockets">Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets.</param>
        public DestinyResponsesDestinyItemResponse(long? characterId = default(long?), Object item = default(Object), Object instance = default(Object), Object objectives = default(Object), Object perks = default(Object), Object renderData = default(Object), Object stats = default(Object), Object talentGrid = default(Object), Object sockets = default(Object))
        {
            this.CharacterId = characterId;
            this.Item = item;
            this.Instance = instance;
            this.Objectives = objectives;
            this.Perks = perks;
            this.RenderData = renderData;
            this.Stats = stats;
            this.TalentGrid = talentGrid;
            this.Sockets = sockets;
        }
        
        /// <summary>
        /// If the item is on a character, this will return the ID of the character that is holding the item.
        /// </summary>
        /// <value>If the item is on a character, this will return the ID of the character that is holding the item.</value>
        [DataMember(Name="characterId", EmitDefaultValue=false)]
        public long? CharacterId { get; set; }

        /// <summary>
        /// Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData
        /// </summary>
        /// <value>Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData</value>
        [DataMember(Name="item", EmitDefaultValue=false)]
        public Object Item { get; set; }

        /// <summary>
        /// Basic instance data for the item.  COMPONENT TYPE: ItemInstances
        /// </summary>
        /// <value>Basic instance data for the item.  COMPONENT TYPE: ItemInstances</value>
        [DataMember(Name="instance", EmitDefaultValue=false)]
        public Object Instance { get; set; }

        /// <summary>
        /// Information specifically about the item&#39;s objectives.  COMPONENT TYPE: ItemObjectives
        /// </summary>
        /// <value>Information specifically about the item&#39;s objectives.  COMPONENT TYPE: ItemObjectives</value>
        [DataMember(Name="objectives", EmitDefaultValue=false)]
        public Object Objectives { get; set; }

        /// <summary>
        /// Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks
        /// </summary>
        /// <value>Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks</value>
        [DataMember(Name="perks", EmitDefaultValue=false)]
        public Object Perks { get; set; }

        /// <summary>
        /// Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData
        /// </summary>
        /// <value>Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData</value>
        [DataMember(Name="renderData", EmitDefaultValue=false)]
        public Object RenderData { get; set; }

        /// <summary>
        /// Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats
        /// </summary>
        /// <value>Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats</value>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public Object Stats { get; set; }

        /// <summary>
        /// Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character&#39;s \&quot;Builds\&quot;.  COMPONENT TYPE: ItemTalentGrids
        /// </summary>
        /// <value>Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character&#39;s \&quot;Builds\&quot;.  COMPONENT TYPE: ItemTalentGrids</value>
        [DataMember(Name="talentGrid", EmitDefaultValue=false)]
        public Object TalentGrid { get; set; }

        /// <summary>
        /// Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets
        /// </summary>
        /// <value>Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets</value>
        [DataMember(Name="sockets", EmitDefaultValue=false)]
        public Object Sockets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyResponsesDestinyItemResponse {\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Objectives: ").Append(Objectives).Append("\n");
            sb.Append("  Perks: ").Append(Perks).Append("\n");
            sb.Append("  RenderData: ").Append(RenderData).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  TalentGrid: ").Append(TalentGrid).Append("\n");
            sb.Append("  Sockets: ").Append(Sockets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyResponsesDestinyItemResponse);
        }

        /// <summary>
        /// Returns true if DestinyResponsesDestinyItemResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyResponsesDestinyItemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyResponsesDestinyItemResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.Instance == input.Instance ||
                    (this.Instance != null &&
                    this.Instance.Equals(input.Instance))
                ) && 
                (
                    this.Objectives == input.Objectives ||
                    (this.Objectives != null &&
                    this.Objectives.Equals(input.Objectives))
                ) && 
                (
                    this.Perks == input.Perks ||
                    (this.Perks != null &&
                    this.Perks.Equals(input.Perks))
                ) && 
                (
                    this.RenderData == input.RenderData ||
                    (this.RenderData != null &&
                    this.RenderData.Equals(input.RenderData))
                ) && 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                ) && 
                (
                    this.TalentGrid == input.TalentGrid ||
                    (this.TalentGrid != null &&
                    this.TalentGrid.Equals(input.TalentGrid))
                ) && 
                (
                    this.Sockets == input.Sockets ||
                    (this.Sockets != null &&
                    this.Sockets.Equals(input.Sockets))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.Item != null)
                    hashCode = hashCode * 59 + this.Item.GetHashCode();
                if (this.Instance != null)
                    hashCode = hashCode * 59 + this.Instance.GetHashCode();
                if (this.Objectives != null)
                    hashCode = hashCode * 59 + this.Objectives.GetHashCode();
                if (this.Perks != null)
                    hashCode = hashCode * 59 + this.Perks.GetHashCode();
                if (this.RenderData != null)
                    hashCode = hashCode * 59 + this.RenderData.GetHashCode();
                if (this.Stats != null)
                    hashCode = hashCode * 59 + this.Stats.GetHashCode();
                if (this.TalentGrid != null)
                    hashCode = hashCode * 59 + this.TalentGrid.GetHashCode();
                if (this.Sockets != null)
                    hashCode = hashCode * 59 + this.Sockets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
