/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// Items can have objectives and progression. When you request this block, you will obtain information about any Objectives and progression tied to this item.
    /// </summary>
    [DataContract]
    public partial class DestinyEntitiesItemsDestinyItemObjectivesComponent :  IEquatable<DestinyEntitiesItemsDestinyItemObjectivesComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyEntitiesItemsDestinyItemObjectivesComponent" /> class.
        /// </summary>
        /// <param name="Objectives">If the item has a hard association with objectives, your progress on them will be defined here.   Objectives are our standard way to describe a series of tasks that have to be completed for a reward..</param>
        /// <param name="FlavorObjective">I may regret naming it this way - but this represents when an item has an objective that doesn&#39;t serve a beneficial purpose, but rather is used for \&quot;flavor\&quot; or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item..</param>
        /// <param name="DateCompleted">If we have any information on when these objectives were completed, this will be the date of that completion. This won&#39;t be on many items, but could be interesting for some items that do store this information..</param>
        public DestinyEntitiesItemsDestinyItemObjectivesComponent(List<DestinyQuestsDestinyObjectiveProgress> Objectives = default(List<DestinyQuestsDestinyObjectiveProgress>), DestinyQuestsDestinyObjectiveProgress FlavorObjective = default(DestinyQuestsDestinyObjectiveProgress), DateTime? DateCompleted = default(DateTime?))
        {
            this.Objectives = Objectives;
            this.FlavorObjective = FlavorObjective;
            this.DateCompleted = DateCompleted;
        }
        
        /// <summary>
        /// If the item has a hard association with objectives, your progress on them will be defined here.   Objectives are our standard way to describe a series of tasks that have to be completed for a reward.
        /// </summary>
        /// <value>If the item has a hard association with objectives, your progress on them will be defined here.   Objectives are our standard way to describe a series of tasks that have to be completed for a reward.</value>
        [DataMember(Name="objectives", EmitDefaultValue=false)]
        public List<DestinyQuestsDestinyObjectiveProgress> Objectives { get; set; }

        /// <summary>
        /// I may regret naming it this way - but this represents when an item has an objective that doesn&#39;t serve a beneficial purpose, but rather is used for \&quot;flavor\&quot; or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.
        /// </summary>
        /// <value>I may regret naming it this way - but this represents when an item has an objective that doesn&#39;t serve a beneficial purpose, but rather is used for \&quot;flavor\&quot; or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.</value>
        [DataMember(Name="flavorObjective", EmitDefaultValue=false)]
        public DestinyQuestsDestinyObjectiveProgress FlavorObjective { get; set; }

        /// <summary>
        /// If we have any information on when these objectives were completed, this will be the date of that completion. This won&#39;t be on many items, but could be interesting for some items that do store this information.
        /// </summary>
        /// <value>If we have any information on when these objectives were completed, this will be the date of that completion. This won&#39;t be on many items, but could be interesting for some items that do store this information.</value>
        [DataMember(Name="dateCompleted", EmitDefaultValue=false)]
        public DateTime? DateCompleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyEntitiesItemsDestinyItemObjectivesComponent {\n");
            sb.Append("  Objectives: ").Append(Objectives).Append("\n");
            sb.Append("  FlavorObjective: ").Append(FlavorObjective).Append("\n");
            sb.Append("  DateCompleted: ").Append(DateCompleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyEntitiesItemsDestinyItemObjectivesComponent);
        }

        /// <summary>
        /// Returns true if DestinyEntitiesItemsDestinyItemObjectivesComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyEntitiesItemsDestinyItemObjectivesComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyEntitiesItemsDestinyItemObjectivesComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Objectives == input.Objectives ||
                    this.Objectives != null &&
                    this.Objectives.SequenceEqual(input.Objectives)
                ) && 
                (
                    this.FlavorObjective == input.FlavorObjective ||
                    (this.FlavorObjective != null &&
                    this.FlavorObjective.Equals(input.FlavorObjective))
                ) && 
                (
                    this.DateCompleted == input.DateCompleted ||
                    (this.DateCompleted != null &&
                    this.DateCompleted.Equals(input.DateCompleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Objectives != null)
                    hashCode = hashCode * 59 + this.Objectives.GetHashCode();
                if (this.FlavorObjective != null)
                    hashCode = hashCode * 59 + this.FlavorObjective.GetHashCode();
                if (this.DateCompleted != null)
                    hashCode = hashCode * 59 + this.DateCompleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
