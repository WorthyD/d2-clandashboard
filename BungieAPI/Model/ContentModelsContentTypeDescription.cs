/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// ContentModelsContentTypeDescription
    /// </summary>
    [DataContract]
    public partial class ContentModelsContentTypeDescription :  IEquatable<ContentModelsContentTypeDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModelsContentTypeDescription" /> class.
        /// </summary>
        /// <param name="CType">CType.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ContentDescription">ContentDescription.</param>
        /// <param name="PreviewImage">PreviewImage.</param>
        /// <param name="Priority">Priority.</param>
        /// <param name="Reminder">Reminder.</param>
        /// <param name="Properties">Properties.</param>
        /// <param name="TagMetadata">TagMetadata.</param>
        /// <param name="TagMetadataItems">TagMetadataItems.</param>
        /// <param name="UsageExamples">UsageExamples.</param>
        /// <param name="ShowInContentEditor">ShowInContentEditor.</param>
        /// <param name="_TypeOf">_TypeOf.</param>
        /// <param name="BindIdentifierToProperty">BindIdentifierToProperty.</param>
        /// <param name="BoundRegex">BoundRegex.</param>
        /// <param name="ForceIdentifierBinding">ForceIdentifierBinding.</param>
        /// <param name="AllowComments">AllowComments.</param>
        /// <param name="AutoEnglishPropertyFallback">AutoEnglishPropertyFallback.</param>
        /// <param name="BulkUploadable">BulkUploadable.</param>
        /// <param name="Previews">Previews.</param>
        /// <param name="SuppressCmsPath">SuppressCmsPath.</param>
        /// <param name="PropertySections">PropertySections.</param>
        public ContentModelsContentTypeDescription(string CType = default(string), string Name = default(string), string ContentDescription = default(string), string PreviewImage = default(string), int? Priority = default(int?), string Reminder = default(string), List<ContentModelsContentTypeProperty> Properties = default(List<ContentModelsContentTypeProperty>), List<ContentModelsTagMetadataDefinition> TagMetadata = default(List<ContentModelsTagMetadataDefinition>), Dictionary<string, ContentModelsTagMetadataItem> TagMetadataItems = default(Dictionary<string, ContentModelsTagMetadataItem>), List<string> UsageExamples = default(List<string>), bool? ShowInContentEditor = default(bool?), string _TypeOf = default(string), string BindIdentifierToProperty = default(string), string BoundRegex = default(string), bool? ForceIdentifierBinding = default(bool?), bool? AllowComments = default(bool?), bool? AutoEnglishPropertyFallback = default(bool?), bool? BulkUploadable = default(bool?), List<ContentModelsContentPreview> Previews = default(List<ContentModelsContentPreview>), bool? SuppressCmsPath = default(bool?), List<ContentModelsContentTypePropertySection> PropertySections = default(List<ContentModelsContentTypePropertySection>))
        {
            this.CType = CType;
            this.Name = Name;
            this.ContentDescription = ContentDescription;
            this.PreviewImage = PreviewImage;
            this.Priority = Priority;
            this.Reminder = Reminder;
            this.Properties = Properties;
            this.TagMetadata = TagMetadata;
            this.TagMetadataItems = TagMetadataItems;
            this.UsageExamples = UsageExamples;
            this.ShowInContentEditor = ShowInContentEditor;
            this._TypeOf = _TypeOf;
            this.BindIdentifierToProperty = BindIdentifierToProperty;
            this.BoundRegex = BoundRegex;
            this.ForceIdentifierBinding = ForceIdentifierBinding;
            this.AllowComments = AllowComments;
            this.AutoEnglishPropertyFallback = AutoEnglishPropertyFallback;
            this.BulkUploadable = BulkUploadable;
            this.Previews = Previews;
            this.SuppressCmsPath = SuppressCmsPath;
            this.PropertySections = PropertySections;
        }
        
        /// <summary>
        /// Gets or Sets CType
        /// </summary>
        [DataMember(Name="cType", EmitDefaultValue=false)]
        public string CType { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ContentDescription
        /// </summary>
        [DataMember(Name="contentDescription", EmitDefaultValue=false)]
        public string ContentDescription { get; set; }

        /// <summary>
        /// Gets or Sets PreviewImage
        /// </summary>
        [DataMember(Name="previewImage", EmitDefaultValue=false)]
        public string PreviewImage { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets Reminder
        /// </summary>
        [DataMember(Name="reminder", EmitDefaultValue=false)]
        public string Reminder { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<ContentModelsContentTypeProperty> Properties { get; set; }

        /// <summary>
        /// Gets or Sets TagMetadata
        /// </summary>
        [DataMember(Name="tagMetadata", EmitDefaultValue=false)]
        public List<ContentModelsTagMetadataDefinition> TagMetadata { get; set; }

        /// <summary>
        /// Gets or Sets TagMetadataItems
        /// </summary>
        [DataMember(Name="tagMetadataItems", EmitDefaultValue=false)]
        public Dictionary<string, ContentModelsTagMetadataItem> TagMetadataItems { get; set; }

        /// <summary>
        /// Gets or Sets UsageExamples
        /// </summary>
        [DataMember(Name="usageExamples", EmitDefaultValue=false)]
        public List<string> UsageExamples { get; set; }

        /// <summary>
        /// Gets or Sets ShowInContentEditor
        /// </summary>
        [DataMember(Name="showInContentEditor", EmitDefaultValue=false)]
        public bool? ShowInContentEditor { get; set; }

        /// <summary>
        /// Gets or Sets _TypeOf
        /// </summary>
        [DataMember(Name="typeOf", EmitDefaultValue=false)]
        public string _TypeOf { get; set; }

        /// <summary>
        /// Gets or Sets BindIdentifierToProperty
        /// </summary>
        [DataMember(Name="bindIdentifierToProperty", EmitDefaultValue=false)]
        public string BindIdentifierToProperty { get; set; }

        /// <summary>
        /// Gets or Sets BoundRegex
        /// </summary>
        [DataMember(Name="boundRegex", EmitDefaultValue=false)]
        public string BoundRegex { get; set; }

        /// <summary>
        /// Gets or Sets ForceIdentifierBinding
        /// </summary>
        [DataMember(Name="forceIdentifierBinding", EmitDefaultValue=false)]
        public bool? ForceIdentifierBinding { get; set; }

        /// <summary>
        /// Gets or Sets AllowComments
        /// </summary>
        [DataMember(Name="allowComments", EmitDefaultValue=false)]
        public bool? AllowComments { get; set; }

        /// <summary>
        /// Gets or Sets AutoEnglishPropertyFallback
        /// </summary>
        [DataMember(Name="autoEnglishPropertyFallback", EmitDefaultValue=false)]
        public bool? AutoEnglishPropertyFallback { get; set; }

        /// <summary>
        /// Gets or Sets BulkUploadable
        /// </summary>
        [DataMember(Name="bulkUploadable", EmitDefaultValue=false)]
        public bool? BulkUploadable { get; set; }

        /// <summary>
        /// Gets or Sets Previews
        /// </summary>
        [DataMember(Name="previews", EmitDefaultValue=false)]
        public List<ContentModelsContentPreview> Previews { get; set; }

        /// <summary>
        /// Gets or Sets SuppressCmsPath
        /// </summary>
        [DataMember(Name="suppressCmsPath", EmitDefaultValue=false)]
        public bool? SuppressCmsPath { get; set; }

        /// <summary>
        /// Gets or Sets PropertySections
        /// </summary>
        [DataMember(Name="propertySections", EmitDefaultValue=false)]
        public List<ContentModelsContentTypePropertySection> PropertySections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentModelsContentTypeDescription {\n");
            sb.Append("  CType: ").Append(CType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContentDescription: ").Append(ContentDescription).Append("\n");
            sb.Append("  PreviewImage: ").Append(PreviewImage).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Reminder: ").Append(Reminder).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  TagMetadata: ").Append(TagMetadata).Append("\n");
            sb.Append("  TagMetadataItems: ").Append(TagMetadataItems).Append("\n");
            sb.Append("  UsageExamples: ").Append(UsageExamples).Append("\n");
            sb.Append("  ShowInContentEditor: ").Append(ShowInContentEditor).Append("\n");
            sb.Append("  _TypeOf: ").Append(_TypeOf).Append("\n");
            sb.Append("  BindIdentifierToProperty: ").Append(BindIdentifierToProperty).Append("\n");
            sb.Append("  BoundRegex: ").Append(BoundRegex).Append("\n");
            sb.Append("  ForceIdentifierBinding: ").Append(ForceIdentifierBinding).Append("\n");
            sb.Append("  AllowComments: ").Append(AllowComments).Append("\n");
            sb.Append("  AutoEnglishPropertyFallback: ").Append(AutoEnglishPropertyFallback).Append("\n");
            sb.Append("  BulkUploadable: ").Append(BulkUploadable).Append("\n");
            sb.Append("  Previews: ").Append(Previews).Append("\n");
            sb.Append("  SuppressCmsPath: ").Append(SuppressCmsPath).Append("\n");
            sb.Append("  PropertySections: ").Append(PropertySections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentModelsContentTypeDescription);
        }

        /// <summary>
        /// Returns true if ContentModelsContentTypeDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentModelsContentTypeDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentModelsContentTypeDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CType == input.CType ||
                    (this.CType != null &&
                    this.CType.Equals(input.CType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ContentDescription == input.ContentDescription ||
                    (this.ContentDescription != null &&
                    this.ContentDescription.Equals(input.ContentDescription))
                ) && 
                (
                    this.PreviewImage == input.PreviewImage ||
                    (this.PreviewImage != null &&
                    this.PreviewImage.Equals(input.PreviewImage))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Reminder == input.Reminder ||
                    (this.Reminder != null &&
                    this.Reminder.Equals(input.Reminder))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.TagMetadata == input.TagMetadata ||
                    this.TagMetadata != null &&
                    this.TagMetadata.SequenceEqual(input.TagMetadata)
                ) && 
                (
                    this.TagMetadataItems == input.TagMetadataItems ||
                    this.TagMetadataItems != null &&
                    this.TagMetadataItems.SequenceEqual(input.TagMetadataItems)
                ) && 
                (
                    this.UsageExamples == input.UsageExamples ||
                    this.UsageExamples != null &&
                    this.UsageExamples.SequenceEqual(input.UsageExamples)
                ) && 
                (
                    this.ShowInContentEditor == input.ShowInContentEditor ||
                    (this.ShowInContentEditor != null &&
                    this.ShowInContentEditor.Equals(input.ShowInContentEditor))
                ) && 
                (
                    this._TypeOf == input._TypeOf ||
                    (this._TypeOf != null &&
                    this._TypeOf.Equals(input._TypeOf))
                ) && 
                (
                    this.BindIdentifierToProperty == input.BindIdentifierToProperty ||
                    (this.BindIdentifierToProperty != null &&
                    this.BindIdentifierToProperty.Equals(input.BindIdentifierToProperty))
                ) && 
                (
                    this.BoundRegex == input.BoundRegex ||
                    (this.BoundRegex != null &&
                    this.BoundRegex.Equals(input.BoundRegex))
                ) && 
                (
                    this.ForceIdentifierBinding == input.ForceIdentifierBinding ||
                    (this.ForceIdentifierBinding != null &&
                    this.ForceIdentifierBinding.Equals(input.ForceIdentifierBinding))
                ) && 
                (
                    this.AllowComments == input.AllowComments ||
                    (this.AllowComments != null &&
                    this.AllowComments.Equals(input.AllowComments))
                ) && 
                (
                    this.AutoEnglishPropertyFallback == input.AutoEnglishPropertyFallback ||
                    (this.AutoEnglishPropertyFallback != null &&
                    this.AutoEnglishPropertyFallback.Equals(input.AutoEnglishPropertyFallback))
                ) && 
                (
                    this.BulkUploadable == input.BulkUploadable ||
                    (this.BulkUploadable != null &&
                    this.BulkUploadable.Equals(input.BulkUploadable))
                ) && 
                (
                    this.Previews == input.Previews ||
                    this.Previews != null &&
                    this.Previews.SequenceEqual(input.Previews)
                ) && 
                (
                    this.SuppressCmsPath == input.SuppressCmsPath ||
                    (this.SuppressCmsPath != null &&
                    this.SuppressCmsPath.Equals(input.SuppressCmsPath))
                ) && 
                (
                    this.PropertySections == input.PropertySections ||
                    this.PropertySections != null &&
                    this.PropertySections.SequenceEqual(input.PropertySections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CType != null)
                    hashCode = hashCode * 59 + this.CType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ContentDescription != null)
                    hashCode = hashCode * 59 + this.ContentDescription.GetHashCode();
                if (this.PreviewImage != null)
                    hashCode = hashCode * 59 + this.PreviewImage.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Reminder != null)
                    hashCode = hashCode * 59 + this.Reminder.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.TagMetadata != null)
                    hashCode = hashCode * 59 + this.TagMetadata.GetHashCode();
                if (this.TagMetadataItems != null)
                    hashCode = hashCode * 59 + this.TagMetadataItems.GetHashCode();
                if (this.UsageExamples != null)
                    hashCode = hashCode * 59 + this.UsageExamples.GetHashCode();
                if (this.ShowInContentEditor != null)
                    hashCode = hashCode * 59 + this.ShowInContentEditor.GetHashCode();
                if (this._TypeOf != null)
                    hashCode = hashCode * 59 + this._TypeOf.GetHashCode();
                if (this.BindIdentifierToProperty != null)
                    hashCode = hashCode * 59 + this.BindIdentifierToProperty.GetHashCode();
                if (this.BoundRegex != null)
                    hashCode = hashCode * 59 + this.BoundRegex.GetHashCode();
                if (this.ForceIdentifierBinding != null)
                    hashCode = hashCode * 59 + this.ForceIdentifierBinding.GetHashCode();
                if (this.AllowComments != null)
                    hashCode = hashCode * 59 + this.AllowComments.GetHashCode();
                if (this.AutoEnglishPropertyFallback != null)
                    hashCode = hashCode * 59 + this.AutoEnglishPropertyFallback.GetHashCode();
                if (this.BulkUploadable != null)
                    hashCode = hashCode * 59 + this.BulkUploadable.GetHashCode();
                if (this.Previews != null)
                    hashCode = hashCode * 59 + this.Previews.GetHashCode();
                if (this.SuppressCmsPath != null)
                    hashCode = hashCode * 59 + this.SuppressCmsPath.GetHashCode();
                if (this.PropertySections != null)
                    hashCode = hashCode * 59 + this.PropertySections.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
