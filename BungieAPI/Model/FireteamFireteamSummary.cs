/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// FireteamFireteamSummary
    /// </summary>
    [DataContract]
    public partial class FireteamFireteamSummary :  IEquatable<FireteamFireteamSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamFireteamSummary" /> class.
        /// </summary>
        /// <param name="fireteamId">fireteamId.</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="platform">platform.</param>
        /// <param name="activityType">activityType.</param>
        /// <param name="isImmediate">isImmediate.</param>
        /// <param name="scheduledTime">scheduledTime.</param>
        /// <param name="ownerMembershipId">ownerMembershipId.</param>
        /// <param name="playerSlotCount">playerSlotCount.</param>
        /// <param name="alternateSlotCount">alternateSlotCount.</param>
        /// <param name="availablePlayerSlotCount">availablePlayerSlotCount.</param>
        /// <param name="availableAlternateSlotCount">availableAlternateSlotCount.</param>
        /// <param name="title">title.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="dateModified">dateModified.</param>
        /// <param name="isPublic">isPublic.</param>
        /// <param name="locale">locale.</param>
        /// <param name="isValid">isValid.</param>
        /// <param name="datePlayerModified">datePlayerModified.</param>
        public FireteamFireteamSummary(long? fireteamId = default(long?), long? groupId = default(long?), FireteamFireteamPlatform platform = default(FireteamFireteamPlatform), FireteamFireteamActivityType activityType = default(FireteamFireteamActivityType), bool? isImmediate = default(bool?), DateTime? scheduledTime = default(DateTime?), long? ownerMembershipId = default(long?), int? playerSlotCount = default(int?), int? alternateSlotCount = default(int?), int? availablePlayerSlotCount = default(int?), int? availableAlternateSlotCount = default(int?), string title = default(string), DateTime? dateCreated = default(DateTime?), DateTime? dateModified = default(DateTime?), bool? isPublic = default(bool?), string locale = default(string), bool? isValid = default(bool?), DateTime? datePlayerModified = default(DateTime?))
        {
            this.FireteamId = fireteamId;
            this.GroupId = groupId;
            this.Platform = platform;
            this.ActivityType = activityType;
            this.IsImmediate = isImmediate;
            this.ScheduledTime = scheduledTime;
            this.OwnerMembershipId = ownerMembershipId;
            this.PlayerSlotCount = playerSlotCount;
            this.AlternateSlotCount = alternateSlotCount;
            this.AvailablePlayerSlotCount = availablePlayerSlotCount;
            this.AvailableAlternateSlotCount = availableAlternateSlotCount;
            this.Title = title;
            this.DateCreated = dateCreated;
            this.DateModified = dateModified;
            this.IsPublic = isPublic;
            this.Locale = locale;
            this.IsValid = isValid;
            this.DatePlayerModified = datePlayerModified;
        }
        
        /// <summary>
        /// Gets or Sets FireteamId
        /// </summary>
        [DataMember(Name="fireteamId", EmitDefaultValue=false)]
        public long? FireteamId { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public long? GroupId { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public FireteamFireteamPlatform Platform { get; set; }

        /// <summary>
        /// Gets or Sets ActivityType
        /// </summary>
        [DataMember(Name="activityType", EmitDefaultValue=false)]
        public FireteamFireteamActivityType ActivityType { get; set; }

        /// <summary>
        /// Gets or Sets IsImmediate
        /// </summary>
        [DataMember(Name="isImmediate", EmitDefaultValue=false)]
        public bool? IsImmediate { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledTime
        /// </summary>
        [DataMember(Name="scheduledTime", EmitDefaultValue=false)]
        public DateTime? ScheduledTime { get; set; }

        /// <summary>
        /// Gets or Sets OwnerMembershipId
        /// </summary>
        [DataMember(Name="ownerMembershipId", EmitDefaultValue=false)]
        public long? OwnerMembershipId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSlotCount
        /// </summary>
        [DataMember(Name="playerSlotCount", EmitDefaultValue=false)]
        public int? PlayerSlotCount { get; set; }

        /// <summary>
        /// Gets or Sets AlternateSlotCount
        /// </summary>
        [DataMember(Name="alternateSlotCount", EmitDefaultValue=false)]
        public int? AlternateSlotCount { get; set; }

        /// <summary>
        /// Gets or Sets AvailablePlayerSlotCount
        /// </summary>
        [DataMember(Name="availablePlayerSlotCount", EmitDefaultValue=false)]
        public int? AvailablePlayerSlotCount { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAlternateSlotCount
        /// </summary>
        [DataMember(Name="availableAlternateSlotCount", EmitDefaultValue=false)]
        public int? AvailableAlternateSlotCount { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateModified
        /// </summary>
        [DataMember(Name="dateModified", EmitDefaultValue=false)]
        public DateTime? DateModified { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name="isValid", EmitDefaultValue=false)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Gets or Sets DatePlayerModified
        /// </summary>
        [DataMember(Name="datePlayerModified", EmitDefaultValue=false)]
        public DateTime? DatePlayerModified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FireteamFireteamSummary {\n");
            sb.Append("  FireteamId: ").Append(FireteamId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  IsImmediate: ").Append(IsImmediate).Append("\n");
            sb.Append("  ScheduledTime: ").Append(ScheduledTime).Append("\n");
            sb.Append("  OwnerMembershipId: ").Append(OwnerMembershipId).Append("\n");
            sb.Append("  PlayerSlotCount: ").Append(PlayerSlotCount).Append("\n");
            sb.Append("  AlternateSlotCount: ").Append(AlternateSlotCount).Append("\n");
            sb.Append("  AvailablePlayerSlotCount: ").Append(AvailablePlayerSlotCount).Append("\n");
            sb.Append("  AvailableAlternateSlotCount: ").Append(AvailableAlternateSlotCount).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  DatePlayerModified: ").Append(DatePlayerModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FireteamFireteamSummary);
        }

        /// <summary>
        /// Returns true if FireteamFireteamSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of FireteamFireteamSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FireteamFireteamSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FireteamId == input.FireteamId ||
                    (this.FireteamId != null &&
                    this.FireteamId.Equals(input.FireteamId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.ActivityType == input.ActivityType ||
                    (this.ActivityType != null &&
                    this.ActivityType.Equals(input.ActivityType))
                ) && 
                (
                    this.IsImmediate == input.IsImmediate ||
                    (this.IsImmediate != null &&
                    this.IsImmediate.Equals(input.IsImmediate))
                ) && 
                (
                    this.ScheduledTime == input.ScheduledTime ||
                    (this.ScheduledTime != null &&
                    this.ScheduledTime.Equals(input.ScheduledTime))
                ) && 
                (
                    this.OwnerMembershipId == input.OwnerMembershipId ||
                    (this.OwnerMembershipId != null &&
                    this.OwnerMembershipId.Equals(input.OwnerMembershipId))
                ) && 
                (
                    this.PlayerSlotCount == input.PlayerSlotCount ||
                    (this.PlayerSlotCount != null &&
                    this.PlayerSlotCount.Equals(input.PlayerSlotCount))
                ) && 
                (
                    this.AlternateSlotCount == input.AlternateSlotCount ||
                    (this.AlternateSlotCount != null &&
                    this.AlternateSlotCount.Equals(input.AlternateSlotCount))
                ) && 
                (
                    this.AvailablePlayerSlotCount == input.AvailablePlayerSlotCount ||
                    (this.AvailablePlayerSlotCount != null &&
                    this.AvailablePlayerSlotCount.Equals(input.AvailablePlayerSlotCount))
                ) && 
                (
                    this.AvailableAlternateSlotCount == input.AvailableAlternateSlotCount ||
                    (this.AvailableAlternateSlotCount != null &&
                    this.AvailableAlternateSlotCount.Equals(input.AvailableAlternateSlotCount))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateModified == input.DateModified ||
                    (this.DateModified != null &&
                    this.DateModified.Equals(input.DateModified))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    (this.IsValid != null &&
                    this.IsValid.Equals(input.IsValid))
                ) && 
                (
                    this.DatePlayerModified == input.DatePlayerModified ||
                    (this.DatePlayerModified != null &&
                    this.DatePlayerModified.Equals(input.DatePlayerModified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FireteamId != null)
                    hashCode = hashCode * 59 + this.FireteamId.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.ActivityType != null)
                    hashCode = hashCode * 59 + this.ActivityType.GetHashCode();
                if (this.IsImmediate != null)
                    hashCode = hashCode * 59 + this.IsImmediate.GetHashCode();
                if (this.ScheduledTime != null)
                    hashCode = hashCode * 59 + this.ScheduledTime.GetHashCode();
                if (this.OwnerMembershipId != null)
                    hashCode = hashCode * 59 + this.OwnerMembershipId.GetHashCode();
                if (this.PlayerSlotCount != null)
                    hashCode = hashCode * 59 + this.PlayerSlotCount.GetHashCode();
                if (this.AlternateSlotCount != null)
                    hashCode = hashCode * 59 + this.AlternateSlotCount.GetHashCode();
                if (this.AvailablePlayerSlotCount != null)
                    hashCode = hashCode * 59 + this.AvailablePlayerSlotCount.GetHashCode();
                if (this.AvailableAlternateSlotCount != null)
                    hashCode = hashCode * 59 + this.AvailableAlternateSlotCount.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateModified != null)
                    hashCode = hashCode * 59 + this.DateModified.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.IsValid != null)
                    hashCode = hashCode * 59 + this.IsValid.GetHashCode();
                if (this.DatePlayerModified != null)
                    hashCode = hashCode * 59 + this.DatePlayerModified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
