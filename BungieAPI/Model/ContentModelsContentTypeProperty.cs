/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// ContentModelsContentTypeProperty
    /// </summary>
    [DataContract]
    public partial class ContentModelsContentTypeProperty :  IEquatable<ContentModelsContentTypeProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModelsContentTypeProperty" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="ReadableName">ReadableName.</param>
        /// <param name="Value">Value.</param>
        /// <param name="PropertyDescription">PropertyDescription.</param>
        /// <param name="Localizable">Localizable.</param>
        /// <param name="Fallback">Fallback.</param>
        /// <param name="Enabled">Enabled.</param>
        /// <param name="Order">Order.</param>
        /// <param name="Visible">Visible.</param>
        /// <param name="IsTitle">IsTitle.</param>
        /// <param name="Required">Required.</param>
        /// <param name="MaxLength">MaxLength.</param>
        /// <param name="MaxByteLength">MaxByteLength.</param>
        /// <param name="MaxFileSize">MaxFileSize.</param>
        /// <param name="Regexp">Regexp.</param>
        /// <param name="ValidateAs">ValidateAs.</param>
        /// <param name="RssAttribute">RssAttribute.</param>
        /// <param name="VisibleDependency">VisibleDependency.</param>
        /// <param name="VisibleOn">VisibleOn.</param>
        /// <param name="Datatype">Datatype.</param>
        /// <param name="Attributes">Attributes.</param>
        /// <param name="ChildProperties">ChildProperties.</param>
        /// <param name="ContentTypeAllowed">ContentTypeAllowed.</param>
        /// <param name="BindToProperty">BindToProperty.</param>
        /// <param name="BoundRegex">BoundRegex.</param>
        /// <param name="RepresentationSelection">RepresentationSelection.</param>
        /// <param name="DefaultValues">DefaultValues.</param>
        /// <param name="IsExternalAllowed">IsExternalAllowed.</param>
        /// <param name="PropertySection">PropertySection.</param>
        /// <param name="Weight">Weight.</param>
        /// <param name="Entitytype">Entitytype.</param>
        /// <param name="IsCombo">IsCombo.</param>
        /// <param name="SuppressProperty">SuppressProperty.</param>
        /// <param name="LegalContentTypes">LegalContentTypes.</param>
        /// <param name="RepresentationValidationString">RepresentationValidationString.</param>
        /// <param name="MinWidth">MinWidth.</param>
        /// <param name="MaxWidth">MaxWidth.</param>
        /// <param name="MinHeight">MinHeight.</param>
        /// <param name="MaxHeight">MaxHeight.</param>
        /// <param name="IsVideo">IsVideo.</param>
        /// <param name="IsImage">IsImage.</param>
        public ContentModelsContentTypeProperty(string Name = default(string), string ReadableName = default(string), string Value = default(string), string PropertyDescription = default(string), bool? Localizable = default(bool?), bool? Fallback = default(bool?), bool? Enabled = default(bool?), int? Order = default(int?), bool? Visible = default(bool?), bool? IsTitle = default(bool?), bool? Required = default(bool?), int? MaxLength = default(int?), int? MaxByteLength = default(int?), int? MaxFileSize = default(int?), string Regexp = default(string), string ValidateAs = default(string), string RssAttribute = default(string), string VisibleDependency = default(string), string VisibleOn = default(string), ContentModelsContentPropertyDataTypeEnum Datatype = default(ContentModelsContentPropertyDataTypeEnum), Dictionary<string, string> Attributes = default(Dictionary<string, string>), List<ContentModelsContentTypeProperty> ChildProperties = default(List<ContentModelsContentTypeProperty>), string ContentTypeAllowed = default(string), string BindToProperty = default(string), string BoundRegex = default(string), Dictionary<string, string> RepresentationSelection = default(Dictionary<string, string>), List<ContentModelsContentTypeDefaultValue> DefaultValues = default(List<ContentModelsContentTypeDefaultValue>), bool? IsExternalAllowed = default(bool?), string PropertySection = default(string), int? Weight = default(int?), string Entitytype = default(string), bool? IsCombo = default(bool?), bool? SuppressProperty = default(bool?), List<string> LegalContentTypes = default(List<string>), string RepresentationValidationString = default(string), int? MinWidth = default(int?), int? MaxWidth = default(int?), int? MinHeight = default(int?), int? MaxHeight = default(int?), bool? IsVideo = default(bool?), bool? IsImage = default(bool?))
        {
            this.Name = Name;
            this.ReadableName = ReadableName;
            this.Value = Value;
            this.PropertyDescription = PropertyDescription;
            this.Localizable = Localizable;
            this.Fallback = Fallback;
            this.Enabled = Enabled;
            this.Order = Order;
            this.Visible = Visible;
            this.IsTitle = IsTitle;
            this.Required = Required;
            this.MaxLength = MaxLength;
            this.MaxByteLength = MaxByteLength;
            this.MaxFileSize = MaxFileSize;
            this.Regexp = Regexp;
            this.ValidateAs = ValidateAs;
            this.RssAttribute = RssAttribute;
            this.VisibleDependency = VisibleDependency;
            this.VisibleOn = VisibleOn;
            this.Datatype = Datatype;
            this.Attributes = Attributes;
            this.ChildProperties = ChildProperties;
            this.ContentTypeAllowed = ContentTypeAllowed;
            this.BindToProperty = BindToProperty;
            this.BoundRegex = BoundRegex;
            this.RepresentationSelection = RepresentationSelection;
            this.DefaultValues = DefaultValues;
            this.IsExternalAllowed = IsExternalAllowed;
            this.PropertySection = PropertySection;
            this.Weight = Weight;
            this.Entitytype = Entitytype;
            this.IsCombo = IsCombo;
            this.SuppressProperty = SuppressProperty;
            this.LegalContentTypes = LegalContentTypes;
            this.RepresentationValidationString = RepresentationValidationString;
            this.MinWidth = MinWidth;
            this.MaxWidth = MaxWidth;
            this.MinHeight = MinHeight;
            this.MaxHeight = MaxHeight;
            this.IsVideo = IsVideo;
            this.IsImage = IsImage;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReadableName
        /// </summary>
        [DataMember(Name="readableName", EmitDefaultValue=false)]
        public string ReadableName { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets PropertyDescription
        /// </summary>
        [DataMember(Name="propertyDescription", EmitDefaultValue=false)]
        public string PropertyDescription { get; set; }

        /// <summary>
        /// Gets or Sets Localizable
        /// </summary>
        [DataMember(Name="localizable", EmitDefaultValue=false)]
        public bool? Localizable { get; set; }

        /// <summary>
        /// Gets or Sets Fallback
        /// </summary>
        [DataMember(Name="fallback", EmitDefaultValue=false)]
        public bool? Fallback { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets Visible
        /// </summary>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Gets or Sets IsTitle
        /// </summary>
        [DataMember(Name="isTitle", EmitDefaultValue=false)]
        public bool? IsTitle { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxByteLength
        /// </summary>
        [DataMember(Name="maxByteLength", EmitDefaultValue=false)]
        public int? MaxByteLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxFileSize
        /// </summary>
        [DataMember(Name="maxFileSize", EmitDefaultValue=false)]
        public int? MaxFileSize { get; set; }

        /// <summary>
        /// Gets or Sets Regexp
        /// </summary>
        [DataMember(Name="regexp", EmitDefaultValue=false)]
        public string Regexp { get; set; }

        /// <summary>
        /// Gets or Sets ValidateAs
        /// </summary>
        [DataMember(Name="validateAs", EmitDefaultValue=false)]
        public string ValidateAs { get; set; }

        /// <summary>
        /// Gets or Sets RssAttribute
        /// </summary>
        [DataMember(Name="rssAttribute", EmitDefaultValue=false)]
        public string RssAttribute { get; set; }

        /// <summary>
        /// Gets or Sets VisibleDependency
        /// </summary>
        [DataMember(Name="visibleDependency", EmitDefaultValue=false)]
        public string VisibleDependency { get; set; }

        /// <summary>
        /// Gets or Sets VisibleOn
        /// </summary>
        [DataMember(Name="visibleOn", EmitDefaultValue=false)]
        public string VisibleOn { get; set; }

        /// <summary>
        /// Gets or Sets Datatype
        /// </summary>
        [DataMember(Name="datatype", EmitDefaultValue=false)]
        public ContentModelsContentPropertyDataTypeEnum Datatype { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Dictionary<string, string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ChildProperties
        /// </summary>
        [DataMember(Name="childProperties", EmitDefaultValue=false)]
        public List<ContentModelsContentTypeProperty> ChildProperties { get; set; }

        /// <summary>
        /// Gets or Sets ContentTypeAllowed
        /// </summary>
        [DataMember(Name="contentTypeAllowed", EmitDefaultValue=false)]
        public string ContentTypeAllowed { get; set; }

        /// <summary>
        /// Gets or Sets BindToProperty
        /// </summary>
        [DataMember(Name="bindToProperty", EmitDefaultValue=false)]
        public string BindToProperty { get; set; }

        /// <summary>
        /// Gets or Sets BoundRegex
        /// </summary>
        [DataMember(Name="boundRegex", EmitDefaultValue=false)]
        public string BoundRegex { get; set; }

        /// <summary>
        /// Gets or Sets RepresentationSelection
        /// </summary>
        [DataMember(Name="representationSelection", EmitDefaultValue=false)]
        public Dictionary<string, string> RepresentationSelection { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValues
        /// </summary>
        [DataMember(Name="defaultValues", EmitDefaultValue=false)]
        public List<ContentModelsContentTypeDefaultValue> DefaultValues { get; set; }

        /// <summary>
        /// Gets or Sets IsExternalAllowed
        /// </summary>
        [DataMember(Name="isExternalAllowed", EmitDefaultValue=false)]
        public bool? IsExternalAllowed { get; set; }

        /// <summary>
        /// Gets or Sets PropertySection
        /// </summary>
        [DataMember(Name="propertySection", EmitDefaultValue=false)]
        public string PropertySection { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Entitytype
        /// </summary>
        [DataMember(Name="entitytype", EmitDefaultValue=false)]
        public string Entitytype { get; set; }

        /// <summary>
        /// Gets or Sets IsCombo
        /// </summary>
        [DataMember(Name="isCombo", EmitDefaultValue=false)]
        public bool? IsCombo { get; set; }

        /// <summary>
        /// Gets or Sets SuppressProperty
        /// </summary>
        [DataMember(Name="suppressProperty", EmitDefaultValue=false)]
        public bool? SuppressProperty { get; set; }

        /// <summary>
        /// Gets or Sets LegalContentTypes
        /// </summary>
        [DataMember(Name="legalContentTypes", EmitDefaultValue=false)]
        public List<string> LegalContentTypes { get; set; }

        /// <summary>
        /// Gets or Sets RepresentationValidationString
        /// </summary>
        [DataMember(Name="representationValidationString", EmitDefaultValue=false)]
        public string RepresentationValidationString { get; set; }

        /// <summary>
        /// Gets or Sets MinWidth
        /// </summary>
        [DataMember(Name="minWidth", EmitDefaultValue=false)]
        public int? MinWidth { get; set; }

        /// <summary>
        /// Gets or Sets MaxWidth
        /// </summary>
        [DataMember(Name="maxWidth", EmitDefaultValue=false)]
        public int? MaxWidth { get; set; }

        /// <summary>
        /// Gets or Sets MinHeight
        /// </summary>
        [DataMember(Name="minHeight", EmitDefaultValue=false)]
        public int? MinHeight { get; set; }

        /// <summary>
        /// Gets or Sets MaxHeight
        /// </summary>
        [DataMember(Name="maxHeight", EmitDefaultValue=false)]
        public int? MaxHeight { get; set; }

        /// <summary>
        /// Gets or Sets IsVideo
        /// </summary>
        [DataMember(Name="isVideo", EmitDefaultValue=false)]
        public bool? IsVideo { get; set; }

        /// <summary>
        /// Gets or Sets IsImage
        /// </summary>
        [DataMember(Name="isImage", EmitDefaultValue=false)]
        public bool? IsImage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentModelsContentTypeProperty {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReadableName: ").Append(ReadableName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  PropertyDescription: ").Append(PropertyDescription).Append("\n");
            sb.Append("  Localizable: ").Append(Localizable).Append("\n");
            sb.Append("  Fallback: ").Append(Fallback).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  IsTitle: ").Append(IsTitle).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MaxByteLength: ").Append(MaxByteLength).Append("\n");
            sb.Append("  MaxFileSize: ").Append(MaxFileSize).Append("\n");
            sb.Append("  Regexp: ").Append(Regexp).Append("\n");
            sb.Append("  ValidateAs: ").Append(ValidateAs).Append("\n");
            sb.Append("  RssAttribute: ").Append(RssAttribute).Append("\n");
            sb.Append("  VisibleDependency: ").Append(VisibleDependency).Append("\n");
            sb.Append("  VisibleOn: ").Append(VisibleOn).Append("\n");
            sb.Append("  Datatype: ").Append(Datatype).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ChildProperties: ").Append(ChildProperties).Append("\n");
            sb.Append("  ContentTypeAllowed: ").Append(ContentTypeAllowed).Append("\n");
            sb.Append("  BindToProperty: ").Append(BindToProperty).Append("\n");
            sb.Append("  BoundRegex: ").Append(BoundRegex).Append("\n");
            sb.Append("  RepresentationSelection: ").Append(RepresentationSelection).Append("\n");
            sb.Append("  DefaultValues: ").Append(DefaultValues).Append("\n");
            sb.Append("  IsExternalAllowed: ").Append(IsExternalAllowed).Append("\n");
            sb.Append("  PropertySection: ").Append(PropertySection).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Entitytype: ").Append(Entitytype).Append("\n");
            sb.Append("  IsCombo: ").Append(IsCombo).Append("\n");
            sb.Append("  SuppressProperty: ").Append(SuppressProperty).Append("\n");
            sb.Append("  LegalContentTypes: ").Append(LegalContentTypes).Append("\n");
            sb.Append("  RepresentationValidationString: ").Append(RepresentationValidationString).Append("\n");
            sb.Append("  MinWidth: ").Append(MinWidth).Append("\n");
            sb.Append("  MaxWidth: ").Append(MaxWidth).Append("\n");
            sb.Append("  MinHeight: ").Append(MinHeight).Append("\n");
            sb.Append("  MaxHeight: ").Append(MaxHeight).Append("\n");
            sb.Append("  IsVideo: ").Append(IsVideo).Append("\n");
            sb.Append("  IsImage: ").Append(IsImage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentModelsContentTypeProperty);
        }

        /// <summary>
        /// Returns true if ContentModelsContentTypeProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentModelsContentTypeProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentModelsContentTypeProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReadableName == input.ReadableName ||
                    (this.ReadableName != null &&
                    this.ReadableName.Equals(input.ReadableName))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.PropertyDescription == input.PropertyDescription ||
                    (this.PropertyDescription != null &&
                    this.PropertyDescription.Equals(input.PropertyDescription))
                ) && 
                (
                    this.Localizable == input.Localizable ||
                    (this.Localizable != null &&
                    this.Localizable.Equals(input.Localizable))
                ) && 
                (
                    this.Fallback == input.Fallback ||
                    (this.Fallback != null &&
                    this.Fallback.Equals(input.Fallback))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Visible == input.Visible ||
                    (this.Visible != null &&
                    this.Visible.Equals(input.Visible))
                ) && 
                (
                    this.IsTitle == input.IsTitle ||
                    (this.IsTitle != null &&
                    this.IsTitle.Equals(input.IsTitle))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.MaxByteLength == input.MaxByteLength ||
                    (this.MaxByteLength != null &&
                    this.MaxByteLength.Equals(input.MaxByteLength))
                ) && 
                (
                    this.MaxFileSize == input.MaxFileSize ||
                    (this.MaxFileSize != null &&
                    this.MaxFileSize.Equals(input.MaxFileSize))
                ) && 
                (
                    this.Regexp == input.Regexp ||
                    (this.Regexp != null &&
                    this.Regexp.Equals(input.Regexp))
                ) && 
                (
                    this.ValidateAs == input.ValidateAs ||
                    (this.ValidateAs != null &&
                    this.ValidateAs.Equals(input.ValidateAs))
                ) && 
                (
                    this.RssAttribute == input.RssAttribute ||
                    (this.RssAttribute != null &&
                    this.RssAttribute.Equals(input.RssAttribute))
                ) && 
                (
                    this.VisibleDependency == input.VisibleDependency ||
                    (this.VisibleDependency != null &&
                    this.VisibleDependency.Equals(input.VisibleDependency))
                ) && 
                (
                    this.VisibleOn == input.VisibleOn ||
                    (this.VisibleOn != null &&
                    this.VisibleOn.Equals(input.VisibleOn))
                ) && 
                (
                    this.Datatype == input.Datatype ||
                    (this.Datatype != null &&
                    this.Datatype.Equals(input.Datatype))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ChildProperties == input.ChildProperties ||
                    this.ChildProperties != null &&
                    this.ChildProperties.SequenceEqual(input.ChildProperties)
                ) && 
                (
                    this.ContentTypeAllowed == input.ContentTypeAllowed ||
                    (this.ContentTypeAllowed != null &&
                    this.ContentTypeAllowed.Equals(input.ContentTypeAllowed))
                ) && 
                (
                    this.BindToProperty == input.BindToProperty ||
                    (this.BindToProperty != null &&
                    this.BindToProperty.Equals(input.BindToProperty))
                ) && 
                (
                    this.BoundRegex == input.BoundRegex ||
                    (this.BoundRegex != null &&
                    this.BoundRegex.Equals(input.BoundRegex))
                ) && 
                (
                    this.RepresentationSelection == input.RepresentationSelection ||
                    this.RepresentationSelection != null &&
                    this.RepresentationSelection.SequenceEqual(input.RepresentationSelection)
                ) && 
                (
                    this.DefaultValues == input.DefaultValues ||
                    this.DefaultValues != null &&
                    this.DefaultValues.SequenceEqual(input.DefaultValues)
                ) && 
                (
                    this.IsExternalAllowed == input.IsExternalAllowed ||
                    (this.IsExternalAllowed != null &&
                    this.IsExternalAllowed.Equals(input.IsExternalAllowed))
                ) && 
                (
                    this.PropertySection == input.PropertySection ||
                    (this.PropertySection != null &&
                    this.PropertySection.Equals(input.PropertySection))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Entitytype == input.Entitytype ||
                    (this.Entitytype != null &&
                    this.Entitytype.Equals(input.Entitytype))
                ) && 
                (
                    this.IsCombo == input.IsCombo ||
                    (this.IsCombo != null &&
                    this.IsCombo.Equals(input.IsCombo))
                ) && 
                (
                    this.SuppressProperty == input.SuppressProperty ||
                    (this.SuppressProperty != null &&
                    this.SuppressProperty.Equals(input.SuppressProperty))
                ) && 
                (
                    this.LegalContentTypes == input.LegalContentTypes ||
                    this.LegalContentTypes != null &&
                    this.LegalContentTypes.SequenceEqual(input.LegalContentTypes)
                ) && 
                (
                    this.RepresentationValidationString == input.RepresentationValidationString ||
                    (this.RepresentationValidationString != null &&
                    this.RepresentationValidationString.Equals(input.RepresentationValidationString))
                ) && 
                (
                    this.MinWidth == input.MinWidth ||
                    (this.MinWidth != null &&
                    this.MinWidth.Equals(input.MinWidth))
                ) && 
                (
                    this.MaxWidth == input.MaxWidth ||
                    (this.MaxWidth != null &&
                    this.MaxWidth.Equals(input.MaxWidth))
                ) && 
                (
                    this.MinHeight == input.MinHeight ||
                    (this.MinHeight != null &&
                    this.MinHeight.Equals(input.MinHeight))
                ) && 
                (
                    this.MaxHeight == input.MaxHeight ||
                    (this.MaxHeight != null &&
                    this.MaxHeight.Equals(input.MaxHeight))
                ) && 
                (
                    this.IsVideo == input.IsVideo ||
                    (this.IsVideo != null &&
                    this.IsVideo.Equals(input.IsVideo))
                ) && 
                (
                    this.IsImage == input.IsImage ||
                    (this.IsImage != null &&
                    this.IsImage.Equals(input.IsImage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ReadableName != null)
                    hashCode = hashCode * 59 + this.ReadableName.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.PropertyDescription != null)
                    hashCode = hashCode * 59 + this.PropertyDescription.GetHashCode();
                if (this.Localizable != null)
                    hashCode = hashCode * 59 + this.Localizable.GetHashCode();
                if (this.Fallback != null)
                    hashCode = hashCode * 59 + this.Fallback.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Visible != null)
                    hashCode = hashCode * 59 + this.Visible.GetHashCode();
                if (this.IsTitle != null)
                    hashCode = hashCode * 59 + this.IsTitle.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.MaxByteLength != null)
                    hashCode = hashCode * 59 + this.MaxByteLength.GetHashCode();
                if (this.MaxFileSize != null)
                    hashCode = hashCode * 59 + this.MaxFileSize.GetHashCode();
                if (this.Regexp != null)
                    hashCode = hashCode * 59 + this.Regexp.GetHashCode();
                if (this.ValidateAs != null)
                    hashCode = hashCode * 59 + this.ValidateAs.GetHashCode();
                if (this.RssAttribute != null)
                    hashCode = hashCode * 59 + this.RssAttribute.GetHashCode();
                if (this.VisibleDependency != null)
                    hashCode = hashCode * 59 + this.VisibleDependency.GetHashCode();
                if (this.VisibleOn != null)
                    hashCode = hashCode * 59 + this.VisibleOn.GetHashCode();
                if (this.Datatype != null)
                    hashCode = hashCode * 59 + this.Datatype.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ChildProperties != null)
                    hashCode = hashCode * 59 + this.ChildProperties.GetHashCode();
                if (this.ContentTypeAllowed != null)
                    hashCode = hashCode * 59 + this.ContentTypeAllowed.GetHashCode();
                if (this.BindToProperty != null)
                    hashCode = hashCode * 59 + this.BindToProperty.GetHashCode();
                if (this.BoundRegex != null)
                    hashCode = hashCode * 59 + this.BoundRegex.GetHashCode();
                if (this.RepresentationSelection != null)
                    hashCode = hashCode * 59 + this.RepresentationSelection.GetHashCode();
                if (this.DefaultValues != null)
                    hashCode = hashCode * 59 + this.DefaultValues.GetHashCode();
                if (this.IsExternalAllowed != null)
                    hashCode = hashCode * 59 + this.IsExternalAllowed.GetHashCode();
                if (this.PropertySection != null)
                    hashCode = hashCode * 59 + this.PropertySection.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Entitytype != null)
                    hashCode = hashCode * 59 + this.Entitytype.GetHashCode();
                if (this.IsCombo != null)
                    hashCode = hashCode * 59 + this.IsCombo.GetHashCode();
                if (this.SuppressProperty != null)
                    hashCode = hashCode * 59 + this.SuppressProperty.GetHashCode();
                if (this.LegalContentTypes != null)
                    hashCode = hashCode * 59 + this.LegalContentTypes.GetHashCode();
                if (this.RepresentationValidationString != null)
                    hashCode = hashCode * 59 + this.RepresentationValidationString.GetHashCode();
                if (this.MinWidth != null)
                    hashCode = hashCode * 59 + this.MinWidth.GetHashCode();
                if (this.MaxWidth != null)
                    hashCode = hashCode * 59 + this.MaxWidth.GetHashCode();
                if (this.MinHeight != null)
                    hashCode = hashCode * 59 + this.MinHeight.GetHashCode();
                if (this.MaxHeight != null)
                    hashCode = hashCode * 59 + this.MaxHeight.GetHashCode();
                if (this.IsVideo != null)
                    hashCode = hashCode * 59 + this.IsVideo.GetHashCode();
                if (this.IsImage != null)
                    hashCode = hashCode * 59 + this.IsImage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
