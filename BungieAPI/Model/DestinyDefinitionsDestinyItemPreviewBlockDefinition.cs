/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// Items like Sacks or Boxes can have items that it shows in-game when you view details that represent the items you can obtain if you use or acquire the item.  This defines those categories, and gives some insights into that data&#39;s source.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyItemPreviewBlockDefinition :  IEquatable<DestinyDefinitionsDestinyItemPreviewBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemPreviewBlockDefinition" /> class.
        /// </summary>
        /// <param name="screenStyle">A string that the game UI uses as a hint for which detail screen to show for the item. You, too, can leverage this for your own custom screen detail views. Note, however, that these are arbitrarily defined by designers: there&#39;s no guarantees of a fixed, known number of these - so fall back to something reasonable if you don&#39;t recognize it..</param>
        /// <param name="previewVendorHash">If the preview data is derived from a fake \&quot;Preview\&quot; Vendor, this will be the hash identifier for the DestinyVendorDefinition of that fake vendor..</param>
        /// <param name="previewActionString">If the preview has an associated action (like \&quot;Open\&quot;), this will be the localized string for that action..</param>
        /// <param name="derivedItemCategories">This is a list of the items being previewed, categorized in the same way as they are in the preview UI..</param>
        public DestinyDefinitionsDestinyItemPreviewBlockDefinition(string screenStyle = default(string), int? previewVendorHash = default(int?), string previewActionString = default(string), List<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition> derivedItemCategories = default(List<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition>))
        {
            this.ScreenStyle = screenStyle;
            this.PreviewVendorHash = previewVendorHash;
            this.PreviewActionString = previewActionString;
            this.DerivedItemCategories = derivedItemCategories;
        }
        
        /// <summary>
        /// A string that the game UI uses as a hint for which detail screen to show for the item. You, too, can leverage this for your own custom screen detail views. Note, however, that these are arbitrarily defined by designers: there&#39;s no guarantees of a fixed, known number of these - so fall back to something reasonable if you don&#39;t recognize it.
        /// </summary>
        /// <value>A string that the game UI uses as a hint for which detail screen to show for the item. You, too, can leverage this for your own custom screen detail views. Note, however, that these are arbitrarily defined by designers: there&#39;s no guarantees of a fixed, known number of these - so fall back to something reasonable if you don&#39;t recognize it.</value>
        [DataMember(Name="screenStyle", EmitDefaultValue=false)]
        public string ScreenStyle { get; set; }

        /// <summary>
        /// If the preview data is derived from a fake \&quot;Preview\&quot; Vendor, this will be the hash identifier for the DestinyVendorDefinition of that fake vendor.
        /// </summary>
        /// <value>If the preview data is derived from a fake \&quot;Preview\&quot; Vendor, this will be the hash identifier for the DestinyVendorDefinition of that fake vendor.</value>
        [DataMember(Name="previewVendorHash", EmitDefaultValue=false)]
        public int? PreviewVendorHash { get; set; }

        /// <summary>
        /// If the preview has an associated action (like \&quot;Open\&quot;), this will be the localized string for that action.
        /// </summary>
        /// <value>If the preview has an associated action (like \&quot;Open\&quot;), this will be the localized string for that action.</value>
        [DataMember(Name="previewActionString", EmitDefaultValue=false)]
        public string PreviewActionString { get; set; }

        /// <summary>
        /// This is a list of the items being previewed, categorized in the same way as they are in the preview UI.
        /// </summary>
        /// <value>This is a list of the items being previewed, categorized in the same way as they are in the preview UI.</value>
        [DataMember(Name="derivedItemCategories", EmitDefaultValue=false)]
        public List<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition> DerivedItemCategories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemPreviewBlockDefinition {\n");
            sb.Append("  ScreenStyle: ").Append(ScreenStyle).Append("\n");
            sb.Append("  PreviewVendorHash: ").Append(PreviewVendorHash).Append("\n");
            sb.Append("  PreviewActionString: ").Append(PreviewActionString).Append("\n");
            sb.Append("  DerivedItemCategories: ").Append(DerivedItemCategories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemPreviewBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemPreviewBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemPreviewBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemPreviewBlockDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScreenStyle == input.ScreenStyle ||
                    (this.ScreenStyle != null &&
                    this.ScreenStyle.Equals(input.ScreenStyle))
                ) && 
                (
                    this.PreviewVendorHash == input.PreviewVendorHash ||
                    (this.PreviewVendorHash != null &&
                    this.PreviewVendorHash.Equals(input.PreviewVendorHash))
                ) && 
                (
                    this.PreviewActionString == input.PreviewActionString ||
                    (this.PreviewActionString != null &&
                    this.PreviewActionString.Equals(input.PreviewActionString))
                ) && 
                (
                    this.DerivedItemCategories == input.DerivedItemCategories ||
                    this.DerivedItemCategories != null &&
                    this.DerivedItemCategories.SequenceEqual(input.DerivedItemCategories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScreenStyle != null)
                    hashCode = hashCode * 59 + this.ScreenStyle.GetHashCode();
                if (this.PreviewVendorHash != null)
                    hashCode = hashCode * 59 + this.PreviewVendorHash.GetHashCode();
                if (this.PreviewActionString != null)
                    hashCode = hashCode * 59 + this.PreviewActionString.GetHashCode();
                if (this.DerivedItemCategories != null)
                    hashCode = hashCode * 59 + this.DerivedItemCategories.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
