/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent
    /// </summary>
    [DataContract]
    public partial class DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent :  IEquatable<DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent" /> class.
        /// </summary>
        /// <param name="RecentCollectibleHashes">The list of collectibles determined by the game as having been \&quot;recently\&quot; acquired..</param>
        /// <param name="NewnessFlaggedCollectibleHashes">The list of collectibles determined by the game as having been \&quot;recently\&quot; acquired.  The game client itself actually controls this data, so I personally question whether anyone will get much use out of this: because we can&#39;t edit this value through the API. But in case anyone finds it useful, here it is..</param>
        /// <param name="Collectibles">Collectibles.</param>
        public DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent(List<uint?> RecentCollectibleHashes = default(List<uint?>), List<uint?> NewnessFlaggedCollectibleHashes = default(List<uint?>), Dictionary<string, DestinyComponentsCollectiblesDestinyCollectibleComponent> Collectibles = default(Dictionary<string, DestinyComponentsCollectiblesDestinyCollectibleComponent>))
        {
            this.RecentCollectibleHashes = RecentCollectibleHashes;
            this.NewnessFlaggedCollectibleHashes = NewnessFlaggedCollectibleHashes;
            this.Collectibles = Collectibles;
        }
        
        /// <summary>
        /// The list of collectibles determined by the game as having been \&quot;recently\&quot; acquired.
        /// </summary>
        /// <value>The list of collectibles determined by the game as having been \&quot;recently\&quot; acquired.</value>
        [DataMember(Name="recentCollectibleHashes", EmitDefaultValue=false)]
        public List<uint?> RecentCollectibleHashes { get; set; }

        /// <summary>
        /// The list of collectibles determined by the game as having been \&quot;recently\&quot; acquired.  The game client itself actually controls this data, so I personally question whether anyone will get much use out of this: because we can&#39;t edit this value through the API. But in case anyone finds it useful, here it is.
        /// </summary>
        /// <value>The list of collectibles determined by the game as having been \&quot;recently\&quot; acquired.  The game client itself actually controls this data, so I personally question whether anyone will get much use out of this: because we can&#39;t edit this value through the API. But in case anyone finds it useful, here it is.</value>
        [DataMember(Name="newnessFlaggedCollectibleHashes", EmitDefaultValue=false)]
        public List<uint?> NewnessFlaggedCollectibleHashes { get; set; }

        /// <summary>
        /// Gets or Sets Collectibles
        /// </summary>
        [DataMember(Name="collectibles", EmitDefaultValue=false)]
        public Dictionary<string, DestinyComponentsCollectiblesDestinyCollectibleComponent> Collectibles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent {\n");
            sb.Append("  RecentCollectibleHashes: ").Append(RecentCollectibleHashes).Append("\n");
            sb.Append("  NewnessFlaggedCollectibleHashes: ").Append(NewnessFlaggedCollectibleHashes).Append("\n");
            sb.Append("  Collectibles: ").Append(Collectibles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent);
        }

        /// <summary>
        /// Returns true if DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecentCollectibleHashes == input.RecentCollectibleHashes ||
                    this.RecentCollectibleHashes != null &&
                    this.RecentCollectibleHashes.SequenceEqual(input.RecentCollectibleHashes)
                ) && 
                (
                    this.NewnessFlaggedCollectibleHashes == input.NewnessFlaggedCollectibleHashes ||
                    this.NewnessFlaggedCollectibleHashes != null &&
                    this.NewnessFlaggedCollectibleHashes.SequenceEqual(input.NewnessFlaggedCollectibleHashes)
                ) && 
                (
                    this.Collectibles == input.Collectibles ||
                    this.Collectibles != null &&
                    this.Collectibles.SequenceEqual(input.Collectibles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecentCollectibleHashes != null)
                    hashCode = hashCode * 59 + this.RecentCollectibleHashes.GetHashCode();
                if (this.NewnessFlaggedCollectibleHashes != null)
                    hashCode = hashCode * 59 + this.NewnessFlaggedCollectibleHashes.GetHashCode();
                if (this.Collectibles != null)
                    hashCode = hashCode * 59 + this.Collectibles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
