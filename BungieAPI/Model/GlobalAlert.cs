/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// GlobalAlert
    /// </summary>
    [DataContract]
    public partial class GlobalAlert :  IEquatable<GlobalAlert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalAlert" /> class.
        /// </summary>
        /// <param name="AlertKey">AlertKey.</param>
        /// <param name="AlertHtml">AlertHtml.</param>
        /// <param name="AlertTimestamp">AlertTimestamp.</param>
        /// <param name="AlertLink">AlertLink.</param>
        /// <param name="AlertLevel">AlertLevel.</param>
        /// <param name="AlertType">AlertType.</param>
        /// <param name="StreamInfo">StreamInfo.</param>
        public GlobalAlert(string AlertKey = default(string), string AlertHtml = default(string), DateTime? AlertTimestamp = default(DateTime?), string AlertLink = default(string), GlobalAlertLevel AlertLevel = default(GlobalAlertLevel), GlobalAlertType AlertType = default(GlobalAlertType), StreamInfo StreamInfo = default(StreamInfo))
        {
            this.AlertKey = AlertKey;
            this.AlertHtml = AlertHtml;
            this.AlertTimestamp = AlertTimestamp;
            this.AlertLink = AlertLink;
            this.AlertLevel = AlertLevel;
            this.AlertType = AlertType;
            this.StreamInfo = StreamInfo;
        }
        
        /// <summary>
        /// Gets or Sets AlertKey
        /// </summary>
        [DataMember(Name="AlertKey", EmitDefaultValue=false)]
        public string AlertKey { get; set; }

        /// <summary>
        /// Gets or Sets AlertHtml
        /// </summary>
        [DataMember(Name="AlertHtml", EmitDefaultValue=false)]
        public string AlertHtml { get; set; }

        /// <summary>
        /// Gets or Sets AlertTimestamp
        /// </summary>
        [DataMember(Name="AlertTimestamp", EmitDefaultValue=false)]
        public DateTime? AlertTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets AlertLink
        /// </summary>
        [DataMember(Name="AlertLink", EmitDefaultValue=false)]
        public string AlertLink { get; set; }

        /// <summary>
        /// Gets or Sets AlertLevel
        /// </summary>
        [DataMember(Name="AlertLevel", EmitDefaultValue=false)]
        public GlobalAlertLevel AlertLevel { get; set; }

        /// <summary>
        /// Gets or Sets AlertType
        /// </summary>
        [DataMember(Name="AlertType", EmitDefaultValue=false)]
        public GlobalAlertType AlertType { get; set; }

        /// <summary>
        /// Gets or Sets StreamInfo
        /// </summary>
        [DataMember(Name="StreamInfo", EmitDefaultValue=false)]
        public StreamInfo StreamInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlobalAlert {\n");
            sb.Append("  AlertKey: ").Append(AlertKey).Append("\n");
            sb.Append("  AlertHtml: ").Append(AlertHtml).Append("\n");
            sb.Append("  AlertTimestamp: ").Append(AlertTimestamp).Append("\n");
            sb.Append("  AlertLink: ").Append(AlertLink).Append("\n");
            sb.Append("  AlertLevel: ").Append(AlertLevel).Append("\n");
            sb.Append("  AlertType: ").Append(AlertType).Append("\n");
            sb.Append("  StreamInfo: ").Append(StreamInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlobalAlert);
        }

        /// <summary>
        /// Returns true if GlobalAlert instances are equal
        /// </summary>
        /// <param name="input">Instance of GlobalAlert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlobalAlert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AlertKey == input.AlertKey ||
                    (this.AlertKey != null &&
                    this.AlertKey.Equals(input.AlertKey))
                ) && 
                (
                    this.AlertHtml == input.AlertHtml ||
                    (this.AlertHtml != null &&
                    this.AlertHtml.Equals(input.AlertHtml))
                ) && 
                (
                    this.AlertTimestamp == input.AlertTimestamp ||
                    (this.AlertTimestamp != null &&
                    this.AlertTimestamp.Equals(input.AlertTimestamp))
                ) && 
                (
                    this.AlertLink == input.AlertLink ||
                    (this.AlertLink != null &&
                    this.AlertLink.Equals(input.AlertLink))
                ) && 
                (
                    this.AlertLevel == input.AlertLevel ||
                    (this.AlertLevel != null &&
                    this.AlertLevel.Equals(input.AlertLevel))
                ) && 
                (
                    this.AlertType == input.AlertType ||
                    (this.AlertType != null &&
                    this.AlertType.Equals(input.AlertType))
                ) && 
                (
                    this.StreamInfo == input.StreamInfo ||
                    (this.StreamInfo != null &&
                    this.StreamInfo.Equals(input.StreamInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlertKey != null)
                    hashCode = hashCode * 59 + this.AlertKey.GetHashCode();
                if (this.AlertHtml != null)
                    hashCode = hashCode * 59 + this.AlertHtml.GetHashCode();
                if (this.AlertTimestamp != null)
                    hashCode = hashCode * 59 + this.AlertTimestamp.GetHashCode();
                if (this.AlertLink != null)
                    hashCode = hashCode * 59 + this.AlertLink.GetHashCode();
                if (this.AlertLevel != null)
                    hashCode = hashCode * 59 + this.AlertLevel.GetHashCode();
                if (this.AlertType != null)
                    hashCode = hashCode * 59 + this.AlertType.GetHashCode();
                if (this.StreamInfo != null)
                    hashCode = hashCode * 59 + this.StreamInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
