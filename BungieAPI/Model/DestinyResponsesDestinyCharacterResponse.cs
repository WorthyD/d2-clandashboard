/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
    /// </summary>
    [DataContract]
    public partial class DestinyResponsesDestinyCharacterResponse :  IEquatable<DestinyResponsesDestinyCharacterResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyResponsesDestinyCharacterResponse" /> class.
        /// </summary>
        /// <param name="inventory">The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories.</param>
        /// <param name="character">Base information about the character in question.  COMPONENT TYPE: Characters.</param>
        /// <param name="progressions">Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions.</param>
        /// <param name="renderData">Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData.</param>
        /// <param name="activities">Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities.</param>
        /// <param name="equipment">Equipped items on the character.  COMPONENT TYPE: CharacterEquipment.</param>
        /// <param name="kiosks">Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks.</param>
        /// <param name="plugSets">When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets.</param>
        /// <param name="presentationNodes">COMPONENT TYPE: PresentationNodes.</param>
        /// <param name="records">COMPONENT TYPE: Records.</param>
        /// <param name="collectibles">COMPONENT TYPE: Collectibles.</param>
        /// <param name="itemComponents">The set of components belonging to the player&#39;s instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.].</param>
        /// <param name="uninstancedItemComponents">The set of components belonging to the player&#39;s UNinstanced items. Because apparently now those too can have information relevant to the character&#39;s state.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.].</param>
        /// <param name="currencyLookups">A \&quot;lookup\&quot; convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups.</param>
        public DestinyResponsesDestinyCharacterResponse(Object inventory = default(Object), Object character = default(Object), Object progressions = default(Object), Object renderData = default(Object), Object activities = default(Object), Object equipment = default(Object), Object kiosks = default(Object), Object plugSets = default(Object), Object presentationNodes = default(Object), Object records = default(Object), Object collectibles = default(Object), Object itemComponents = default(Object), Object uninstancedItemComponents = default(Object), Object currencyLookups = default(Object))
        {
            this.Inventory = inventory;
            this.Character = character;
            this.Progressions = progressions;
            this.RenderData = renderData;
            this.Activities = activities;
            this.Equipment = equipment;
            this.Kiosks = kiosks;
            this.PlugSets = plugSets;
            this.PresentationNodes = presentationNodes;
            this.Records = records;
            this.Collectibles = collectibles;
            this.ItemComponents = itemComponents;
            this.UninstancedItemComponents = uninstancedItemComponents;
            this.CurrencyLookups = currencyLookups;
        }
        
        /// <summary>
        /// The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories
        /// </summary>
        /// <value>The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories</value>
        [DataMember(Name="inventory", EmitDefaultValue=false)]
        public Object Inventory { get; set; }

        /// <summary>
        /// Base information about the character in question.  COMPONENT TYPE: Characters
        /// </summary>
        /// <value>Base information about the character in question.  COMPONENT TYPE: Characters</value>
        [DataMember(Name="character", EmitDefaultValue=false)]
        public Object Character { get; set; }

        /// <summary>
        /// Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions
        /// </summary>
        /// <value>Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions</value>
        [DataMember(Name="progressions", EmitDefaultValue=false)]
        public Object Progressions { get; set; }

        /// <summary>
        /// Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData
        /// </summary>
        /// <value>Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData</value>
        [DataMember(Name="renderData", EmitDefaultValue=false)]
        public Object RenderData { get; set; }

        /// <summary>
        /// Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities
        /// </summary>
        /// <value>Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities</value>
        [DataMember(Name="activities", EmitDefaultValue=false)]
        public Object Activities { get; set; }

        /// <summary>
        /// Equipped items on the character.  COMPONENT TYPE: CharacterEquipment
        /// </summary>
        /// <value>Equipped items on the character.  COMPONENT TYPE: CharacterEquipment</value>
        [DataMember(Name="equipment", EmitDefaultValue=false)]
        public Object Equipment { get; set; }

        /// <summary>
        /// Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks
        /// </summary>
        /// <value>Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks</value>
        [DataMember(Name="kiosks", EmitDefaultValue=false)]
        public Object Kiosks { get; set; }

        /// <summary>
        /// When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets
        /// </summary>
        /// <value>When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets</value>
        [DataMember(Name="plugSets", EmitDefaultValue=false)]
        public Object PlugSets { get; set; }

        /// <summary>
        /// COMPONENT TYPE: PresentationNodes
        /// </summary>
        /// <value>COMPONENT TYPE: PresentationNodes</value>
        [DataMember(Name="presentationNodes", EmitDefaultValue=false)]
        public Object PresentationNodes { get; set; }

        /// <summary>
        /// COMPONENT TYPE: Records
        /// </summary>
        /// <value>COMPONENT TYPE: Records</value>
        [DataMember(Name="records", EmitDefaultValue=false)]
        public Object Records { get; set; }

        /// <summary>
        /// COMPONENT TYPE: Collectibles
        /// </summary>
        /// <value>COMPONENT TYPE: Collectibles</value>
        [DataMember(Name="collectibles", EmitDefaultValue=false)]
        public Object Collectibles { get; set; }

        /// <summary>
        /// The set of components belonging to the player&#39;s instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
        /// </summary>
        /// <value>The set of components belonging to the player&#39;s instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</value>
        [DataMember(Name="itemComponents", EmitDefaultValue=false)]
        public Object ItemComponents { get; set; }

        /// <summary>
        /// The set of components belonging to the player&#39;s UNinstanced items. Because apparently now those too can have information relevant to the character&#39;s state.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
        /// </summary>
        /// <value>The set of components belonging to the player&#39;s UNinstanced items. Because apparently now those too can have information relevant to the character&#39;s state.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</value>
        [DataMember(Name="uninstancedItemComponents", EmitDefaultValue=false)]
        public Object UninstancedItemComponents { get; set; }

        /// <summary>
        /// A \&quot;lookup\&quot; convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
        /// </summary>
        /// <value>A \&quot;lookup\&quot; convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups</value>
        [DataMember(Name="currencyLookups", EmitDefaultValue=false)]
        public Object CurrencyLookups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyResponsesDestinyCharacterResponse {\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  Character: ").Append(Character).Append("\n");
            sb.Append("  Progressions: ").Append(Progressions).Append("\n");
            sb.Append("  RenderData: ").Append(RenderData).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Equipment: ").Append(Equipment).Append("\n");
            sb.Append("  Kiosks: ").Append(Kiosks).Append("\n");
            sb.Append("  PlugSets: ").Append(PlugSets).Append("\n");
            sb.Append("  PresentationNodes: ").Append(PresentationNodes).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  Collectibles: ").Append(Collectibles).Append("\n");
            sb.Append("  ItemComponents: ").Append(ItemComponents).Append("\n");
            sb.Append("  UninstancedItemComponents: ").Append(UninstancedItemComponents).Append("\n");
            sb.Append("  CurrencyLookups: ").Append(CurrencyLookups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyResponsesDestinyCharacterResponse);
        }

        /// <summary>
        /// Returns true if DestinyResponsesDestinyCharacterResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyResponsesDestinyCharacterResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyResponsesDestinyCharacterResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Inventory == input.Inventory ||
                    (this.Inventory != null &&
                    this.Inventory.Equals(input.Inventory))
                ) && 
                (
                    this.Character == input.Character ||
                    (this.Character != null &&
                    this.Character.Equals(input.Character))
                ) && 
                (
                    this.Progressions == input.Progressions ||
                    (this.Progressions != null &&
                    this.Progressions.Equals(input.Progressions))
                ) && 
                (
                    this.RenderData == input.RenderData ||
                    (this.RenderData != null &&
                    this.RenderData.Equals(input.RenderData))
                ) && 
                (
                    this.Activities == input.Activities ||
                    (this.Activities != null &&
                    this.Activities.Equals(input.Activities))
                ) && 
                (
                    this.Equipment == input.Equipment ||
                    (this.Equipment != null &&
                    this.Equipment.Equals(input.Equipment))
                ) && 
                (
                    this.Kiosks == input.Kiosks ||
                    (this.Kiosks != null &&
                    this.Kiosks.Equals(input.Kiosks))
                ) && 
                (
                    this.PlugSets == input.PlugSets ||
                    (this.PlugSets != null &&
                    this.PlugSets.Equals(input.PlugSets))
                ) && 
                (
                    this.PresentationNodes == input.PresentationNodes ||
                    (this.PresentationNodes != null &&
                    this.PresentationNodes.Equals(input.PresentationNodes))
                ) && 
                (
                    this.Records == input.Records ||
                    (this.Records != null &&
                    this.Records.Equals(input.Records))
                ) && 
                (
                    this.Collectibles == input.Collectibles ||
                    (this.Collectibles != null &&
                    this.Collectibles.Equals(input.Collectibles))
                ) && 
                (
                    this.ItemComponents == input.ItemComponents ||
                    (this.ItemComponents != null &&
                    this.ItemComponents.Equals(input.ItemComponents))
                ) && 
                (
                    this.UninstancedItemComponents == input.UninstancedItemComponents ||
                    (this.UninstancedItemComponents != null &&
                    this.UninstancedItemComponents.Equals(input.UninstancedItemComponents))
                ) && 
                (
                    this.CurrencyLookups == input.CurrencyLookups ||
                    (this.CurrencyLookups != null &&
                    this.CurrencyLookups.Equals(input.CurrencyLookups))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                if (this.Character != null)
                    hashCode = hashCode * 59 + this.Character.GetHashCode();
                if (this.Progressions != null)
                    hashCode = hashCode * 59 + this.Progressions.GetHashCode();
                if (this.RenderData != null)
                    hashCode = hashCode * 59 + this.RenderData.GetHashCode();
                if (this.Activities != null)
                    hashCode = hashCode * 59 + this.Activities.GetHashCode();
                if (this.Equipment != null)
                    hashCode = hashCode * 59 + this.Equipment.GetHashCode();
                if (this.Kiosks != null)
                    hashCode = hashCode * 59 + this.Kiosks.GetHashCode();
                if (this.PlugSets != null)
                    hashCode = hashCode * 59 + this.PlugSets.GetHashCode();
                if (this.PresentationNodes != null)
                    hashCode = hashCode * 59 + this.PresentationNodes.GetHashCode();
                if (this.Records != null)
                    hashCode = hashCode * 59 + this.Records.GetHashCode();
                if (this.Collectibles != null)
                    hashCode = hashCode * 59 + this.Collectibles.GetHashCode();
                if (this.ItemComponents != null)
                    hashCode = hashCode * 59 + this.ItemComponents.GetHashCode();
                if (this.UninstancedItemComponents != null)
                    hashCode = hashCode * 59 + this.UninstancedItemComponents.GetHashCode();
                if (this.CurrencyLookups != null)
                    hashCode = hashCode * 59 + this.CurrencyLookups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
