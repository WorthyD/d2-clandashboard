/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// DestinyMilestonesDestinyMilestoneChallengeActivity
    /// </summary>
    [DataContract]
    public partial class DestinyMilestonesDestinyMilestoneChallengeActivity :  IEquatable<DestinyMilestonesDestinyMilestoneChallengeActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyMilestonesDestinyMilestoneChallengeActivity" /> class.
        /// </summary>
        /// <param name="ActivityHash">ActivityHash.</param>
        /// <param name="Challenges">Challenges.</param>
        /// <param name="ModifierHashes">If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what&#39;s really live..</param>
        /// <param name="LoadoutRequirementIndex">If returned, this is the index into the DestinyActivityDefinition&#39;s \&quot;loadouts\&quot; property, indicating the currently active loadout requirements..</param>
        /// <param name="Phases">If the Activity has discrete \&quot;phases\&quot; that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity..</param>
        public DestinyMilestonesDestinyMilestoneChallengeActivity(uint? ActivityHash = default(uint?), List<DestinyChallengesDestinyChallengeStatus> Challenges = default(List<DestinyChallengesDestinyChallengeStatus>), List<uint?> ModifierHashes = default(List<uint?>), int? LoadoutRequirementIndex = default(int?), List<DestinyMilestonesDestinyMilestoneActivityPhase> Phases = default(List<DestinyMilestonesDestinyMilestoneActivityPhase>))
        {
            this.ActivityHash = ActivityHash;
            this.Challenges = Challenges;
            this.ModifierHashes = ModifierHashes;
            this.LoadoutRequirementIndex = LoadoutRequirementIndex;
            this.Phases = Phases;
        }
        
        /// <summary>
        /// Gets or Sets ActivityHash
        /// </summary>
        [DataMember(Name="activityHash", EmitDefaultValue=false)]
        public uint? ActivityHash { get; set; }

        /// <summary>
        /// Gets or Sets Challenges
        /// </summary>
        [DataMember(Name="challenges", EmitDefaultValue=false)]
        public List<DestinyChallengesDestinyChallengeStatus> Challenges { get; set; }

        /// <summary>
        /// If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what&#39;s really live.
        /// </summary>
        /// <value>If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what&#39;s really live.</value>
        [DataMember(Name="modifierHashes", EmitDefaultValue=false)]
        public List<uint?> ModifierHashes { get; set; }

        /// <summary>
        /// If returned, this is the index into the DestinyActivityDefinition&#39;s \&quot;loadouts\&quot; property, indicating the currently active loadout requirements.
        /// </summary>
        /// <value>If returned, this is the index into the DestinyActivityDefinition&#39;s \&quot;loadouts\&quot; property, indicating the currently active loadout requirements.</value>
        [DataMember(Name="loadoutRequirementIndex", EmitDefaultValue=false)]
        public int? LoadoutRequirementIndex { get; set; }

        /// <summary>
        /// If the Activity has discrete \&quot;phases\&quot; that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.
        /// </summary>
        /// <value>If the Activity has discrete \&quot;phases\&quot; that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.</value>
        [DataMember(Name="phases", EmitDefaultValue=false)]
        public List<DestinyMilestonesDestinyMilestoneActivityPhase> Phases { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyMilestonesDestinyMilestoneChallengeActivity {\n");
            sb.Append("  ActivityHash: ").Append(ActivityHash).Append("\n");
            sb.Append("  Challenges: ").Append(Challenges).Append("\n");
            sb.Append("  ModifierHashes: ").Append(ModifierHashes).Append("\n");
            sb.Append("  LoadoutRequirementIndex: ").Append(LoadoutRequirementIndex).Append("\n");
            sb.Append("  Phases: ").Append(Phases).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyMilestonesDestinyMilestoneChallengeActivity);
        }

        /// <summary>
        /// Returns true if DestinyMilestonesDestinyMilestoneChallengeActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyMilestonesDestinyMilestoneChallengeActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyMilestonesDestinyMilestoneChallengeActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityHash == input.ActivityHash ||
                    (this.ActivityHash != null &&
                    this.ActivityHash.Equals(input.ActivityHash))
                ) && 
                (
                    this.Challenges == input.Challenges ||
                    this.Challenges != null &&
                    this.Challenges.SequenceEqual(input.Challenges)
                ) && 
                (
                    this.ModifierHashes == input.ModifierHashes ||
                    this.ModifierHashes != null &&
                    this.ModifierHashes.SequenceEqual(input.ModifierHashes)
                ) && 
                (
                    this.LoadoutRequirementIndex == input.LoadoutRequirementIndex ||
                    (this.LoadoutRequirementIndex != null &&
                    this.LoadoutRequirementIndex.Equals(input.LoadoutRequirementIndex))
                ) && 
                (
                    this.Phases == input.Phases ||
                    this.Phases != null &&
                    this.Phases.SequenceEqual(input.Phases)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityHash != null)
                    hashCode = hashCode * 59 + this.ActivityHash.GetHashCode();
                if (this.Challenges != null)
                    hashCode = hashCode * 59 + this.Challenges.GetHashCode();
                if (this.ModifierHashes != null)
                    hashCode = hashCode * 59 + this.ModifierHashes.GetHashCode();
                if (this.LoadoutRequirementIndex != null)
                    hashCode = hashCode * 59 + this.LoadoutRequirementIndex.GetHashCode();
                if (this.Phases != null)
                    hashCode = hashCode * 59 + this.Phases.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
