/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// Represents the possible components that can be returned from Destiny \&quot;Get\&quot; calls such as GetProfile, GetCharacter, GetVendor etc...  When making one of these requests, you will pass one or more of these components as a comma separated list in the \&quot;?components&#x3D;\&quot; querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \&quot;?components&#x3D;Profiles,Characters,CharacterProgressions\&quot; You may use either the numerical or string values.
    /// </summary>
    /// <value>Represents the possible components that can be returned from Destiny \&quot;Get\&quot; calls such as GetProfile, GetCharacter, GetVendor etc...  When making one of these requests, you will pass one or more of these components as a comma separated list in the \&quot;?components&#x3D;\&quot; querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \&quot;?components&#x3D;Profiles,Characters,CharacterProgressions\&quot; You may use either the numerical or string values.</value>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum DestinyDestinyComponentType
    {
        
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        [EnumMember(Value = "0")]
        NUMBER_0 = 1,
        
        /// <summary>
        /// Enum NUMBER_100 for value: 100
        /// </summary>
        [EnumMember(Value = "100")]
        NUMBER_100 = 2,
        
        /// <summary>
        /// Enum NUMBER_101 for value: 101
        /// </summary>
        [EnumMember(Value = "101")]
        NUMBER_101 = 3,
        
        /// <summary>
        /// Enum NUMBER_102 for value: 102
        /// </summary>
        [EnumMember(Value = "102")]
        NUMBER_102 = 4,
        
        /// <summary>
        /// Enum NUMBER_103 for value: 103
        /// </summary>
        [EnumMember(Value = "103")]
        NUMBER_103 = 5,
        
        /// <summary>
        /// Enum NUMBER_104 for value: 104
        /// </summary>
        [EnumMember(Value = "104")]
        NUMBER_104 = 6,
        
        /// <summary>
        /// Enum NUMBER_200 for value: 200
        /// </summary>
        [EnumMember(Value = "200")]
        NUMBER_200 = 7,
        
        /// <summary>
        /// Enum NUMBER_201 for value: 201
        /// </summary>
        [EnumMember(Value = "201")]
        NUMBER_201 = 8,
        
        /// <summary>
        /// Enum NUMBER_202 for value: 202
        /// </summary>
        [EnumMember(Value = "202")]
        NUMBER_202 = 9,
        
        /// <summary>
        /// Enum NUMBER_203 for value: 203
        /// </summary>
        [EnumMember(Value = "203")]
        NUMBER_203 = 10,
        
        /// <summary>
        /// Enum NUMBER_204 for value: 204
        /// </summary>
        [EnumMember(Value = "204")]
        NUMBER_204 = 11,
        
        /// <summary>
        /// Enum NUMBER_205 for value: 205
        /// </summary>
        [EnumMember(Value = "205")]
        NUMBER_205 = 12,
        
        /// <summary>
        /// Enum NUMBER_300 for value: 300
        /// </summary>
        [EnumMember(Value = "300")]
        NUMBER_300 = 13,
        
        /// <summary>
        /// Enum NUMBER_301 for value: 301
        /// </summary>
        [EnumMember(Value = "301")]
        NUMBER_301 = 14,
        
        /// <summary>
        /// Enum NUMBER_302 for value: 302
        /// </summary>
        [EnumMember(Value = "302")]
        NUMBER_302 = 15,
        
        /// <summary>
        /// Enum NUMBER_303 for value: 303
        /// </summary>
        [EnumMember(Value = "303")]
        NUMBER_303 = 16,
        
        /// <summary>
        /// Enum NUMBER_304 for value: 304
        /// </summary>
        [EnumMember(Value = "304")]
        NUMBER_304 = 17,
        
        /// <summary>
        /// Enum NUMBER_305 for value: 305
        /// </summary>
        [EnumMember(Value = "305")]
        NUMBER_305 = 18,
        
        /// <summary>
        /// Enum NUMBER_306 for value: 306
        /// </summary>
        [EnumMember(Value = "306")]
        NUMBER_306 = 19,
        
        /// <summary>
        /// Enum NUMBER_307 for value: 307
        /// </summary>
        [EnumMember(Value = "307")]
        NUMBER_307 = 20,
        
        /// <summary>
        /// Enum NUMBER_308 for value: 308
        /// </summary>
        [EnumMember(Value = "308")]
        NUMBER_308 = 21,
        
        /// <summary>
        /// Enum NUMBER_400 for value: 400
        /// </summary>
        [EnumMember(Value = "400")]
        NUMBER_400 = 22,
        
        /// <summary>
        /// Enum NUMBER_401 for value: 401
        /// </summary>
        [EnumMember(Value = "401")]
        NUMBER_401 = 23,
        
        /// <summary>
        /// Enum NUMBER_402 for value: 402
        /// </summary>
        [EnumMember(Value = "402")]
        NUMBER_402 = 24,
        
        /// <summary>
        /// Enum NUMBER_500 for value: 500
        /// </summary>
        [EnumMember(Value = "500")]
        NUMBER_500 = 25,
        
        /// <summary>
        /// Enum NUMBER_600 for value: 600
        /// </summary>
        [EnumMember(Value = "600")]
        NUMBER_600 = 26,
        
        /// <summary>
        /// Enum NUMBER_700 for value: 700
        /// </summary>
        [EnumMember(Value = "700")]
        NUMBER_700 = 27,
        
        /// <summary>
        /// Enum NUMBER_800 for value: 800
        /// </summary>
        [EnumMember(Value = "800")]
        NUMBER_800 = 28,
        
        /// <summary>
        /// Enum NUMBER_900 for value: 900
        /// </summary>
        [EnumMember(Value = "900")]
        NUMBER_900 = 29
    }

}
