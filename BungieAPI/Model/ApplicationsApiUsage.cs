/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// ApplicationsApiUsage
    /// </summary>
    [DataContract]
    public partial class ApplicationsApiUsage :  IEquatable<ApplicationsApiUsage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApiUsage" /> class.
        /// </summary>
        /// <param name="range">The date range for the data being reported..</param>
        /// <param name="apiCalls">Counts for on API calls made for the time range..</param>
        /// <param name="throttledRequests">Instances of blocked requests or requests that crossed the warn threshold during the time range..</param>
        public ApplicationsApiUsage(Object range = default(Object), List<ApplicationsSeries> apiCalls = default(List<ApplicationsSeries>), List<ApplicationsSeries> throttledRequests = default(List<ApplicationsSeries>))
        {
            this.Range = range;
            this.ApiCalls = apiCalls;
            this.ThrottledRequests = throttledRequests;
        }
        
        /// <summary>
        /// The date range for the data being reported.
        /// </summary>
        /// <value>The date range for the data being reported.</value>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public Object Range { get; set; }

        /// <summary>
        /// Counts for on API calls made for the time range.
        /// </summary>
        /// <value>Counts for on API calls made for the time range.</value>
        [DataMember(Name="apiCalls", EmitDefaultValue=false)]
        public List<ApplicationsSeries> ApiCalls { get; set; }

        /// <summary>
        /// Instances of blocked requests or requests that crossed the warn threshold during the time range.
        /// </summary>
        /// <value>Instances of blocked requests or requests that crossed the warn threshold during the time range.</value>
        [DataMember(Name="throttledRequests", EmitDefaultValue=false)]
        public List<ApplicationsSeries> ThrottledRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationsApiUsage {\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  ApiCalls: ").Append(ApiCalls).Append("\n");
            sb.Append("  ThrottledRequests: ").Append(ThrottledRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationsApiUsage);
        }

        /// <summary>
        /// Returns true if ApplicationsApiUsage instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationsApiUsage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationsApiUsage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.ApiCalls == input.ApiCalls ||
                    this.ApiCalls != null &&
                    this.ApiCalls.SequenceEqual(input.ApiCalls)
                ) && 
                (
                    this.ThrottledRequests == input.ThrottledRequests ||
                    this.ThrottledRequests != null &&
                    this.ThrottledRequests.SequenceEqual(input.ThrottledRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.ApiCalls != null)
                    hashCode = hashCode * 59 + this.ApiCalls.GetHashCode();
                if (this.ThrottledRequests != null)
                    hashCode = hashCode * 59 + this.ThrottledRequests.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
