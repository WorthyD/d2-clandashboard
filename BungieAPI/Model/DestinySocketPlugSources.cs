/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// Indicates how a socket is populated, and where you should look for valid plug data. This is a flags enumeration field, as you may have to look in multiple sources across multiple components for valid plugs.
    /// </summary>
    /// <value>Indicates how a socket is populated, and where you should look for valid plug data. This is a flags enumeration field, as you may have to look in multiple sources across multiple components for valid plugs.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DestinySocketPlugSources
    {
        
		/// <summary>
		/// If there&#39;s no way we can detect to insert new plugs.
		/// </summary>
		[EnumMember(Value = "0")]
        None,
        
		/// <summary>
		/// Use plugs found in the player&#39;s inventory, based on the socket type rules (see DestinySocketTypeDefinition for more info)
//Note that a socket - like Shaders - can have *both* reusable plugs and inventory items inserted theoretically.
		/// </summary>
		[EnumMember(Value = "1")]
        InventorySourced,
        
		/// <summary>
		/// Use the DestinyItemSocketsComponent.sockets.reusablePlugs property to determine which plugs are valid for this socket.
		/// </summary>
		[EnumMember(Value = "2")]
        ReusablePlugItems,
        
		/// <summary>
		/// Use the ProfilePlugSets component data to determine which plugs are valid for this socket.
		/// </summary>
		[EnumMember(Value = "4")]
        ProfilePlugSet,
        
		/// <summary>
		/// Use the CharacterPlugSets component data to determine which plugs are valid for this socket.
		/// </summary>
		[EnumMember(Value = "8")]
        CharacterPlugSet
    }

}
