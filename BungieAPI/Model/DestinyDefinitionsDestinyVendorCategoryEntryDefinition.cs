/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// This is the definition for a single Vendor Category, into which Sale Items are grouped.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyVendorCategoryEntryDefinition :  IEquatable<DestinyDefinitionsDestinyVendorCategoryEntryDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorCategoryEntryDefinition" /> class.
        /// </summary>
        /// <param name="categoryIndex">The index of the category in the original category definitions for the vendor..</param>
        /// <param name="categoryId">The string identifier of the category..</param>
        /// <param name="sortValue">Used in sorting items in vendors... but there&#39;s a lot more to it. Just go with the order provided in the itemIndexes property on the DestinyVendorCategoryComponent instead, it should be more reliable than trying to recalculate it yourself..</param>
        /// <param name="categoryHash">The hashed identifier for the category..</param>
        /// <param name="quantityAvailable">The amount of items that will be available when this category is shown..</param>
        /// <param name="showUnavailableItems">If items aren&#39;t up for sale in this category, should we still show them (greyed out)?.</param>
        /// <param name="hideIfNoCurrency">If you don&#39;t have the currency required to buy items from this category, should the items be hidden?.</param>
        /// <param name="hideFromRegularPurchase">True if this category doesn&#39;t allow purchases..</param>
        /// <param name="buyStringOverride">The localized string for making purchases from this category, if it is different from the vendor&#39;s string for purchasing..</param>
        /// <param name="disabledDescription">If the category is disabled, this is the localized description to show..</param>
        /// <param name="displayTitle">The localized title of the category..</param>
        /// <param name="overlay">If this category has an overlay prompt that should appear, this contains the details of that prompt..</param>
        /// <param name="vendorItemIndexes">A shortcut for the vendor item indexes sold under this category. Saves us from some expensive reorganization at runtime..</param>
        /// <param name="isPreview">Sometimes a category isn&#39;t actually used to sell items, but rather to preview them. This implies different UI (and manual placement of the category in the UI) in the game, and special treatment..</param>
        /// <param name="isDisplayOnly">If true, this category only displays items: you can&#39;t purchase anything in them..</param>
        /// <param name="resetIntervalMinutesOverride">resetIntervalMinutesOverride.</param>
        /// <param name="resetOffsetMinutesOverride">resetOffsetMinutesOverride.</param>
        public DestinyDefinitionsDestinyVendorCategoryEntryDefinition(int? categoryIndex = default(int?), string categoryId = default(string), int? sortValue = default(int?), int? categoryHash = default(int?), int? quantityAvailable = default(int?), bool? showUnavailableItems = default(bool?), bool? hideIfNoCurrency = default(bool?), bool? hideFromRegularPurchase = default(bool?), string buyStringOverride = default(string), string disabledDescription = default(string), string displayTitle = default(string), Object overlay = default(Object), List<int?> vendorItemIndexes = default(List<int?>), bool? isPreview = default(bool?), bool? isDisplayOnly = default(bool?), int? resetIntervalMinutesOverride = default(int?), int? resetOffsetMinutesOverride = default(int?))
        {
            this.CategoryIndex = categoryIndex;
            this.CategoryId = categoryId;
            this.SortValue = sortValue;
            this.CategoryHash = categoryHash;
            this.QuantityAvailable = quantityAvailable;
            this.ShowUnavailableItems = showUnavailableItems;
            this.HideIfNoCurrency = hideIfNoCurrency;
            this.HideFromRegularPurchase = hideFromRegularPurchase;
            this.BuyStringOverride = buyStringOverride;
            this.DisabledDescription = disabledDescription;
            this.DisplayTitle = displayTitle;
            this.Overlay = overlay;
            this.VendorItemIndexes = vendorItemIndexes;
            this.IsPreview = isPreview;
            this.IsDisplayOnly = isDisplayOnly;
            this.ResetIntervalMinutesOverride = resetIntervalMinutesOverride;
            this.ResetOffsetMinutesOverride = resetOffsetMinutesOverride;
        }
        
        /// <summary>
        /// The index of the category in the original category definitions for the vendor.
        /// </summary>
        /// <value>The index of the category in the original category definitions for the vendor.</value>
        [DataMember(Name="categoryIndex", EmitDefaultValue=false)]
        public int? CategoryIndex { get; set; }

        /// <summary>
        /// The string identifier of the category.
        /// </summary>
        /// <value>The string identifier of the category.</value>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public string CategoryId { get; set; }

        /// <summary>
        /// Used in sorting items in vendors... but there&#39;s a lot more to it. Just go with the order provided in the itemIndexes property on the DestinyVendorCategoryComponent instead, it should be more reliable than trying to recalculate it yourself.
        /// </summary>
        /// <value>Used in sorting items in vendors... but there&#39;s a lot more to it. Just go with the order provided in the itemIndexes property on the DestinyVendorCategoryComponent instead, it should be more reliable than trying to recalculate it yourself.</value>
        [DataMember(Name="sortValue", EmitDefaultValue=false)]
        public int? SortValue { get; set; }

        /// <summary>
        /// The hashed identifier for the category.
        /// </summary>
        /// <value>The hashed identifier for the category.</value>
        [DataMember(Name="categoryHash", EmitDefaultValue=false)]
        public int? CategoryHash { get; set; }

        /// <summary>
        /// The amount of items that will be available when this category is shown.
        /// </summary>
        /// <value>The amount of items that will be available when this category is shown.</value>
        [DataMember(Name="quantityAvailable", EmitDefaultValue=false)]
        public int? QuantityAvailable { get; set; }

        /// <summary>
        /// If items aren&#39;t up for sale in this category, should we still show them (greyed out)?
        /// </summary>
        /// <value>If items aren&#39;t up for sale in this category, should we still show them (greyed out)?</value>
        [DataMember(Name="showUnavailableItems", EmitDefaultValue=false)]
        public bool? ShowUnavailableItems { get; set; }

        /// <summary>
        /// If you don&#39;t have the currency required to buy items from this category, should the items be hidden?
        /// </summary>
        /// <value>If you don&#39;t have the currency required to buy items from this category, should the items be hidden?</value>
        [DataMember(Name="hideIfNoCurrency", EmitDefaultValue=false)]
        public bool? HideIfNoCurrency { get; set; }

        /// <summary>
        /// True if this category doesn&#39;t allow purchases.
        /// </summary>
        /// <value>True if this category doesn&#39;t allow purchases.</value>
        [DataMember(Name="hideFromRegularPurchase", EmitDefaultValue=false)]
        public bool? HideFromRegularPurchase { get; set; }

        /// <summary>
        /// The localized string for making purchases from this category, if it is different from the vendor&#39;s string for purchasing.
        /// </summary>
        /// <value>The localized string for making purchases from this category, if it is different from the vendor&#39;s string for purchasing.</value>
        [DataMember(Name="buyStringOverride", EmitDefaultValue=false)]
        public string BuyStringOverride { get; set; }

        /// <summary>
        /// If the category is disabled, this is the localized description to show.
        /// </summary>
        /// <value>If the category is disabled, this is the localized description to show.</value>
        [DataMember(Name="disabledDescription", EmitDefaultValue=false)]
        public string DisabledDescription { get; set; }

        /// <summary>
        /// The localized title of the category.
        /// </summary>
        /// <value>The localized title of the category.</value>
        [DataMember(Name="displayTitle", EmitDefaultValue=false)]
        public string DisplayTitle { get; set; }

        /// <summary>
        /// If this category has an overlay prompt that should appear, this contains the details of that prompt.
        /// </summary>
        /// <value>If this category has an overlay prompt that should appear, this contains the details of that prompt.</value>
        [DataMember(Name="overlay", EmitDefaultValue=false)]
        public Object Overlay { get; set; }

        /// <summary>
        /// A shortcut for the vendor item indexes sold under this category. Saves us from some expensive reorganization at runtime.
        /// </summary>
        /// <value>A shortcut for the vendor item indexes sold under this category. Saves us from some expensive reorganization at runtime.</value>
        [DataMember(Name="vendorItemIndexes", EmitDefaultValue=false)]
        public List<int?> VendorItemIndexes { get; set; }

        /// <summary>
        /// Sometimes a category isn&#39;t actually used to sell items, but rather to preview them. This implies different UI (and manual placement of the category in the UI) in the game, and special treatment.
        /// </summary>
        /// <value>Sometimes a category isn&#39;t actually used to sell items, but rather to preview them. This implies different UI (and manual placement of the category in the UI) in the game, and special treatment.</value>
        [DataMember(Name="isPreview", EmitDefaultValue=false)]
        public bool? IsPreview { get; set; }

        /// <summary>
        /// If true, this category only displays items: you can&#39;t purchase anything in them.
        /// </summary>
        /// <value>If true, this category only displays items: you can&#39;t purchase anything in them.</value>
        [DataMember(Name="isDisplayOnly", EmitDefaultValue=false)]
        public bool? IsDisplayOnly { get; set; }

        /// <summary>
        /// Gets or Sets ResetIntervalMinutesOverride
        /// </summary>
        [DataMember(Name="resetIntervalMinutesOverride", EmitDefaultValue=false)]
        public int? ResetIntervalMinutesOverride { get; set; }

        /// <summary>
        /// Gets or Sets ResetOffsetMinutesOverride
        /// </summary>
        [DataMember(Name="resetOffsetMinutesOverride", EmitDefaultValue=false)]
        public int? ResetOffsetMinutesOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorCategoryEntryDefinition {\n");
            sb.Append("  CategoryIndex: ").Append(CategoryIndex).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  SortValue: ").Append(SortValue).Append("\n");
            sb.Append("  CategoryHash: ").Append(CategoryHash).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  ShowUnavailableItems: ").Append(ShowUnavailableItems).Append("\n");
            sb.Append("  HideIfNoCurrency: ").Append(HideIfNoCurrency).Append("\n");
            sb.Append("  HideFromRegularPurchase: ").Append(HideFromRegularPurchase).Append("\n");
            sb.Append("  BuyStringOverride: ").Append(BuyStringOverride).Append("\n");
            sb.Append("  DisabledDescription: ").Append(DisabledDescription).Append("\n");
            sb.Append("  DisplayTitle: ").Append(DisplayTitle).Append("\n");
            sb.Append("  Overlay: ").Append(Overlay).Append("\n");
            sb.Append("  VendorItemIndexes: ").Append(VendorItemIndexes).Append("\n");
            sb.Append("  IsPreview: ").Append(IsPreview).Append("\n");
            sb.Append("  IsDisplayOnly: ").Append(IsDisplayOnly).Append("\n");
            sb.Append("  ResetIntervalMinutesOverride: ").Append(ResetIntervalMinutesOverride).Append("\n");
            sb.Append("  ResetOffsetMinutesOverride: ").Append(ResetOffsetMinutesOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorCategoryEntryDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorCategoryEntryDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorCategoryEntryDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorCategoryEntryDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryIndex == input.CategoryIndex ||
                    (this.CategoryIndex != null &&
                    this.CategoryIndex.Equals(input.CategoryIndex))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.SortValue == input.SortValue ||
                    (this.SortValue != null &&
                    this.SortValue.Equals(input.SortValue))
                ) && 
                (
                    this.CategoryHash == input.CategoryHash ||
                    (this.CategoryHash != null &&
                    this.CategoryHash.Equals(input.CategoryHash))
                ) && 
                (
                    this.QuantityAvailable == input.QuantityAvailable ||
                    (this.QuantityAvailable != null &&
                    this.QuantityAvailable.Equals(input.QuantityAvailable))
                ) && 
                (
                    this.ShowUnavailableItems == input.ShowUnavailableItems ||
                    (this.ShowUnavailableItems != null &&
                    this.ShowUnavailableItems.Equals(input.ShowUnavailableItems))
                ) && 
                (
                    this.HideIfNoCurrency == input.HideIfNoCurrency ||
                    (this.HideIfNoCurrency != null &&
                    this.HideIfNoCurrency.Equals(input.HideIfNoCurrency))
                ) && 
                (
                    this.HideFromRegularPurchase == input.HideFromRegularPurchase ||
                    (this.HideFromRegularPurchase != null &&
                    this.HideFromRegularPurchase.Equals(input.HideFromRegularPurchase))
                ) && 
                (
                    this.BuyStringOverride == input.BuyStringOverride ||
                    (this.BuyStringOverride != null &&
                    this.BuyStringOverride.Equals(input.BuyStringOverride))
                ) && 
                (
                    this.DisabledDescription == input.DisabledDescription ||
                    (this.DisabledDescription != null &&
                    this.DisabledDescription.Equals(input.DisabledDescription))
                ) && 
                (
                    this.DisplayTitle == input.DisplayTitle ||
                    (this.DisplayTitle != null &&
                    this.DisplayTitle.Equals(input.DisplayTitle))
                ) && 
                (
                    this.Overlay == input.Overlay ||
                    (this.Overlay != null &&
                    this.Overlay.Equals(input.Overlay))
                ) && 
                (
                    this.VendorItemIndexes == input.VendorItemIndexes ||
                    this.VendorItemIndexes != null &&
                    this.VendorItemIndexes.SequenceEqual(input.VendorItemIndexes)
                ) && 
                (
                    this.IsPreview == input.IsPreview ||
                    (this.IsPreview != null &&
                    this.IsPreview.Equals(input.IsPreview))
                ) && 
                (
                    this.IsDisplayOnly == input.IsDisplayOnly ||
                    (this.IsDisplayOnly != null &&
                    this.IsDisplayOnly.Equals(input.IsDisplayOnly))
                ) && 
                (
                    this.ResetIntervalMinutesOverride == input.ResetIntervalMinutesOverride ||
                    (this.ResetIntervalMinutesOverride != null &&
                    this.ResetIntervalMinutesOverride.Equals(input.ResetIntervalMinutesOverride))
                ) && 
                (
                    this.ResetOffsetMinutesOverride == input.ResetOffsetMinutesOverride ||
                    (this.ResetOffsetMinutesOverride != null &&
                    this.ResetOffsetMinutesOverride.Equals(input.ResetOffsetMinutesOverride))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryIndex != null)
                    hashCode = hashCode * 59 + this.CategoryIndex.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.SortValue != null)
                    hashCode = hashCode * 59 + this.SortValue.GetHashCode();
                if (this.CategoryHash != null)
                    hashCode = hashCode * 59 + this.CategoryHash.GetHashCode();
                if (this.QuantityAvailable != null)
                    hashCode = hashCode * 59 + this.QuantityAvailable.GetHashCode();
                if (this.ShowUnavailableItems != null)
                    hashCode = hashCode * 59 + this.ShowUnavailableItems.GetHashCode();
                if (this.HideIfNoCurrency != null)
                    hashCode = hashCode * 59 + this.HideIfNoCurrency.GetHashCode();
                if (this.HideFromRegularPurchase != null)
                    hashCode = hashCode * 59 + this.HideFromRegularPurchase.GetHashCode();
                if (this.BuyStringOverride != null)
                    hashCode = hashCode * 59 + this.BuyStringOverride.GetHashCode();
                if (this.DisabledDescription != null)
                    hashCode = hashCode * 59 + this.DisabledDescription.GetHashCode();
                if (this.DisplayTitle != null)
                    hashCode = hashCode * 59 + this.DisplayTitle.GetHashCode();
                if (this.Overlay != null)
                    hashCode = hashCode * 59 + this.Overlay.GetHashCode();
                if (this.VendorItemIndexes != null)
                    hashCode = hashCode * 59 + this.VendorItemIndexes.GetHashCode();
                if (this.IsPreview != null)
                    hashCode = hashCode * 59 + this.IsPreview.GetHashCode();
                if (this.IsDisplayOnly != null)
                    hashCode = hashCode * 59 + this.IsDisplayOnly.GetHashCode();
                if (this.ResetIntervalMinutesOverride != null)
                    hashCode = hashCode * 59 + this.ResetIntervalMinutesOverride.GetHashCode();
                if (this.ResetOffsetMinutesOverride != null)
                    hashCode = hashCode * 59 + this.ResetOffsetMinutesOverride.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
