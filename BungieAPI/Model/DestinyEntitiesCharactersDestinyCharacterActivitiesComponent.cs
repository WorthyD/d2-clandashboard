/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// This component holds activity data for a character. It will tell you about the character&#39;s current activity status, as well as activities that are available to the user.
    /// </summary>
    [DataContract]
    public partial class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent :  IEquatable<DestinyEntitiesCharactersDestinyCharacterActivitiesComponent>, IValidatableObject
    {
        /// <summary>
        /// And the current activity&#39;s most specific mode type, if it can be found.
        /// </summary>
        /// <value>And the current activity&#39;s most specific mode type, if it can be found.</value>
        public enum CurrentActivityModeTypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            
            NUMBER_5 = 5,
            
            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            
            NUMBER_6 = 6,
            
            /// <summary>
            /// Enum NUMBER_7 for value: 7
            /// </summary>
            
            NUMBER_7 = 7,
            
            /// <summary>
            /// Enum NUMBER_9 for value: 9
            /// </summary>
            
            NUMBER_9 = 9,
            
            /// <summary>
            /// Enum NUMBER_10 for value: 10
            /// </summary>
            
            NUMBER_10 = 10,
            
            /// <summary>
            /// Enum NUMBER_11 for value: 11
            /// </summary>
            
            NUMBER_11 = 11,
            
            /// <summary>
            /// Enum NUMBER_12 for value: 12
            /// </summary>
            
            NUMBER_12 = 12,
            
            /// <summary>
            /// Enum NUMBER_13 for value: 13
            /// </summary>
            
            NUMBER_13 = 13,
            
            /// <summary>
            /// Enum NUMBER_15 for value: 15
            /// </summary>
            
            NUMBER_15 = 15,
            
            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            
            NUMBER_16 = 16,
            
            /// <summary>
            /// Enum NUMBER_17 for value: 17
            /// </summary>
            
            NUMBER_17 = 17,
            
            /// <summary>
            /// Enum NUMBER_18 for value: 18
            /// </summary>
            
            NUMBER_18 = 18,
            
            /// <summary>
            /// Enum NUMBER_19 for value: 19
            /// </summary>
            
            NUMBER_19 = 19,
            
            /// <summary>
            /// Enum NUMBER_20 for value: 20
            /// </summary>
            
            NUMBER_20 = 20,
            
            /// <summary>
            /// Enum NUMBER_21 for value: 21
            /// </summary>
            
            NUMBER_21 = 21,
            
            /// <summary>
            /// Enum NUMBER_22 for value: 22
            /// </summary>
            
            NUMBER_22 = 22,
            
            /// <summary>
            /// Enum NUMBER_24 for value: 24
            /// </summary>
            
            NUMBER_24 = 24,
            
            /// <summary>
            /// Enum NUMBER_25 for value: 25
            /// </summary>
            
            NUMBER_25 = 25,
            
            /// <summary>
            /// Enum NUMBER_26 for value: 26
            /// </summary>
            
            NUMBER_26 = 26,
            
            /// <summary>
            /// Enum NUMBER_27 for value: 27
            /// </summary>
            
            NUMBER_27 = 27,
            
            /// <summary>
            /// Enum NUMBER_28 for value: 28
            /// </summary>
            
            NUMBER_28 = 28,
            
            /// <summary>
            /// Enum NUMBER_29 for value: 29
            /// </summary>
            
            NUMBER_29 = 29,
            
            /// <summary>
            /// Enum NUMBER_30 for value: 30
            /// </summary>
            
            NUMBER_30 = 30,
            
            /// <summary>
            /// Enum NUMBER_31 for value: 31
            /// </summary>
            
            NUMBER_31 = 31,
            
            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            
            NUMBER_32 = 32,
            
            /// <summary>
            /// Enum NUMBER_37 for value: 37
            /// </summary>
            
            NUMBER_37 = 37,
            
            /// <summary>
            /// Enum NUMBER_38 for value: 38
            /// </summary>
            
            NUMBER_38 = 38,
            
            /// <summary>
            /// Enum NUMBER_39 for value: 39
            /// </summary>
            
            NUMBER_39 = 39,
            
            /// <summary>
            /// Enum NUMBER_40 for value: 40
            /// </summary>
            
            NUMBER_40 = 40,
            
            /// <summary>
            /// Enum NUMBER_41 for value: 41
            /// </summary>
            
            NUMBER_41 = 41,
            
            /// <summary>
            /// Enum NUMBER_42 for value: 42
            /// </summary>
            
            NUMBER_42 = 42,
            
            /// <summary>
            /// Enum NUMBER_43 for value: 43
            /// </summary>
            
            NUMBER_43 = 43,
            
            /// <summary>
            /// Enum NUMBER_44 for value: 44
            /// </summary>
            
            NUMBER_44 = 44,
            
            /// <summary>
            /// Enum NUMBER_45 for value: 45
            /// </summary>
            
            NUMBER_45 = 45,
            
            /// <summary>
            /// Enum NUMBER_46 for value: 46
            /// </summary>
            
            NUMBER_46 = 46,
            
            /// <summary>
            /// Enum NUMBER_47 for value: 47
            /// </summary>
            
            NUMBER_47 = 47,
            
            /// <summary>
            /// Enum NUMBER_48 for value: 48
            /// </summary>
            
            NUMBER_48 = 48,
            
            /// <summary>
            /// Enum NUMBER_49 for value: 49
            /// </summary>
            
            NUMBER_49 = 49,
            
            /// <summary>
            /// Enum NUMBER_50 for value: 50
            /// </summary>
            
            NUMBER_50 = 50,
            
            /// <summary>
            /// Enum NUMBER_51 for value: 51
            /// </summary>
            
            NUMBER_51 = 51,
            
            /// <summary>
            /// Enum NUMBER_52 for value: 52
            /// </summary>
            
            NUMBER_52 = 52,
            
            /// <summary>
            /// Enum NUMBER_53 for value: 53
            /// </summary>
            
            NUMBER_53 = 53,
            
            /// <summary>
            /// Enum NUMBER_54 for value: 54
            /// </summary>
            
            NUMBER_54 = 54,
            
            /// <summary>
            /// Enum NUMBER_55 for value: 55
            /// </summary>
            
            NUMBER_55 = 55,
            
            /// <summary>
            /// Enum NUMBER_56 for value: 56
            /// </summary>
            
            NUMBER_56 = 56,
            
            /// <summary>
            /// Enum NUMBER_57 for value: 57
            /// </summary>
            
            NUMBER_57 = 57,
            
            /// <summary>
            /// Enum NUMBER_58 for value: 58
            /// </summary>
            
            NUMBER_58 = 58,
            
            /// <summary>
            /// Enum NUMBER_59 for value: 59
            /// </summary>
            
            NUMBER_59 = 59,
            
            /// <summary>
            /// Enum NUMBER_60 for value: 60
            /// </summary>
            
            NUMBER_60 = 60,
            
            /// <summary>
            /// Enum NUMBER_61 for value: 61
            /// </summary>
            
            NUMBER_61 = 61,
            
            /// <summary>
            /// Enum NUMBER_62 for value: 62
            /// </summary>
            
            NUMBER_62 = 62,
            
            /// <summary>
            /// Enum NUMBER_63 for value: 63
            /// </summary>
            
            NUMBER_63 = 63,
            
            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            
            NUMBER_64 = 64,
            
            /// <summary>
            /// Enum NUMBER_65 for value: 65
            /// </summary>
            
            NUMBER_65 = 65
        }

        /// <summary>
        /// And the current activity&#39;s most specific mode type, if it can be found.
        /// </summary>
        /// <value>And the current activity&#39;s most specific mode type, if it can be found.</value>
        [DataMember(Name="currentActivityModeType", EmitDefaultValue=false)]
        public CurrentActivityModeTypeEnum? CurrentActivityModeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyEntitiesCharactersDestinyCharacterActivitiesComponent" /> class.
        /// </summary>
        /// <param name="dateActivityStarted">The last date that the user started playing an activity..</param>
        /// <param name="availableActivities">The list of activities that the user can play..</param>
        /// <param name="currentActivityHash">If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \&quot;Activities\&quot; are just maps: it&#39;s the ActivityMode that determines what type of PVP game they&#39;re playing..</param>
        /// <param name="currentActivityModeHash">If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now..</param>
        /// <param name="currentActivityModeType">And the current activity&#39;s most specific mode type, if it can be found..</param>
        /// <param name="currentActivityModeHashes">If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now..</param>
        /// <param name="currentActivityModeTypes">All Activity Modes that apply to the current activity being played, in enum form..</param>
        /// <param name="currentPlaylistActivityHash">If the user is in a playlist, this is the hash identifier for the playlist that they chose..</param>
        /// <param name="lastCompletedStoryHash">This will have the activity hash of the last completed story/campaign mission, in case you care about that..</param>
        public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent(DateTime? dateActivityStarted = default(DateTime?), List<DestinyDestinyActivity> availableActivities = default(List<DestinyDestinyActivity>), int? currentActivityHash = default(int?), int? currentActivityModeHash = default(int?), CurrentActivityModeTypeEnum? currentActivityModeType = default(CurrentActivityModeTypeEnum?), List<int?> currentActivityModeHashes = default(List<int?>), List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> currentActivityModeTypes = default(List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType>), int? currentPlaylistActivityHash = default(int?), int? lastCompletedStoryHash = default(int?))
        {
            this.DateActivityStarted = dateActivityStarted;
            this.AvailableActivities = availableActivities;
            this.CurrentActivityHash = currentActivityHash;
            this.CurrentActivityModeHash = currentActivityModeHash;
            this.CurrentActivityModeType = currentActivityModeType;
            this.CurrentActivityModeHashes = currentActivityModeHashes;
            this.CurrentActivityModeTypes = currentActivityModeTypes;
            this.CurrentPlaylistActivityHash = currentPlaylistActivityHash;
            this.LastCompletedStoryHash = lastCompletedStoryHash;
        }
        
        /// <summary>
        /// The last date that the user started playing an activity.
        /// </summary>
        /// <value>The last date that the user started playing an activity.</value>
        [DataMember(Name="dateActivityStarted", EmitDefaultValue=false)]
        public DateTime? DateActivityStarted { get; set; }

        /// <summary>
        /// The list of activities that the user can play.
        /// </summary>
        /// <value>The list of activities that the user can play.</value>
        [DataMember(Name="availableActivities", EmitDefaultValue=false)]
        public List<DestinyDestinyActivity> AvailableActivities { get; set; }

        /// <summary>
        /// If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \&quot;Activities\&quot; are just maps: it&#39;s the ActivityMode that determines what type of PVP game they&#39;re playing.
        /// </summary>
        /// <value>If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \&quot;Activities\&quot; are just maps: it&#39;s the ActivityMode that determines what type of PVP game they&#39;re playing.</value>
        [DataMember(Name="currentActivityHash", EmitDefaultValue=false)]
        public int? CurrentActivityHash { get; set; }

        /// <summary>
        /// If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.
        /// </summary>
        /// <value>If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.</value>
        [DataMember(Name="currentActivityModeHash", EmitDefaultValue=false)]
        public int? CurrentActivityModeHash { get; set; }


        /// <summary>
        /// If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.
        /// </summary>
        /// <value>If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.</value>
        [DataMember(Name="currentActivityModeHashes", EmitDefaultValue=false)]
        public List<int?> CurrentActivityModeHashes { get; set; }

        /// <summary>
        /// All Activity Modes that apply to the current activity being played, in enum form.
        /// </summary>
        /// <value>All Activity Modes that apply to the current activity being played, in enum form.</value>
        [DataMember(Name="currentActivityModeTypes", EmitDefaultValue=false)]
        public List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> CurrentActivityModeTypes { get; set; }

        /// <summary>
        /// If the user is in a playlist, this is the hash identifier for the playlist that they chose.
        /// </summary>
        /// <value>If the user is in a playlist, this is the hash identifier for the playlist that they chose.</value>
        [DataMember(Name="currentPlaylistActivityHash", EmitDefaultValue=false)]
        public int? CurrentPlaylistActivityHash { get; set; }

        /// <summary>
        /// This will have the activity hash of the last completed story/campaign mission, in case you care about that.
        /// </summary>
        /// <value>This will have the activity hash of the last completed story/campaign mission, in case you care about that.</value>
        [DataMember(Name="lastCompletedStoryHash", EmitDefaultValue=false)]
        public int? LastCompletedStoryHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {\n");
            sb.Append("  DateActivityStarted: ").Append(DateActivityStarted).Append("\n");
            sb.Append("  AvailableActivities: ").Append(AvailableActivities).Append("\n");
            sb.Append("  CurrentActivityHash: ").Append(CurrentActivityHash).Append("\n");
            sb.Append("  CurrentActivityModeHash: ").Append(CurrentActivityModeHash).Append("\n");
            sb.Append("  CurrentActivityModeType: ").Append(CurrentActivityModeType).Append("\n");
            sb.Append("  CurrentActivityModeHashes: ").Append(CurrentActivityModeHashes).Append("\n");
            sb.Append("  CurrentActivityModeTypes: ").Append(CurrentActivityModeTypes).Append("\n");
            sb.Append("  CurrentPlaylistActivityHash: ").Append(CurrentPlaylistActivityHash).Append("\n");
            sb.Append("  LastCompletedStoryHash: ").Append(LastCompletedStoryHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyEntitiesCharactersDestinyCharacterActivitiesComponent);
        }

        /// <summary>
        /// Returns true if DestinyEntitiesCharactersDestinyCharacterActivitiesComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyEntitiesCharactersDestinyCharacterActivitiesComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyEntitiesCharactersDestinyCharacterActivitiesComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateActivityStarted == input.DateActivityStarted ||
                    (this.DateActivityStarted != null &&
                    this.DateActivityStarted.Equals(input.DateActivityStarted))
                ) && 
                (
                    this.AvailableActivities == input.AvailableActivities ||
                    this.AvailableActivities != null &&
                    this.AvailableActivities.SequenceEqual(input.AvailableActivities)
                ) && 
                (
                    this.CurrentActivityHash == input.CurrentActivityHash ||
                    (this.CurrentActivityHash != null &&
                    this.CurrentActivityHash.Equals(input.CurrentActivityHash))
                ) && 
                (
                    this.CurrentActivityModeHash == input.CurrentActivityModeHash ||
                    (this.CurrentActivityModeHash != null &&
                    this.CurrentActivityModeHash.Equals(input.CurrentActivityModeHash))
                ) && 
                (
                    this.CurrentActivityModeType == input.CurrentActivityModeType ||
                    (this.CurrentActivityModeType != null &&
                    this.CurrentActivityModeType.Equals(input.CurrentActivityModeType))
                ) && 
                (
                    this.CurrentActivityModeHashes == input.CurrentActivityModeHashes ||
                    this.CurrentActivityModeHashes != null &&
                    this.CurrentActivityModeHashes.SequenceEqual(input.CurrentActivityModeHashes)
                ) && 
                (
                    this.CurrentActivityModeTypes == input.CurrentActivityModeTypes ||
                    this.CurrentActivityModeTypes != null &&
                    this.CurrentActivityModeTypes.SequenceEqual(input.CurrentActivityModeTypes)
                ) && 
                (
                    this.CurrentPlaylistActivityHash == input.CurrentPlaylistActivityHash ||
                    (this.CurrentPlaylistActivityHash != null &&
                    this.CurrentPlaylistActivityHash.Equals(input.CurrentPlaylistActivityHash))
                ) && 
                (
                    this.LastCompletedStoryHash == input.LastCompletedStoryHash ||
                    (this.LastCompletedStoryHash != null &&
                    this.LastCompletedStoryHash.Equals(input.LastCompletedStoryHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateActivityStarted != null)
                    hashCode = hashCode * 59 + this.DateActivityStarted.GetHashCode();
                if (this.AvailableActivities != null)
                    hashCode = hashCode * 59 + this.AvailableActivities.GetHashCode();
                if (this.CurrentActivityHash != null)
                    hashCode = hashCode * 59 + this.CurrentActivityHash.GetHashCode();
                if (this.CurrentActivityModeHash != null)
                    hashCode = hashCode * 59 + this.CurrentActivityModeHash.GetHashCode();
                if (this.CurrentActivityModeType != null)
                    hashCode = hashCode * 59 + this.CurrentActivityModeType.GetHashCode();
                if (this.CurrentActivityModeHashes != null)
                    hashCode = hashCode * 59 + this.CurrentActivityModeHashes.GetHashCode();
                if (this.CurrentActivityModeTypes != null)
                    hashCode = hashCode * 59 + this.CurrentActivityModeTypes.GetHashCode();
                if (this.CurrentPlaylistActivityHash != null)
                    hashCode = hashCode * 59 + this.CurrentPlaylistActivityHash.GetHashCode();
                if (this.LastCompletedStoryHash != null)
                    hashCode = hashCode * 59 + this.LastCompletedStoryHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
