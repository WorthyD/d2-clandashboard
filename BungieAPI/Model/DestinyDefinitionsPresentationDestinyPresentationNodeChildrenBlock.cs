/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieAPI.Client.SwaggerDateConverter;

namespace BungieAPI.Model
{
    /// <summary>
    /// As/if presentation nodes begin to host more entities as children, these lists will be added to. One list property exists per type of entity that can be treated as a child of this presentation node, and each holds the identifier of the entity and any associated information needed to display the UI for that entity (if anything)
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock :  IEquatable<DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock" /> class.
        /// </summary>
        /// <param name="PresentationNodes">PresentationNodes.</param>
        /// <param name="Collectibles">Collectibles.</param>
        /// <param name="Records">Records.</param>
        public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock(List<DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry> PresentationNodes = default(List<DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry>), List<DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry> Collectibles = default(List<DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry>), List<DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry> Records = default(List<DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry>))
        {
            this.PresentationNodes = PresentationNodes;
            this.Collectibles = Collectibles;
            this.Records = Records;
        }
        
        /// <summary>
        /// Gets or Sets PresentationNodes
        /// </summary>
        [DataMember(Name="presentationNodes", EmitDefaultValue=false)]
        public List<DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry> PresentationNodes { get; set; }

        /// <summary>
        /// Gets or Sets Collectibles
        /// </summary>
        [DataMember(Name="collectibles", EmitDefaultValue=false)]
        public List<DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry> Collectibles { get; set; }

        /// <summary>
        /// Gets or Sets Records
        /// </summary>
        [DataMember(Name="records", EmitDefaultValue=false)]
        public List<DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry> Records { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {\n");
            sb.Append("  PresentationNodes: ").Append(PresentationNodes).Append("\n");
            sb.Append("  Collectibles: ").Append(Collectibles).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PresentationNodes == input.PresentationNodes ||
                    this.PresentationNodes != null &&
                    this.PresentationNodes.SequenceEqual(input.PresentationNodes)
                ) && 
                (
                    this.Collectibles == input.Collectibles ||
                    this.Collectibles != null &&
                    this.Collectibles.SequenceEqual(input.Collectibles)
                ) && 
                (
                    this.Records == input.Records ||
                    this.Records != null &&
                    this.Records.SequenceEqual(input.Records)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PresentationNodes != null)
                    hashCode = hashCode * 59 + this.PresentationNodes.GetHashCode();
                if (this.Collectibles != null)
                    hashCode = hashCode * 59 + this.Collectibles.GetHashCode();
                if (this.Records != null)
                    hashCode = hashCode * 59 + this.Records.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
