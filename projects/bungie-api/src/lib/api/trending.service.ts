/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.4.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InlineResponse20063 } from '../model/inlineResponse20063';
import { InlineResponse20064 } from '../model/inlineResponse20064';
import { InlineResponse20065 } from '../model/inlineResponse20065';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class TrendingService {

    protected basePath = 'https://www.bungie.net/Platform';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trendingGetTrendingCategories(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20063>;
    public trendingGetTrendingCategories(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20063>>;
    public trendingGetTrendingCategories(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20063>>;
    public trendingGetTrendingCategories(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20063>(`${this.configuration.basePath}/Trending/Categories/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns paginated lists of trending items for a category.
     * @param categoryId The ID of the category for whom you want additional results.
     * @param pageNumber The page # of results to return.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trendingGetTrendingCategory(categoryId: string, pageNumber: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20064>;
    public trendingGetTrendingCategory(categoryId: string, pageNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20064>>;
    public trendingGetTrendingCategory(categoryId: string, pageNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20064>>;
    public trendingGetTrendingCategory(categoryId: string, pageNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling trendingGetTrendingCategory.');
        }
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling trendingGetTrendingCategory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20064>(`${this.configuration.basePath}/Trending/Categories/${encodeURIComponent(String(categoryId))}/${encodeURIComponent(String(pageNumber))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
     * @param identifier The identifier for the entity to be returned.
     * @param trendingEntryType The type of entity to be returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trendingGetTrendingEntryDetail(identifier: string, trendingEntryType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20065>;
    public trendingGetTrendingEntryDetail(identifier: string, trendingEntryType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20065>>;
    public trendingGetTrendingEntryDetail(identifier: string, trendingEntryType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20065>>;
    public trendingGetTrendingEntryDetail(identifier: string, trendingEntryType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (identifier === null || identifier === undefined) {
            throw new Error('Required parameter identifier was null or undefined when calling trendingGetTrendingEntryDetail.');
        }
        if (trendingEntryType === null || trendingEntryType === undefined) {
            throw new Error('Required parameter trendingEntryType was null or undefined when calling trendingGetTrendingEntryDetail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20065>(`${this.configuration.basePath}/Trending/Details/${encodeURIComponent(String(trendingEntryType))}/${encodeURIComponent(String(identifier))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
