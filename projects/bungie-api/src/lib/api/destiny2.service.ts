/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.4.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InlineResponse20023 } from '../model/inlineResponse20023';
import { InlineResponse20033 } from '../model/inlineResponse20033';
import { InlineResponse20034 } from '../model/inlineResponse20034';
import { InlineResponse20035 } from '../model/inlineResponse20035';
import { InlineResponse20036 } from '../model/inlineResponse20036';
import { InlineResponse20037 } from '../model/inlineResponse20037';
import { InlineResponse20038 } from '../model/inlineResponse20038';
import { InlineResponse20039 } from '../model/inlineResponse20039';
import { InlineResponse20040 } from '../model/inlineResponse20040';
import { InlineResponse20041 } from '../model/inlineResponse20041';
import { InlineResponse20042 } from '../model/inlineResponse20042';
import { InlineResponse20043 } from '../model/inlineResponse20043';
import { InlineResponse20044 } from '../model/inlineResponse20044';
import { InlineResponse20045 } from '../model/inlineResponse20045';
import { InlineResponse20046 } from '../model/inlineResponse20046';
import { InlineResponse20047 } from '../model/inlineResponse20047';
import { InlineResponse20048 } from '../model/inlineResponse20048';
import { InlineResponse20049 } from '../model/inlineResponse20049';
import { InlineResponse20050 } from '../model/inlineResponse20050';
import { InlineResponse20051 } from '../model/inlineResponse20051';
import { InlineResponse20052 } from '../model/inlineResponse20052';
import { InlineResponse20053 } from '../model/inlineResponse20053';
import { InlineResponse20054 } from '../model/inlineResponse20054';
import { InlineResponse20055 } from '../model/inlineResponse20055';
import { InlineResponse20056 } from '../model/inlineResponse20056';
import { InlineResponse20057 } from '../model/inlineResponse20057';
import { InlineResponse20058 } from '../model/inlineResponse20058';
import { InlineResponse20059 } from '../model/inlineResponse20059';
import { InlineResponse20060 } from '../model/inlineResponse20060';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class Destiny2Service {

    protected basePath = 'https://www.bungie.net/Platform';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Returns the action token if user approves the request.
     * @param correlationId The identifier for the advanced write action request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2AwaGetActionToken(correlationId: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20060>;
    public destiny2AwaGetActionToken(correlationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20060>>;
    public destiny2AwaGetActionToken(correlationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20060>>;
    public destiny2AwaGetActionToken(correlationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (correlationId === null || correlationId === undefined) {
            throw new Error('Required parameter correlationId was null or undefined when calling destiny2AwaGetActionToken.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20060>(`${this.configuration.basePath}/Destiny2/Awa/GetActionToken/${encodeURIComponent(String(correlationId))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Initialize a request to perform an advanced write action.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2AwaInitializeRequest(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20059>;
    public destiny2AwaInitializeRequest(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20059>>;
    public destiny2AwaInitializeRequest(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20059>>;
    public destiny2AwaInitializeRequest(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20059>(`${this.configuration.basePath}/Destiny2/Awa/Initialize/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2AwaProvideAuthorizationResult(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20023>;
    public destiny2AwaProvideAuthorizationResult(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20023>>;
    public destiny2AwaProvideAuthorizationResult(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20023>>;
    public destiny2AwaProvideAuthorizationResult(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20023>(`${this.configuration.basePath}/Destiny2/Awa/AwaProvideAuthorizationResult/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2EquipItem(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20023>;
    public destiny2EquipItem(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20023>>;
    public destiny2EquipItem(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20023>>;
    public destiny2EquipItem(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20023>(`${this.configuration.basePath}/Destiny2/Actions/Items/EquipItem/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2EquipItems(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20045>;
    public destiny2EquipItems(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20045>>;
    public destiny2EquipItems(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20045>>;
    public destiny2EquipItems(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20045>(`${this.configuration.basePath}/Destiny2/Actions/Items/EquipItems/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets activity history stats for indicated character.
     * @param characterId The id of the character to retrieve.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param count Number of rows to return
     * @param mode A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
     * @param page Page number to return, starting with 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetActivityHistory(characterId: number, destinyMembershipId: number, membershipType: number, count?: number, mode?: number, page?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20054>;
    public destiny2GetActivityHistory(characterId: number, destinyMembershipId: number, membershipType: number, count?: number, mode?: number, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20054>>;
    public destiny2GetActivityHistory(characterId: number, destinyMembershipId: number, membershipType: number, count?: number, mode?: number, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20054>>;
    public destiny2GetActivityHistory(characterId: number, destinyMembershipId: number, membershipType: number, count?: number, mode?: number, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetActivityHistory.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetActivityHistory.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetActivityHistory.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }
        if (mode !== undefined && mode !== null) {
            queryParameters = queryParameters.set('mode', <any>mode);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20054>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Account/${encodeURIComponent(String(destinyMembershipId))}/Character/${encodeURIComponent(String(characterId))}/Stats/Activities/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns character information for the supplied character.
     * @param characterId ID of the character.
     * @param destinyMembershipId Destiny membership ID.
     * @param membershipType A valid non-BungieNet membership type.
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetCharacter(characterId: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20038>;
    public destiny2GetCharacter(characterId: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20038>>;
    public destiny2GetCharacter(characterId: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20038>>;
    public destiny2GetCharacter(characterId: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetCharacter.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetCharacter.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetCharacter.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (components) {
            queryParameters = queryParameters.set('components', components.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20038>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Profile/${encodeURIComponent(String(destinyMembershipId))}/Character/${encodeURIComponent(String(characterId))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch.
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetClanAggregateStats(groupId: number, modes?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20050>;
    public destiny2GetClanAggregateStats(groupId: number, modes?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20050>>;
    public destiny2GetClanAggregateStats(groupId: number, modes?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20050>>;
    public destiny2GetClanAggregateStats(groupId: number, modes?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling destiny2GetClanAggregateStats.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (modes !== undefined && modes !== null) {
            queryParameters = queryParameters.set('modes', <any>modes);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20050>(`${this.configuration.basePath}/Destiny2/Stats/AggregateClanStats/${encodeURIComponent(String(groupId))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch.
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param statid ID of stat to return rather than returning all Leaderboard stats.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetClanLeaderboards(groupId: number, maxtop?: number, modes?: string, statid?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20049>;
    public destiny2GetClanLeaderboards(groupId: number, maxtop?: number, modes?: string, statid?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20049>>;
    public destiny2GetClanLeaderboards(groupId: number, maxtop?: number, modes?: string, statid?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20049>>;
    public destiny2GetClanLeaderboards(groupId: number, maxtop?: number, modes?: string, statid?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling destiny2GetClanLeaderboards.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (maxtop !== undefined && maxtop !== null) {
            queryParameters = queryParameters.set('maxtop', <any>maxtop);
        }
        if (modes !== undefined && modes !== null) {
            queryParameters = queryParameters.set('modes', <any>modes);
        }
        if (statid !== undefined && statid !== null) {
            queryParameters = queryParameters.set('statid', <any>statid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20049>(`${this.configuration.basePath}/Destiny2/Stats/Leaderboards/Clans/${encodeURIComponent(String(groupId))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     * @param groupId A valid group id of clan.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetClanWeeklyRewardState(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20039>;
    public destiny2GetClanWeeklyRewardState(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20039>>;
    public destiny2GetClanWeeklyRewardState(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20039>>;
    public destiny2GetClanWeeklyRewardState(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling destiny2GetClanWeeklyRewardState.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20039>(`${this.configuration.basePath}/Destiny2/Clan/${encodeURIComponent(String(groupId))}/WeeklyRewardState/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.
     * @param collectiblePresentationNodeHash The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied.
     * @param membershipType A valid non-BungieNet membership type.
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetCollectibleNodeDetails(characterId: number, collectiblePresentationNodeHash: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20044>;
    public destiny2GetCollectibleNodeDetails(characterId: number, collectiblePresentationNodeHash: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20044>>;
    public destiny2GetCollectibleNodeDetails(characterId: number, collectiblePresentationNodeHash: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20044>>;
    public destiny2GetCollectibleNodeDetails(characterId: number, collectiblePresentationNodeHash: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetCollectibleNodeDetails.');
        }
        if (collectiblePresentationNodeHash === null || collectiblePresentationNodeHash === undefined) {
            throw new Error('Required parameter collectiblePresentationNodeHash was null or undefined when calling destiny2GetCollectibleNodeDetails.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetCollectibleNodeDetails.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetCollectibleNodeDetails.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (components) {
            queryParameters = queryParameters.set('components', components.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20044>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Profile/${encodeURIComponent(String(destinyMembershipId))}/Character/${encodeURIComponent(String(characterId))}/Collectibles/${encodeURIComponent(String(collectiblePresentationNodeHash))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     * @param characterId The specific character whose activities should be returned.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetDestinyAggregateActivityStats(characterId: number, destinyMembershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20056>;
    public destiny2GetDestinyAggregateActivityStats(characterId: number, destinyMembershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20056>>;
    public destiny2GetDestinyAggregateActivityStats(characterId: number, destinyMembershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20056>>;
    public destiny2GetDestinyAggregateActivityStats(characterId: number, destinyMembershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetDestinyAggregateActivityStats.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetDestinyAggregateActivityStats.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetDestinyAggregateActivityStats.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20056>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Account/${encodeURIComponent(String(destinyMembershipId))}/Character/${encodeURIComponent(String(characterId))}/Stats/AggregateActivityStats/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
     * @param entityType The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.
     * @param hashIdentifier The hash identifier for the specific Entity you want returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetDestinyEntityDefinition(entityType: string, hashIdentifier: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20034>;
    public destiny2GetDestinyEntityDefinition(entityType: string, hashIdentifier: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20034>>;
    public destiny2GetDestinyEntityDefinition(entityType: string, hashIdentifier: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20034>>;
    public destiny2GetDestinyEntityDefinition(entityType: string, hashIdentifier: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (entityType === null || entityType === undefined) {
            throw new Error('Required parameter entityType was null or undefined when calling destiny2GetDestinyEntityDefinition.');
        }
        if (hashIdentifier === null || hashIdentifier === undefined) {
            throw new Error('Required parameter hashIdentifier was null or undefined when calling destiny2GetDestinyEntityDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20034>(`${this.configuration.basePath}/Destiny2/Manifest/${encodeURIComponent(String(entityType))}/${encodeURIComponent(String(hashIdentifier))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns the current version of the manifest as a json object.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetDestinyManifest(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20033>;
    public destiny2GetDestinyManifest(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20033>>;
    public destiny2GetDestinyManifest(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20033>>;
    public destiny2GetDestinyManifest(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20033>(`${this.configuration.basePath}/Destiny2/Manifest/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets historical stats for indicated character.
     * @param characterId The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param dayend Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request.
     * @param daystart First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request.
     * @param groups Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals
     * @param modes Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param periodType Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetHistoricalStats(characterId: number, destinyMembershipId: number, membershipType: number, dayend?: Date, daystart?: Date, groups?: Array<number>, modes?: Array<number>, periodType?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20052>;
    public destiny2GetHistoricalStats(characterId: number, destinyMembershipId: number, membershipType: number, dayend?: Date, daystart?: Date, groups?: Array<number>, modes?: Array<number>, periodType?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20052>>;
    public destiny2GetHistoricalStats(characterId: number, destinyMembershipId: number, membershipType: number, dayend?: Date, daystart?: Date, groups?: Array<number>, modes?: Array<number>, periodType?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20052>>;
    public destiny2GetHistoricalStats(characterId: number, destinyMembershipId: number, membershipType: number, dayend?: Date, daystart?: Date, groups?: Array<number>, modes?: Array<number>, periodType?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetHistoricalStats.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetHistoricalStats.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetHistoricalStats.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (dayend !== undefined && dayend !== null) {
            queryParameters = queryParameters.set('dayend', <any>dayend.toISOString());
        }
        if (daystart !== undefined && daystart !== null) {
            queryParameters = queryParameters.set('daystart', <any>daystart.toISOString());
        }
        if (groups) {
            queryParameters = queryParameters.set('groups', groups.join(COLLECTION_FORMATS['csv']));
        }
        if (modes) {
            queryParameters = queryParameters.set('modes', modes.join(COLLECTION_FORMATS['csv']));
        }
        if (periodType !== undefined && periodType !== null) {
            queryParameters = queryParameters.set('periodType', <any>periodType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20052>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Account/${encodeURIComponent(String(destinyMembershipId))}/Character/${encodeURIComponent(String(characterId))}/Stats/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets historical stats definitions.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetHistoricalStatsDefinition(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20048>;
    public destiny2GetHistoricalStatsDefinition(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20048>>;
    public destiny2GetHistoricalStatsDefinition(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20048>>;
    public destiny2GetHistoricalStatsDefinition(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20048>(`${this.configuration.basePath}/Destiny2/Stats/Definition/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets aggregate historical stats organized around each character for a given account.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param groups Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetHistoricalStatsForAccount(destinyMembershipId: number, membershipType: number, groups?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20053>;
    public destiny2GetHistoricalStatsForAccount(destinyMembershipId: number, membershipType: number, groups?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20053>>;
    public destiny2GetHistoricalStatsForAccount(destinyMembershipId: number, membershipType: number, groups?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20053>>;
    public destiny2GetHistoricalStatsForAccount(destinyMembershipId: number, membershipType: number, groups?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetHistoricalStatsForAccount.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetHistoricalStatsForAccount.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groups) {
            queryParameters = queryParameters.set('groups', groups.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20053>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Account/${encodeURIComponent(String(destinyMembershipId))}/Stats/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
     * @param destinyMembershipId The membership ID of the destiny profile.
     * @param itemInstanceId The Instance ID of the destiny item.
     * @param membershipType A valid non-BungieNet membership type.
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetItem(destinyMembershipId: number, itemInstanceId: number, membershipType: number, components?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20040>;
    public destiny2GetItem(destinyMembershipId: number, itemInstanceId: number, membershipType: number, components?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20040>>;
    public destiny2GetItem(destinyMembershipId: number, itemInstanceId: number, membershipType: number, components?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20040>>;
    public destiny2GetItem(destinyMembershipId: number, itemInstanceId: number, membershipType: number, components?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetItem.');
        }
        if (itemInstanceId === null || itemInstanceId === undefined) {
            throw new Error('Required parameter itemInstanceId was null or undefined when calling destiny2GetItem.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetItem.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (components) {
            queryParameters = queryParameters.set('components', components.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20040>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Profile/${encodeURIComponent(String(destinyMembershipId))}/Item/${encodeURIComponent(String(itemInstanceId))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param statid ID of stat to return rather than returning all Leaderboard stats.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetLeaderboards(destinyMembershipId: number, membershipType: number, maxtop?: number, modes?: string, statid?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20049>;
    public destiny2GetLeaderboards(destinyMembershipId: number, membershipType: number, maxtop?: number, modes?: string, statid?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20049>>;
    public destiny2GetLeaderboards(destinyMembershipId: number, membershipType: number, maxtop?: number, modes?: string, statid?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20049>>;
    public destiny2GetLeaderboards(destinyMembershipId: number, membershipType: number, maxtop?: number, modes?: string, statid?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetLeaderboards.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetLeaderboards.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (maxtop !== undefined && maxtop !== null) {
            queryParameters = queryParameters.set('maxtop', <any>maxtop);
        }
        if (modes !== undefined && modes !== null) {
            queryParameters = queryParameters.set('modes', <any>modes);
        }
        if (statid !== undefined && statid !== null) {
            queryParameters = queryParameters.set('statid', <any>statid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20049>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Account/${encodeURIComponent(String(destinyMembershipId))}/Stats/Leaderboards/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param statid ID of stat to return rather than returning all Leaderboard stats.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetLeaderboardsForCharacter(characterId: number, destinyMembershipId: number, membershipType: number, maxtop?: number, modes?: string, statid?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20049>;
    public destiny2GetLeaderboardsForCharacter(characterId: number, destinyMembershipId: number, membershipType: number, maxtop?: number, modes?: string, statid?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20049>>;
    public destiny2GetLeaderboardsForCharacter(characterId: number, destinyMembershipId: number, membershipType: number, maxtop?: number, modes?: string, statid?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20049>>;
    public destiny2GetLeaderboardsForCharacter(characterId: number, destinyMembershipId: number, membershipType: number, maxtop?: number, modes?: string, statid?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetLeaderboardsForCharacter.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetLeaderboardsForCharacter.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetLeaderboardsForCharacter.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (maxtop !== undefined && maxtop !== null) {
            queryParameters = queryParameters.set('maxtop', <any>maxtop);
        }
        if (modes !== undefined && modes !== null) {
            queryParameters = queryParameters.set('modes', <any>modes);
        }
        if (statid !== undefined && statid !== null) {
            queryParameters = queryParameters.set('statid', <any>statid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20049>(`${this.configuration.basePath}/Destiny2/Stats/Leaderboards/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(destinyMembershipId))}/${encodeURIComponent(String(characterId))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
     * @param membershipId The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!
     * @param membershipType The type for the membership whose linked Destiny accounts you want returned.
     * @param getAllMemberships (optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetLinkedProfiles(membershipId: number, membershipType: number, getAllMemberships?: boolean, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20036>;
    public destiny2GetLinkedProfiles(membershipId: number, membershipType: number, getAllMemberships?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20036>>;
    public destiny2GetLinkedProfiles(membershipId: number, membershipType: number, getAllMemberships?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20036>>;
    public destiny2GetLinkedProfiles(membershipId: number, membershipType: number, getAllMemberships?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling destiny2GetLinkedProfiles.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetLinkedProfiles.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (getAllMemberships !== undefined && getAllMemberships !== null) {
            queryParameters = queryParameters.set('getAllMemberships', <any>getAllMemberships);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20036>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Profile/${encodeURIComponent(String(membershipId))}/LinkedProfiles/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets the available post game carnage report for the activity ID.
     * @param activityId The ID of the activity whose PGCR is requested.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetPostGameCarnageReport(activityId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20047>;
    public destiny2GetPostGameCarnageReport(activityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20047>>;
    public destiny2GetPostGameCarnageReport(activityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20047>>;
    public destiny2GetPostGameCarnageReport(activityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (activityId === null || activityId === undefined) {
            throw new Error('Required parameter activityId was null or undefined when calling destiny2GetPostGameCarnageReport.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20047>(`${this.configuration.basePath}/Destiny2/Stats/PostGameCarnageReport/${encodeURIComponent(String(activityId))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns Destiny Profile information for the supplied membership.
     * @param destinyMembershipId Destiny membership ID.
     * @param membershipType A valid non-BungieNet membership type.
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetProfile(destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20037>;
    public destiny2GetProfile(destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20037>>;
    public destiny2GetProfile(destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20037>>;
    public destiny2GetProfile(destinyMembershipId: number, membershipType: number, components?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetProfile.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetProfile.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (components) {
            queryParameters = queryParameters.set('components', components.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20037>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Profile/${encodeURIComponent(String(destinyMembershipId))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets custom localized content for the milestone of the given hash, if it exists.
     * @param milestoneHash The identifier for the milestone to be returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetPublicMilestoneContent(milestoneHash: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20057>;
    public destiny2GetPublicMilestoneContent(milestoneHash: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20057>>;
    public destiny2GetPublicMilestoneContent(milestoneHash: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20057>>;
    public destiny2GetPublicMilestoneContent(milestoneHash: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (milestoneHash === null || milestoneHash === undefined) {
            throw new Error('Required parameter milestoneHash was null or undefined when calling destiny2GetPublicMilestoneContent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20057>(`${this.configuration.basePath}/Destiny2/Milestones/${encodeURIComponent(String(milestoneHash))}/Content/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets public information about currently available Milestones.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetPublicMilestones(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20058>;
    public destiny2GetPublicMilestones(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20058>>;
    public destiny2GetPublicMilestones(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20058>>;
    public destiny2GetPublicMilestones(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20058>(`${this.configuration.basePath}/Destiny2/Milestones/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetPublicVendors(components?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20043>;
    public destiny2GetPublicVendors(components?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20043>>;
    public destiny2GetPublicVendors(components?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20043>>;
    public destiny2GetPublicVendors(components?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (components) {
            queryParameters = queryParameters.set('components', components.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20043>(`${this.configuration.basePath}/Destiny2//Vendors/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets details about unique weapon usage, including all exotic weapons.
     * @param characterId The id of the character to retrieve.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param membershipType A valid non-BungieNet membership type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetUniqueWeaponHistory(characterId: number, destinyMembershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20055>;
    public destiny2GetUniqueWeaponHistory(characterId: number, destinyMembershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20055>>;
    public destiny2GetUniqueWeaponHistory(characterId: number, destinyMembershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20055>>;
    public destiny2GetUniqueWeaponHistory(characterId: number, destinyMembershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetUniqueWeaponHistory.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetUniqueWeaponHistory.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetUniqueWeaponHistory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20055>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Account/${encodeURIComponent(String(destinyMembershipId))}/Character/${encodeURIComponent(String(characterId))}/Stats/UniqueWeapons/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the details of a specific Vendor.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info.
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied.
     * @param membershipType A valid non-BungieNet membership type.
     * @param vendorHash The Hash identifier of the Vendor to be returned.
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetVendor(characterId: number, destinyMembershipId: number, membershipType: number, vendorHash: number, components?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20042>;
    public destiny2GetVendor(characterId: number, destinyMembershipId: number, membershipType: number, vendorHash: number, components?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20042>>;
    public destiny2GetVendor(characterId: number, destinyMembershipId: number, membershipType: number, vendorHash: number, components?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20042>>;
    public destiny2GetVendor(characterId: number, destinyMembershipId: number, membershipType: number, vendorHash: number, components?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetVendor.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetVendor.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetVendor.');
        }
        if (vendorHash === null || vendorHash === undefined) {
            throw new Error('Required parameter vendorHash was null or undefined when calling destiny2GetVendor.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (components) {
            queryParameters = queryParameters.set('components', components.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20042>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Profile/${encodeURIComponent(String(destinyMembershipId))}/Character/${encodeURIComponent(String(characterId))}/Vendors/${encodeURIComponent(String(vendorHash))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info.
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied.
     * @param membershipType A valid non-BungieNet membership type.
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2GetVendors(characterId: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20041>;
    public destiny2GetVendors(characterId: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20041>>;
    public destiny2GetVendors(characterId: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20041>>;
    public destiny2GetVendors(characterId: number, destinyMembershipId: number, membershipType: number, components?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling destiny2GetVendors.');
        }
        if (destinyMembershipId === null || destinyMembershipId === undefined) {
            throw new Error('Required parameter destinyMembershipId was null or undefined when calling destiny2GetVendors.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2GetVendors.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (components) {
            queryParameters = queryParameters.set('components', components.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20041>(`${this.configuration.basePath}/Destiny2/${encodeURIComponent(String(membershipType))}/Profile/${encodeURIComponent(String(destinyMembershipId))}/Character/${encodeURIComponent(String(characterId))}/Vendors/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2InsertSocketPlug(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20046>;
    public destiny2InsertSocketPlug(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20046>>;
    public destiny2InsertSocketPlug(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20046>>;
    public destiny2InsertSocketPlug(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20046>(`${this.configuration.basePath}/Destiny2/Actions/Items/InsertSocketPlug/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2PullFromPostmaster(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20023>;
    public destiny2PullFromPostmaster(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20023>>;
    public destiny2PullFromPostmaster(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20023>>;
    public destiny2PullFromPostmaster(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20023>(`${this.configuration.basePath}/Destiny2/Actions/Items/PullFromPostmaster/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
     * @param activityId The ID of the activity where you ran into the brigand that you&#39;re reporting.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2ReportOffensivePostGameCarnageReportPlayer(activityId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20023>;
    public destiny2ReportOffensivePostGameCarnageReportPlayer(activityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20023>>;
    public destiny2ReportOffensivePostGameCarnageReportPlayer(activityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20023>>;
    public destiny2ReportOffensivePostGameCarnageReportPlayer(activityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (activityId === null || activityId === undefined) {
            throw new Error('Required parameter activityId was null or undefined when calling destiny2ReportOffensivePostGameCarnageReportPlayer.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20023>(`${this.configuration.basePath}/Destiny2/Stats/PostGameCarnageReport/${encodeURIComponent(String(activityId))}/Report/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets a page list of Destiny items.
     * @param searchTerm The string to use when searching for Destiny entities.
     * @param type The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.
     * @param page Page number to return, starting with 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2SearchDestinyEntities(searchTerm: string, type: string, page?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20051>;
    public destiny2SearchDestinyEntities(searchTerm: string, type: string, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20051>>;
    public destiny2SearchDestinyEntities(searchTerm: string, type: string, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20051>>;
    public destiny2SearchDestinyEntities(searchTerm: string, type: string, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling destiny2SearchDestinyEntities.');
        }
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling destiny2SearchDestinyEntities.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20051>(`${this.configuration.basePath}/Destiny2/Armory/Search/${encodeURIComponent(String(type))}/${encodeURIComponent(String(searchTerm))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns a list of Destiny memberships given a full Gamertag or PSN ID. Unless you pass returnOriginalProfile&#x3D;true, this will return membership information for the users&#39; Primary Cross Save Profile if they are engaged in cross save rather than any original Destiny profile that is now being overridden.
     * @param displayName The full gamertag or PSN id of the player. Spaces and case are ignored.
     * @param membershipType A valid non-BungieNet membership type, or All.
     * @param returnOriginalProfile (optional) If passed in and set to true, we will return the original Destiny Profile(s) linked to that gamertag, and not their currently active Destiny Profile.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2SearchDestinyPlayer(displayName: string, membershipType: number, returnOriginalProfile?: boolean, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20035>;
    public destiny2SearchDestinyPlayer(displayName: string, membershipType: number, returnOriginalProfile?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20035>>;
    public destiny2SearchDestinyPlayer(displayName: string, membershipType: number, returnOriginalProfile?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20035>>;
    public destiny2SearchDestinyPlayer(displayName: string, membershipType: number, returnOriginalProfile?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (displayName === null || displayName === undefined) {
            throw new Error('Required parameter displayName was null or undefined when calling destiny2SearchDestinyPlayer.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling destiny2SearchDestinyPlayer.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (returnOriginalProfile !== undefined && returnOriginalProfile !== null) {
            queryParameters = queryParameters.set('returnOriginalProfile', <any>returnOriginalProfile);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20035>(`${this.configuration.basePath}/Destiny2/SearchDestinyPlayer/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(displayName))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Set the Lock State for an instanced item. You must have a valid Destiny Account.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2SetItemLockState(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20023>;
    public destiny2SetItemLockState(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20023>>;
    public destiny2SetItemLockState(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20023>>;
    public destiny2SetItemLockState(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20023>(`${this.configuration.basePath}/Destiny2/Actions/Items/SetLockState/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destiny2TransferItem(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20023>;
    public destiny2TransferItem(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20023>>;
    public destiny2TransferItem(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20023>>;
    public destiny2TransferItem(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20023>(`${this.configuration.basePath}/Destiny2/Actions/Items/TransferItem/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
