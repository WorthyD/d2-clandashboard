/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.4.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InlineResponse20012 } from '../model/inlineResponse20012';
import { InlineResponse20015 } from '../model/inlineResponse20015';
import { InlineResponse20016 } from '../model/inlineResponse20016';
import { InlineResponse20017 } from '../model/inlineResponse20017';
import { InlineResponse20018 } from '../model/inlineResponse20018';
import { InlineResponse20019 } from '../model/inlineResponse20019';
import { InlineResponse20020 } from '../model/inlineResponse20020';
import { InlineResponse20021 } from '../model/inlineResponse20021';
import { InlineResponse20022 } from '../model/inlineResponse20022';
import { InlineResponse20023 } from '../model/inlineResponse20023';
import { InlineResponse20024 } from '../model/inlineResponse20024';
import { InlineResponse20025 } from '../model/inlineResponse20025';
import { InlineResponse20026 } from '../model/inlineResponse20026';
import { InlineResponse20027 } from '../model/inlineResponse20027';
import { InlineResponse20028 } from '../model/inlineResponse20028';
import { InlineResponse20029 } from '../model/inlineResponse20029';
import { InlineResponse20030 } from '../model/inlineResponse20030';
import { InlineResponse20031 } from '../model/inlineResponse20031';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class GroupV2Service {

    protected basePath = 'https://www.bungie.net/Platform';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     * @param founderIdNew The new founder for this group. Must already be a group admin.
     * @param groupId The target group id.
     * @param membershipType Membership type of the provided founderIdNew.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2AbdicateFoundership(founderIdNew: number, groupId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20017>;
    public groupV2AbdicateFoundership(founderIdNew: number, groupId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20017>>;
    public groupV2AbdicateFoundership(founderIdNew: number, groupId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20017>>;
    public groupV2AbdicateFoundership(founderIdNew: number, groupId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (founderIdNew === null || founderIdNew === undefined) {
            throw new Error('Required parameter founderIdNew was null or undefined when calling groupV2AbdicateFoundership.');
        }
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2AbdicateFoundership.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2AbdicateFoundership.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20017>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Admin/AbdicateFoundership/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(founderIdNew))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     * @param groupId Group ID of the group to edit.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2AddOptionalConversation(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20012>;
    public groupV2AddOptionalConversation(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20012>>;
    public groupV2AddOptionalConversation(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20012>>;
    public groupV2AddOptionalConversation(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2AddOptionalConversation.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20012>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/OptionalConversations/Add/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2ApproveAllPending(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20027>;
    public groupV2ApproveAllPending(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20027>>;
    public groupV2ApproveAllPending(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20027>>;
    public groupV2ApproveAllPending(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2ApproveAllPending.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20027>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/ApproveAll/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Approve the given membershipId to join the group/clan as long as they have applied.
     * @param groupId ID of the group.
     * @param membershipId The membership id being approved.
     * @param membershipType Membership type of the supplied membership ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2ApprovePending(groupId: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20017>;
    public groupV2ApprovePending(groupId: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20017>>;
    public groupV2ApprovePending(groupId: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20017>>;
    public groupV2ApprovePending(groupId: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2ApprovePending.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2ApprovePending.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2ApprovePending.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20017>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/Approve/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2ApprovePendingForList(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20027>;
    public groupV2ApprovePendingForList(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20027>>;
    public groupV2ApprovePendingForList(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20027>>;
    public groupV2ApprovePendingForList(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2ApprovePendingForList.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20027>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/ApproveList/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Bans the requested member from the requested group for the specified period of time.
     * @param groupId Group ID that has the member to ban.
     * @param membershipId Membership ID of the member to ban from the group.
     * @param membershipType Membership type of the provided membership ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2BanMember(groupId: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public groupV2BanMember(groupId: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public groupV2BanMember(groupId: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public groupV2BanMember(groupId: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2BanMember.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2BanMember.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2BanMember.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20022>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/Ban/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Deny all of the pending users for the given group.
     * @param groupId ID of the group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2DenyAllPending(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20027>;
    public groupV2DenyAllPending(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20027>>;
    public groupV2DenyAllPending(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20027>>;
    public groupV2DenyAllPending(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2DenyAllPending.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20027>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/DenyAll/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Deny all of the pending users for the given group that match the passed-in .
     * @param groupId ID of the group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2DenyPendingForList(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20027>;
    public groupV2DenyPendingForList(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20027>>;
    public groupV2DenyPendingForList(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20027>>;
    public groupV2DenyPendingForList(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2DenyPendingForList.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20027>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/DenyList/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
     * @param groupId Group ID of the group to edit.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2EditClanBanner(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public groupV2EditClanBanner(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public groupV2EditClanBanner(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public groupV2EditClanBanner(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2EditClanBanner.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20022>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/EditClanBanner/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
     * @param groupId Group ID of the group to edit.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2EditFounderOptions(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public groupV2EditFounderOptions(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public groupV2EditFounderOptions(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public groupV2EditFounderOptions(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2EditFounderOptions.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20022>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/EditFounderOptions/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
     * @param groupId Group ID of the group to edit.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2EditGroup(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public groupV2EditGroup(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public groupV2EditGroup(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public groupV2EditGroup(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2EditGroup.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20022>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Edit/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     * @param groupId ID of the group to which the member belongs.
     * @param membershipId Membership ID to modify.
     * @param membershipType Membership type of the provide membership ID.
     * @param memberType New membertype for the specified member.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2EditGroupMembership(groupId: number, membershipId: number, membershipType: number, memberType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public groupV2EditGroupMembership(groupId: number, membershipId: number, membershipType: number, memberType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public groupV2EditGroupMembership(groupId: number, membershipId: number, membershipType: number, memberType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public groupV2EditGroupMembership(groupId: number, membershipId: number, membershipType: number, memberType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2EditGroupMembership.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2EditGroupMembership.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2EditGroupMembership.');
        }
        if (memberType === null || memberType === undefined) {
            throw new Error('Required parameter memberType was null or undefined when calling groupV2EditGroupMembership.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20022>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/SetMembershipType/${encodeURIComponent(String(memberType))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     * @param conversationId Conversation Id of the channel being edited.
     * @param groupId Group ID of the group to edit.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2EditOptionalConversation(conversationId: number, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20012>;
    public groupV2EditOptionalConversation(conversationId: number, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20012>>;
    public groupV2EditOptionalConversation(conversationId: number, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20012>>;
    public groupV2EditOptionalConversation(conversationId: number, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling groupV2EditOptionalConversation.');
        }
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2EditOptionalConversation.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20012>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/OptionalConversations/Edit/${encodeURIComponent(String(conversationId))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the list of members in a given group who are of admin level or higher.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId The ID of the group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetAdminsAndFounderOfGroup(currentpage: number, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20023>;
    public groupV2GetAdminsAndFounderOfGroup(currentpage: number, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20023>>;
    public groupV2GetAdminsAndFounderOfGroup(currentpage: number, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20023>>;
    public groupV2GetAdminsAndFounderOfGroup(currentpage: number, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (currentpage === null || currentpage === undefined) {
            throw new Error('Required parameter currentpage was null or undefined when calling groupV2GetAdminsAndFounderOfGroup.');
        }
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2GetAdminsAndFounderOfGroup.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20023>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/AdminsAndFounder/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns a list of all available group avatars for the signed-in user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetAvailableAvatars(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20015>;
    public groupV2GetAvailableAvatars(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20015>>;
    public groupV2GetAvailableAvatars(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20015>>;
    public groupV2GetAvailableAvatars(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20015>(`${this.configuration.basePath}/GroupV2/GetAvailableAvatars/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns a list of all available group themes.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetAvailableThemes(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20016>;
    public groupV2GetAvailableThemes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20016>>;
    public groupV2GetAvailableThemes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20016>>;
    public groupV2GetAvailableThemes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20016>(`${this.configuration.basePath}/GroupV2/GetAvailableThemes/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 entries.
     * @param groupId Group ID whose banned members you are fetching
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetBannedMembersOfGroup(currentpage: number, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20025>;
    public groupV2GetBannedMembersOfGroup(currentpage: number, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20025>>;
    public groupV2GetBannedMembersOfGroup(currentpage: number, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20025>>;
    public groupV2GetBannedMembersOfGroup(currentpage: number, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (currentpage === null || currentpage === undefined) {
            throw new Error('Required parameter currentpage was null or undefined when calling groupV2GetBannedMembersOfGroup.');
        }
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2GetBannedMembersOfGroup.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20025>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Banned/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get information about a specific group of the given ID.
     * @param groupId Requested group&#39;s id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetGroup(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20020>;
    public groupV2GetGroup(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20020>>;
    public groupV2GetGroup(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20020>>;
    public groupV2GetGroup(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2GetGroup.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20020>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get information about a specific group with the given name and type.
     * @param groupName Exact name of the group to find.
     * @param groupType Type of group to find.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetGroupByName(groupName: string, groupType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20020>;
    public groupV2GetGroupByName(groupName: string, groupType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20020>>;
    public groupV2GetGroupByName(groupName: string, groupType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20020>>;
    public groupV2GetGroupByName(groupName: string, groupType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupName === null || groupName === undefined) {
            throw new Error('Required parameter groupName was null or undefined when calling groupV2GetGroupByName.');
        }
        if (groupType === null || groupType === undefined) {
            throw new Error('Required parameter groupType was null or undefined when calling groupV2GetGroupByName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20020>(`${this.configuration.basePath}/GroupV2/Name/${encodeURIComponent(String(groupName))}/${encodeURIComponent(String(groupType))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get information about a specific group with the given name and type. The POST version.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetGroupByNameV2(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20020>;
    public groupV2GetGroupByNameV2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20020>>;
    public groupV2GetGroupByNameV2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20020>>;
    public groupV2GetGroupByNameV2(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20020>(`${this.configuration.basePath}/GroupV2/NameV2/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets a list of available optional conversation channels and their settings.
     * @param groupId Requested group&#39;s id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetGroupOptionalConversations(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20021>;
    public groupV2GetGroupOptionalConversations(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20021>>;
    public groupV2GetGroupOptionalConversations(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20021>>;
    public groupV2GetGroupOptionalConversations(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2GetGroupOptionalConversations.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20021>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/OptionalConversations/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get information about the groups that a given member has joined.
     * @param filter Filter apply to list of joined groups.
     * @param groupType Type of group the supplied member founded.
     * @param membershipId Membership ID to for which to find founded groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetGroupsForMember(filter: number, groupType: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20028>;
    public groupV2GetGroupsForMember(filter: number, groupType: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20028>>;
    public groupV2GetGroupsForMember(filter: number, groupType: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20028>>;
    public groupV2GetGroupsForMember(filter: number, groupType: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling groupV2GetGroupsForMember.');
        }
        if (groupType === null || groupType === undefined) {
            throw new Error('Required parameter groupType was null or undefined when calling groupV2GetGroupsForMember.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2GetGroupsForMember.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2GetGroupsForMember.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20028>(`${this.configuration.basePath}/GroupV2/User/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/${encodeURIComponent(String(filter))}/${encodeURIComponent(String(groupType))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the list of users who have been invited into the group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId ID of the group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetInvitedIndividuals(currentpage: number, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20026>;
    public groupV2GetInvitedIndividuals(currentpage: number, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20026>>;
    public groupV2GetInvitedIndividuals(currentpage: number, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20026>>;
    public groupV2GetInvitedIndividuals(currentpage: number, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (currentpage === null || currentpage === undefined) {
            throw new Error('Required parameter currentpage was null or undefined when calling groupV2GetInvitedIndividuals.');
        }
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2GetInvitedIndividuals.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20026>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/InvitedIndividuals/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the list of members in a given group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId The ID of the group.
     * @param memberType Filter out other member types. Use None for all members.
     * @param nameSearch The name fragment upon which a search should be executed for members with matching display or unique names.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetMembersOfGroup(currentpage: number, groupId: number, memberType?: number, nameSearch?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20023>;
    public groupV2GetMembersOfGroup(currentpage: number, groupId: number, memberType?: number, nameSearch?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20023>>;
    public groupV2GetMembersOfGroup(currentpage: number, groupId: number, memberType?: number, nameSearch?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20023>>;
    public groupV2GetMembersOfGroup(currentpage: number, groupId: number, memberType?: number, nameSearch?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (currentpage === null || currentpage === undefined) {
            throw new Error('Required parameter currentpage was null or undefined when calling groupV2GetMembersOfGroup.');
        }
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2GetMembersOfGroup.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (memberType !== undefined && memberType !== null) {
            queryParameters = queryParameters.set('memberType', <any>memberType);
        }
        if (nameSearch !== undefined && nameSearch !== null) {
            queryParameters = queryParameters.set('nameSearch', <any>nameSearch);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20023>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param groupId ID of the group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetPendingMemberships(currentpage: number, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20026>;
    public groupV2GetPendingMemberships(currentpage: number, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20026>>;
    public groupV2GetPendingMemberships(currentpage: number, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20026>>;
    public groupV2GetPendingMemberships(currentpage: number, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (currentpage === null || currentpage === undefined) {
            throw new Error('Required parameter currentpage was null or undefined when calling groupV2GetPendingMemberships.');
        }
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2GetPendingMemberships.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20026>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/Pending/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get information about the groups that a given member has applied to or been invited to.
     * @param filter Filter apply to list of potential joined groups.
     * @param groupType Type of group the supplied member applied.
     * @param membershipId Membership ID to for which to find applied groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetPotentialGroupsForMember(filter: number, groupType: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20030>;
    public groupV2GetPotentialGroupsForMember(filter: number, groupType: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20030>>;
    public groupV2GetPotentialGroupsForMember(filter: number, groupType: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20030>>;
    public groupV2GetPotentialGroupsForMember(filter: number, groupType: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling groupV2GetPotentialGroupsForMember.');
        }
        if (groupType === null || groupType === undefined) {
            throw new Error('Required parameter groupType was null or undefined when calling groupV2GetPotentialGroupsForMember.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2GetPotentialGroupsForMember.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2GetPotentialGroupsForMember.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20030>(`${this.configuration.basePath}/GroupV2/User/Potential/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/${encodeURIComponent(String(filter))}/${encodeURIComponent(String(groupType))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     * @param createDateRange Requested range in which to pull recommended groups
     * @param groupType Type of groups requested
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetRecommendedGroups(createDateRange: number, groupType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20018>;
    public groupV2GetRecommendedGroups(createDateRange: number, groupType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20018>>;
    public groupV2GetRecommendedGroups(createDateRange: number, groupType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20018>>;
    public groupV2GetRecommendedGroups(createDateRange: number, groupType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (createDateRange === null || createDateRange === undefined) {
            throw new Error('Required parameter createDateRange was null or undefined when calling groupV2GetRecommendedGroups.');
        }
        if (groupType === null || groupType === undefined) {
            throw new Error('Required parameter groupType was null or undefined when calling groupV2GetRecommendedGroups.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20018>(`${this.configuration.basePath}/GroupV2/Recommended/${encodeURIComponent(String(groupType))}/${encodeURIComponent(String(createDateRange))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     * @param mType The Destiny membership type of the account we wish to access settings.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GetUserClanInviteSetting(mType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20017>;
    public groupV2GetUserClanInviteSetting(mType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20017>>;
    public groupV2GetUserClanInviteSetting(mType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20017>>;
    public groupV2GetUserClanInviteSetting(mType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (mType === null || mType === undefined) {
            throw new Error('Required parameter mType was null or undefined when calling groupV2GetUserClanInviteSetting.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20017>(`${this.configuration.basePath}/GroupV2/GetUserClanInviteSetting/${encodeURIComponent(String(mType))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Search for Groups.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2GroupSearch(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20019>;
    public groupV2GroupSearch(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20019>>;
    public groupV2GroupSearch(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20019>>;
    public groupV2GroupSearch(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20019>(`${this.configuration.basePath}/GroupV2/Search/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Invite a user to join this group.
     * @param groupId ID of the group you would like to join.
     * @param membershipId Membership id of the account being invited.
     * @param membershipType MembershipType of the account being invited.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2IndividualGroupInvite(groupId: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20031>;
    public groupV2IndividualGroupInvite(groupId: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20031>>;
    public groupV2IndividualGroupInvite(groupId: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20031>>;
    public groupV2IndividualGroupInvite(groupId: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2IndividualGroupInvite.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2IndividualGroupInvite.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2IndividualGroupInvite.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20031>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/IndividualInvite/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Cancels a pending invitation to join a group.
     * @param groupId ID of the group you would like to join.
     * @param membershipId Membership id of the account being cancelled.
     * @param membershipType MembershipType of the account being cancelled.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2IndividualGroupInviteCancel(groupId: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20031>;
    public groupV2IndividualGroupInviteCancel(groupId: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20031>>;
    public groupV2IndividualGroupInviteCancel(groupId: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20031>>;
    public groupV2IndividualGroupInviteCancel(groupId: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2IndividualGroupInviteCancel.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2IndividualGroupInviteCancel.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2IndividualGroupInviteCancel.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20031>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/IndividualInviteCancel/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
     * @param groupId Group ID to kick the user from.
     * @param membershipId Membership ID to kick.
     * @param membershipType Membership type of the provided membership ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2KickMember(groupId: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20024>;
    public groupV2KickMember(groupId: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20024>>;
    public groupV2KickMember(groupId: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20024>>;
    public groupV2KickMember(groupId: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2KickMember.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2KickMember.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2KickMember.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20024>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/Kick/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     * @param groupType Type of group the supplied member founded.
     * @param membershipId Membership ID to for which to find founded groups.
     * @param membershipType Membership type of the supplied membership ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2RecoverGroupForFounder(groupType: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20029>;
    public groupV2RecoverGroupForFounder(groupType: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20029>>;
    public groupV2RecoverGroupForFounder(groupType: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20029>>;
    public groupV2RecoverGroupForFounder(groupType: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupType === null || groupType === undefined) {
            throw new Error('Required parameter groupType was null or undefined when calling groupV2RecoverGroupForFounder.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2RecoverGroupForFounder.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2RecoverGroupForFounder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse20029>(`${this.configuration.basePath}/GroupV2/Recover/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/${encodeURIComponent(String(groupType))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Unbans the requested member, allowing them to re-apply for membership.
     * @param groupId 
     * @param membershipId Membership ID of the member to unban from the group
     * @param membershipType Membership type of the provided membership ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public groupV2UnbanMember(groupId: number, membershipId: number, membershipType: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse20022>;
    public groupV2UnbanMember(groupId: number, membershipId: number, membershipType: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse20022>>;
    public groupV2UnbanMember(groupId: number, membershipId: number, membershipType: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse20022>>;
    public groupV2UnbanMember(groupId: number, membershipId: number, membershipType: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling groupV2UnbanMember.');
        }
        if (membershipId === null || membershipId === undefined) {
            throw new Error('Required parameter membershipId was null or undefined when calling groupV2UnbanMember.');
        }
        if (membershipType === null || membershipType === undefined) {
            throw new Error('Required parameter membershipType was null or undefined when calling groupV2UnbanMember.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse20022>(`${this.configuration.basePath}/GroupV2/${encodeURIComponent(String(groupId))}/Members/${encodeURIComponent(String(membershipType))}/${encodeURIComponent(String(membershipId))}/Unban/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
