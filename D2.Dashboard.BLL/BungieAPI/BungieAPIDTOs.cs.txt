//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace BungieAPI.DTOs
{
#pragma warning disable // Disable all warnings



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ApplicationScopes
    {
        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

        _256 = 256,

        _512 = 512,

        _1024 = 1024,

        _2048 = 2048,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApiUsage
    {
        /// <summary>The date range for the data being reported.</summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Range Range { get; set; }

        /// <summary>Counts for on API calls made for the time range.</summary>
        [Newtonsoft.Json.JsonProperty("apiCalls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Series> ApiCalls { get; set; }

        /// <summary>Instances of blocked requests or requests that crossed the warn threshold during the time range.</summary>
        [Newtonsoft.Json.JsonProperty("throttledRequests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Series> ThrottledRequests { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ApiUsage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiUsage>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DateRange
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? End { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DateRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Series
    {
        /// <summary>Collection of samples with time and value.</summary>
        [Newtonsoft.Json.JsonProperty("datapoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Datapoint> Datapoints { get; set; }

        /// <summary>Target to which to datapoints apply.</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Series FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Series>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Datapoint
    {
        /// <summary>Timestamp for the related count.</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Time { get; set; }

        /// <summary>Count associated with timestamp</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Datapoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Datapoint>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Application
    {
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OAuthApplicationType? ApplicationType { get; set; }

        /// <summary>Unique ID assigned to the application</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId { get; set; }

        /// <summary>Name of the application</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>URL used to pass the user's authorization code to the application</summary>
        [Newtonsoft.Json.JsonProperty("redirectUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUrl { get; set; }

        /// <summary>Link to website for the application where a user can learn more about the app.</summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>Permissions the application needs to work</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Scope { get; set; }

        /// <summary>Value of the Origin header sent in requests generated by this application.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        /// <summary>Current status of the application.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Status Status { get; set; }

        /// <summary>Date the application was first added to our database.</summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate { get; set; }

        /// <summary>Date the application status last changed.</summary>
        [Newtonsoft.Json.JsonProperty("statusChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StatusChanged { get; set; }

        /// <summary>Date the first time the application status entered the 'Public' status.</summary>
        [Newtonsoft.Json.JsonProperty("firstPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FirstPublished { get; set; }

        /// <summary>List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationDeveloper> Team { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Application FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OAuthApplicationType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ApplicationStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApplicationDeveloper
    {
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeveloperRole? Role { get; set; }

        [Newtonsoft.Json.JsonProperty("apiEulaVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApiEulaVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard User { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ApplicationDeveloper FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationDeveloper>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DeveloperRole
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>Very basic info about a user as returned by the Account server.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserMembership
    {
        /// <summary>Type of the membership.</summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipType30 MembershipType { get; set; }

        /// <summary>Membership ID as they user is known in the Accounts service</summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MembershipId { get; set; }

        /// <summary>Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserMembership FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserMembership>(data);
        }

    }

    /// <summary>The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BungieMembershipType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

  

    }

    /// <summary>This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserInfoCard
    {
        /// <summary>A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.</summary>
        [Newtonsoft.Json.JsonProperty("supplementalDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplementalDisplayName { get; set; }

        /// <summary>URL the Icon if available.</summary>
        [Newtonsoft.Json.JsonProperty("iconPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconPath { get; set; }

        /// <summary>Type of the membership.</summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipType31 MembershipType { get; set; }

        /// <summary>Membership ID as they user is known in the Accounts service</summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MembershipId { get; set; }

        /// <summary>Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserInfoCard FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInfoCard>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeneralUser
    {
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MembershipId { get; set; }

        [Newtonsoft.Json.JsonProperty("uniqueName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueName { get; set; }

        [Newtonsoft.Json.JsonProperty("normalizedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NormalizedName { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("profilePicture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProfilePicture { get; set; }

        [Newtonsoft.Json.JsonProperty("profileTheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProfileTheme { get; set; }

        [Newtonsoft.Json.JsonProperty("userTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("successMessageFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SuccessMessageFlags { get; set; }

        [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("about", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string About { get; set; }

        [Newtonsoft.Json.JsonProperty("firstAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FirstAccess { get; set; }

        [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastUpdate { get; set; }

        [Newtonsoft.Json.JsonProperty("legacyPortalUID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LegacyPortalUID { get; set; }

        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserToUserContext Context { get; set; }

        [Newtonsoft.Json.JsonProperty("psnDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PsnDisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("xboxDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XboxDisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("fbDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FbDisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("showActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowActivity { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("localeInheritDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LocaleInheritDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("lastBanReportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LastBanReportId { get; set; }

        [Newtonsoft.Json.JsonProperty("showGroupMessaging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowGroupMessaging { get; set; }

        [Newtonsoft.Json.JsonProperty("profilePicturePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfilePicturePath { get; set; }

        [Newtonsoft.Json.JsonProperty("profilePictureWidePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfilePictureWidePath { get; set; }

        [Newtonsoft.Json.JsonProperty("profileThemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfileThemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("userTitleDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserTitleDisplay { get; set; }

        [Newtonsoft.Json.JsonProperty("statusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusText { get; set; }

        [Newtonsoft.Json.JsonProperty("statusDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StatusDate { get; set; }

        [Newtonsoft.Json.JsonProperty("profileBanExpire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ProfileBanExpire { get; set; }

        [Newtonsoft.Json.JsonProperty("blizzardDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlizzardDisplayName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GeneralUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralUser>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserToUserContext
    {
        [Newtonsoft.Json.JsonProperty("isFollowing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFollowing { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IgnoreResponse IgnoreStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("globalIgnoreEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? GlobalIgnoreEndDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserToUserContext FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserToUserContext>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IgnoreResponse
    {
        [Newtonsoft.Json.JsonProperty("isIgnored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsIgnored { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IgnoreStatus? IgnoreFlags { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static IgnoreResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IgnoreResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum IgnoreStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserTheme
    {
        [Newtonsoft.Json.JsonProperty("userThemeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserThemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("userThemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserThemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("userThemeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserThemeDescription { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserTheme FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserTheme>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserMembershipData
    {
        /// <summary>this allows you to see destiny memberships that are visible and linked to this account (regardless of whether or not they have characters on the world server)</summary>
        [Newtonsoft.Json.JsonProperty("destinyMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserInfoCard> DestinyMemberships { get; set; }

        [Newtonsoft.Json.JsonProperty("bungieNetUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeneralUser BungieNetUser { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserMembershipData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserMembershipData>(data);
        }

    }

    /// <summary>All the partnership info that's fit to expose externally, if we care to do so.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PublicPartnershipDetail
    {
        [Newtonsoft.Json.JsonProperty("partnerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnershipType? PartnerType { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PublicPartnershipDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PublicPartnershipDetail>(data);
        }

    }

    /// <summary>Representing external partners to which BNet users can link accounts, but that are not Account System credentials: partnerships that BNet uses exclusively for data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartnershipType
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentTypeDescription
    {
        [Newtonsoft.Json.JsonProperty("cType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CType { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("contentDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("previewImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviewImage { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("reminder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reminder { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContentTypeProperty> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("tagMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TagMetadataDefinition> TagMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("tagMetadataItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, TagMetadataItem> TagMetadataItems { get; set; }

        [Newtonsoft.Json.JsonProperty("usageExamples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> UsageExamples { get; set; }

        [Newtonsoft.Json.JsonProperty("showInContentEditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowInContentEditor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeOf { get; set; }

        [Newtonsoft.Json.JsonProperty("bindIdentifierToProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BindIdentifierToProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("boundRegex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoundRegex { get; set; }

        [Newtonsoft.Json.JsonProperty("forceIdentifierBinding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceIdentifierBinding { get; set; }

        [Newtonsoft.Json.JsonProperty("allowComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowComments { get; set; }

        [Newtonsoft.Json.JsonProperty("autoEnglishPropertyFallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoEnglishPropertyFallback { get; set; }

        [Newtonsoft.Json.JsonProperty("bulkUploadable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BulkUploadable { get; set; }

        [Newtonsoft.Json.JsonProperty("previews", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContentPreview> Previews { get; set; }

        [Newtonsoft.Json.JsonProperty("suppressCmsPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuppressCmsPath { get; set; }

        [Newtonsoft.Json.JsonProperty("propertySections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContentTypePropertySection> PropertySections { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentTypeDescription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentTypeDescription>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentTypeProperty
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("readableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReadableName { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("propertyDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("localizable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Localizable { get; set; }

        [Newtonsoft.Json.JsonProperty("fallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fallback { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("isTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; set; }

        [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLength { get; set; }

        [Newtonsoft.Json.JsonProperty("maxByteLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxByteLength { get; set; }

        [Newtonsoft.Json.JsonProperty("maxFileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxFileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("regexp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Regexp { get; set; }

        [Newtonsoft.Json.JsonProperty("validateAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidateAs { get; set; }

        [Newtonsoft.Json.JsonProperty("rssAttribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RssAttribute { get; set; }

        [Newtonsoft.Json.JsonProperty("visibleDependency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VisibleDependency { get; set; }

        [Newtonsoft.Json.JsonProperty("visibleOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VisibleOn { get; set; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentPropertyDataTypeEnum? Datatype { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("childProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContentTypeProperty> ChildProperties { get; set; }

        [Newtonsoft.Json.JsonProperty("contentTypeAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentTypeAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("bindToProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BindToProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("boundRegex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoundRegex { get; set; }

        [Newtonsoft.Json.JsonProperty("representationSelection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> RepresentationSelection { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContentTypeDefaultValue> DefaultValues { get; set; }

        [Newtonsoft.Json.JsonProperty("isExternalAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExternalAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("propertySection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertySection { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("entitytype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entitytype { get; set; }

        [Newtonsoft.Json.JsonProperty("isCombo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCombo { get; set; }

        [Newtonsoft.Json.JsonProperty("suppressProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuppressProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("legalContentTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LegalContentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("representationValidationString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepresentationValidationString { get; set; }

        [Newtonsoft.Json.JsonProperty("minWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinWidth { get; set; }

        [Newtonsoft.Json.JsonProperty("maxWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxWidth { get; set; }

        [Newtonsoft.Json.JsonProperty("minHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinHeight { get; set; }

        [Newtonsoft.Json.JsonProperty("maxHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxHeight { get; set; }

        [Newtonsoft.Json.JsonProperty("isVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVideo { get; set; }

        [Newtonsoft.Json.JsonProperty("isImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsImage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentTypeProperty FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentTypeProperty>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContentPropertyDataTypeEnum
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentTypeDefaultValue
    {
        [Newtonsoft.Json.JsonProperty("whenClause", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WhenClause { get; set; }

        [Newtonsoft.Json.JsonProperty("whenValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WhenValue { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentTypeDefaultValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentTypeDefaultValue>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TagMetadataDefinition
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TagMetadataItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datatype { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TagMetadataDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TagMetadataDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TagMetadataItem
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("tagText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TagText { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TagMetadataItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TagMetadataItem>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentPreview
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("itemInSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ItemInSet { get; set; }

        [Newtonsoft.Json.JsonProperty("setTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SetTag { get; set; }

        [Newtonsoft.Json.JsonProperty("setNesting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SetNesting { get; set; }

        [Newtonsoft.Json.JsonProperty("useSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UseSetId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentPreview FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPreview>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentTypePropertySection
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("readableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReadableName { get; set; }

        [Newtonsoft.Json.JsonProperty("collapsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Collapsed { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentTypePropertySection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentTypePropertySection>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentItemPublicContract
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ContentId { get; set; }

        [Newtonsoft.Json.JsonProperty("cType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CType { get; set; }

        [Newtonsoft.Json.JsonProperty("cmsPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CmsPath { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("modifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate { get; set; }

        [Newtonsoft.Json.JsonProperty("allowComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowComments { get; set; }

        [Newtonsoft.Json.JsonProperty("hasAgeGate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAgeGate { get; set; }

        [Newtonsoft.Json.JsonProperty("minimumAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumAge { get; set; }

        [Newtonsoft.Json.JsonProperty("ratingImagePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RatingImagePath { get; set; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeneralUser Author { get; set; }

        [Newtonsoft.Json.JsonProperty("autoEnglishPropertyFallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoEnglishPropertyFallback { get; set; }

        /// <summary>Firehose content is really a collection of metadata and "properties", which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.
        /// As Cole Porter would have crooned, "Anything Goes" with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("representations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContentRepresentation> Representations { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("commentSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentSummary CommentSummary { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentItemPublicContract FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentItemPublicContract>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContentRepresentation
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("validationString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidationString { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentRepresentation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentRepresentation>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CommentSummary
    {
        [Newtonsoft.Json.JsonProperty("topicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TopicId { get; set; }

        [Newtonsoft.Json.JsonProperty("commentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommentCount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CommentSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommentSummary>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResult
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PagedQuery
    {
        [Newtonsoft.Json.JsonProperty("itemsPerPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemsPerPage { get; set; }

        [Newtonsoft.Json.JsonProperty("currentPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("requestContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestContinuationToken { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PagedQuery FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagedQuery>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfContentItemPublicContract
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContentItemPublicContract> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfContentItemPublicContract FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfContentItemPublicContract>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumTopicsCategoryFiltersEnum
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumTopicsQuickDateEnum
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumTopicsSortEnum
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostResponse
    {
        [Newtonsoft.Json.JsonProperty("lastReplyTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastReplyTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPinned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPinned { get; set; }

        [Newtonsoft.Json.JsonProperty("urlMediaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForumMediaType? UrlMediaType { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        [Newtonsoft.Json.JsonProperty("popularity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForumPostPopularity? Popularity { get; set; }

        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

        [Newtonsoft.Json.JsonProperty("isAnnouncement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAnnouncement { get; set; }

        [Newtonsoft.Json.JsonProperty("userRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserRating { get; set; }

        [Newtonsoft.Json.JsonProperty("userHasRated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UserHasRated { get; set; }

        [Newtonsoft.Json.JsonProperty("userHasMutedPost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UserHasMutedPost { get; set; }

        [Newtonsoft.Json.JsonProperty("latestReplyPostId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LatestReplyPostId { get; set; }

        [Newtonsoft.Json.JsonProperty("latestReplyAuthorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LatestReplyAuthorId { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IgnoreResponse IgnoreStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumMediaType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumPostPopularity
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumPostCategoryEnums
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

        _256 = 256,

        _512 = 512,

        _1024 = 1024,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumFlagsEnum
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfPostResponse
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PostResponse> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfPostResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfPostResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostSearchResponse
    {
        [Newtonsoft.Json.JsonProperty("relatedPosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PostResponse> RelatedPosts { get; set; }

        [Newtonsoft.Json.JsonProperty("authors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GeneralUser> Authors { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupResponse> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("searchedTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TagResponse> SearchedTags { get; set; }

        [Newtonsoft.Json.JsonProperty("polls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PollResponse> Polls { get; set; }

        [Newtonsoft.Json.JsonProperty("recruitmentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ForumRecruitmentDetail> RecruitmentDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("availablePages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailablePages { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PostResponse> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostSearchResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostSearchResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupResponse
    {
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupV2 Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("founder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupMember Founder { get; set; }

        [Newtonsoft.Json.JsonProperty("alliedIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<long> AlliedIds { get; set; }

        [Newtonsoft.Json.JsonProperty("parentGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupV2 ParentGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("allianceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupAllianceStatus? AllianceStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("groupJoinInviteCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupJoinInviteCount { get; set; }

        /// <summary>This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.</summary>
        [Newtonsoft.Json.JsonProperty("currentUserMemberMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, GroupMember> CurrentUserMemberMap { get; set; }

        /// <summary>This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.</summary>
        [Newtonsoft.Json.JsonProperty("currentUserPotentialMemberMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, GroupPotentialMember> CurrentUserPotentialMemberMap { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupV2
    {
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("groupType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupType? GroupType { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipIdCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MembershipIdCreated { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("about", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string About { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("memberCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemberCount { get; set; }

        [Newtonsoft.Json.JsonProperty("isPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublic { get; set; }

        [Newtonsoft.Json.JsonProperty("isPublicTopicAdminOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublicTopicAdminOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("motto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Motto { get; set; }

        [Newtonsoft.Json.JsonProperty("allowChat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowChat { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefaultPostPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefaultPostPublic { get; set; }

        [Newtonsoft.Json.JsonProperty("chatSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChatSecuritySetting? ChatSecurity { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("avatarImageIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvatarImageIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupHomepage? Homepage { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipOption? MembershipOption { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultPublicity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupPostPublicity? DefaultPublicity { get; set; }

        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Theme { get; set; }

        [Newtonsoft.Json.JsonProperty("bannerPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BannerPath { get; set; }

        [Newtonsoft.Json.JsonProperty("avatarPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvatarPath { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ConversationId { get; set; }

        [Newtonsoft.Json.JsonProperty("enableInvitationMessagingForAdmins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableInvitationMessagingForAdmins { get; set; }

        [Newtonsoft.Json.JsonProperty("banExpireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? BanExpireDate { get; set; }

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupFeatures Features { get; set; }

        [Newtonsoft.Json.JsonProperty("clanInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupV2ClanInfoAndInvestment ClanInfo { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupV2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupV2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupType
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ChatSecuritySetting
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupHomepage
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipOption
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupPostPublicity
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupFeatures
    {
        [Newtonsoft.Json.JsonProperty("maximumMembers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumMembers { get; set; }

        /// <summary>Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.</summary>
        [Newtonsoft.Json.JsonProperty("maximumMembershipsOfGroupType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumMembershipsOfGroupType { get; set; }

        [Newtonsoft.Json.JsonProperty("capabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Capabilities? Capabilities { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<BungieMembershipType> MembershipTypes { get; set; }

        /// <summary>Minimum Member Level allowed to invite new members to group
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.</summary>
        [Newtonsoft.Json.JsonProperty("invitePermissionOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InvitePermissionOverride { get; set; }

        /// <summary>Minimum Member Level allowed to update group culture
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.</summary>
        [Newtonsoft.Json.JsonProperty("updateCulturePermissionOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateCulturePermissionOverride { get; set; }

        /// <summary>Minimum Member Level allowed to host guided games
        /// Always Allowed: Founder, Acting Founder, Admin
        /// Allowed Overrides: None, Member, Beginner
        /// Default is Member for clans, None for groups, although this means nothing for groups.</summary>
        [Newtonsoft.Json.JsonProperty("hostGuidedGamePermissionOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HostGuidedGamePermissionOverride HostGuidedGamePermissionOverride { get; set; }

        /// <summary>Minimum Member Level allowed to update banner
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.</summary>
        [Newtonsoft.Json.JsonProperty("updateBannerPermissionOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateBannerPermissionOverride { get; set; }

        /// <summary>Level to join a member at when accepting an invite, application, or joining an open clan
        /// Default is Beginner.</summary>
        [Newtonsoft.Json.JsonProperty("joinLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JoinLevel JoinLevel { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupFeatures FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupFeatures>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Capabilities
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BungieMembershipTypeOf : System.Collections.ObjectModel.ObservableCollection<BungieMembershipType>
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BungieMembershipTypeOf FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BungieMembershipTypeOf>(data);
        }

    }

    /// <summary>Used for setting the guided game permission level override (admins and founders can always host guided games).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum HostGuidedGamesPermissionLevel
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>The member levels used by all V2 Groups API. Individual group types use their own mappings in their native storage (general uses BnetDbGroupMemberType and D2 clans use ClanMemberLevel), but they are all translated to this in the runtime api. These runtime values should NEVER be stored anywhere, so the values can be changed as necessary.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RuntimeGroupMemberType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    /// <summary>This contract contains clan-specific group information. It does not include any investment data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupV2ClanInfo
    {
        [Newtonsoft.Json.JsonProperty("clanCallsign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClanCallsign { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClanBanner ClanBannerData { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupV2ClanInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupV2ClanInfo>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClanBanner
    {
        [Newtonsoft.Json.JsonProperty("decalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecalId { get; set; }

        [Newtonsoft.Json.JsonProperty("decalColorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecalColorId { get; set; }

        [Newtonsoft.Json.JsonProperty("decalBackgroundColorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecalBackgroundColorId { get; set; }

        [Newtonsoft.Json.JsonProperty("gonfalonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GonfalonId { get; set; }

        [Newtonsoft.Json.JsonProperty("gonfalonColorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GonfalonColorId { get; set; }

        [Newtonsoft.Json.JsonProperty("gonfalonDetailId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GonfalonDetailId { get; set; }

        [Newtonsoft.Json.JsonProperty("gonfalonDetailColorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GonfalonDetailColorId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ClanBanner FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClanBanner>(data);
        }

    }

    /// <summary>The same as GroupV2ClanInfo, but includes any investment data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupV2ClanInfoAndInvestment
    {
        [Newtonsoft.Json.JsonProperty("d2ClanProgressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyProgression> D2ClanProgressions { get; set; }

        [Newtonsoft.Json.JsonProperty("clanCallsign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClanCallsign { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClanBanner ClanBannerData { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupV2ClanInfoAndInvestment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupV2ClanInfoAndInvestment>(data);
        }

    }

    /// <summary>Information about a current character's status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this "live" data with the related DestinyProgressionDefinition for a full picture of the Progression.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProgression
    {
        /// <summary>The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.</summary>
        [Newtonsoft.Json.JsonProperty("progressionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionHash { get; set; }

        /// <summary>The amount of progress earned today for this progression.</summary>
        [Newtonsoft.Json.JsonProperty("dailyProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DailyProgress { get; set; }

        /// <summary>If this progression has a daily limit, this is that limit.</summary>
        [Newtonsoft.Json.JsonProperty("dailyLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DailyLimit { get; set; }

        /// <summary>The amount of progress earned toward this progression in the current week.</summary>
        [Newtonsoft.Json.JsonProperty("weeklyProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WeeklyProgress { get; set; }

        /// <summary>If this progression has a weekly limit, this is that limit.</summary>
        [Newtonsoft.Json.JsonProperty("weeklyLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WeeklyLimit { get; set; }

        /// <summary>This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)</summary>
        [Newtonsoft.Json.JsonProperty("currentProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentProgress { get; set; }

        /// <summary>This is the level of the progression (for instance, the Character Level).</summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Level { get; set; }

        /// <summary>This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)</summary>
        [Newtonsoft.Json.JsonProperty("levelCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LevelCap { get; set; }

        /// <summary>Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)</summary>
        [Newtonsoft.Json.JsonProperty("stepIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StepIndex { get; set; }

        /// <summary>The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.</summary>
        [Newtonsoft.Json.JsonProperty("progressToNextLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressToNextLevel { get; set; }

        /// <summary>The total amount of progression (i.e. "Experience") needed in order to reach the next level.</summary>
        [Newtonsoft.Json.JsonProperty("nextLevelAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NextLevelAt { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProgression FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProgression>(data);
        }

    }

    /// <summary>Provides common properties for destiny definitions.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyDefinition
    {
        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyDefinition>(data);
        }

    }

    /// <summary>A "Progression" in Destiny is best explained by an example.
    /// A Character's "Level" is a progression: it has Experience that can be earned, levels that can be gained, and is evaluated and displayed at various points in the game. A Character's "Faction Reputation" is also a progression for much the same reason.
    /// Progression is used by a variety of systems, and the definition of a Progression will generally only be useful if combining with live data (such as a character's DestinyCharacterProgressionComponent.progressions property, which holds that character's live Progression states).
    /// Fundamentally, a Progression measures your "Level" by evaluating the thresholds in its Steps (one step per level, except for the last step which can be repeated indefinitely for "Levels" that have no ceiling) against the total earned "progression points"/experience. (for simplicity purposes, we will henceforth refer to earned progression points as experience, though it need not be a mechanic that in any way resembles Experience in a traditional sense).
    /// Earned experience is calculated in a variety of ways, determined by the Progression's scope. These go from looking up a stored value to performing exceedingly obtuse calculations. This is why we provide live data in DestinyCharacterProgressionComponent.progressions, so you don't have to worry about those.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProgressionDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyProgressionDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The "Scope" of the progression indicates the source of the progression's live data.
        /// See the DestinyProgressionScope enum for more info: but essentially, a Progression can either be backed by a stored value, or it can be a calculated derivative of other values.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>If this is True, then the progression doesn't have a maximum level.</summary>
        [Newtonsoft.Json.JsonProperty("repeatLastStep", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RepeatLastStep { get; set; }

        /// <summary>If there's a description of how to earn this progression in the local config, this will be that localized description.</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>Progressions are divided into Steps, which roughly equate to "Levels" in the traditional sense of a Progression. Notably, the last step can be repeated indefinitely if repeatLastStep is true, meaning that the calculation for your level is not as simple as comparing your current progress to the max progress of the steps. 
        /// These and more calculations are done for you if you grab live character progression data, such as in the DestinyCharacterProgressionComponent.</summary>
        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyProgressionStepDefinition> Steps { get; set; }

        /// <summary>If true, the Progression is something worth showing to users.
        /// If false, BNet isn't going to show it. But that doesn't mean you can't. We're all friends here.</summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>If the value exists, this is the hash identifier for the Faction that owns this Progression.
        /// This is purely for convenience, if you're looking at a progression and want to know if and who it's related to in terms of Faction Reputation.</summary>
        [Newtonsoft.Json.JsonProperty("factionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FactionHash { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProgressionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProgressionDefinition>(data);
        }

    }

    /// <summary>Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyDisplayPropertiesDefinition
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Note that "icon" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.
        /// But usually, it will be a small square image that you can use as... well, an icon.</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [Newtonsoft.Json.JsonProperty("hasIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasIcon { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyDisplayPropertiesDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyDisplayPropertiesDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProgressionDisplayPropertiesDefinition
    {
        /// <summary>When progressions show your "experience" gained, that bar has units (i.e. "Experience", "Bad Dudes Snuffed Out", whatever). This is the localized string for that unit of measurement.</summary>
        [Newtonsoft.Json.JsonProperty("displayUnitsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayUnitsName { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Note that "icon" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.
        /// But usually, it will be a small square image that you can use as... well, an icon.</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [Newtonsoft.Json.JsonProperty("hasIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasIcon { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProgressionDisplayPropertiesDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProgressionDisplayPropertiesDefinition>(data);
        }

    }

    /// <summary>There are many Progressions in Destiny (think Character Level, or Reputation). These are the various "Scopes" of Progressions, which affect many things: * Where/if they are stored * How they are calculated * Where they can be used in other game logic</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyProgressionScope
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

    }

    /// <summary>This defines a single Step in a progression (which roughly equates to a level. See DestinyProgressionDefinition for caveats).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProgressionStepDefinition
    {
        /// <summary>Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically.</summary>
        [Newtonsoft.Json.JsonProperty("stepName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StepName { get; set; }

        /// <summary>This appears to be, when you "level up", whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info.</summary>
        [Newtonsoft.Json.JsonProperty("displayEffectType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayEffectType DisplayEffectType { get; set; }

        /// <summary>The total amount of progression points/"experience" you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again.</summary>
        [Newtonsoft.Json.JsonProperty("progressTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressTotal { get; set; }

        /// <summary>A listing of items rewarded as a result of reaching this level.</summary>
        [Newtonsoft.Json.JsonProperty("rewardItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemQuantity> RewardItems { get; set; }

        /// <summary>If this progression step has a specific icon related to it, this is the icon to show.</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProgressionStepDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProgressionStepDefinition>(data);
        }

    }

    /// <summary>If progression is earned, this determines whether the progression shows visual effects on the character or its item - or neither.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyProgressionStepDisplayEffect
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>Used in a number of Destiny contracts to return data about an item stack and its quantity. Can optionally return an itemInstanceId if the item is instanced - in which case, the quantity returned will be 1. If it's not... uh, let me know okay? Thanks.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemQuantity
    {
        /// <summary>The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.</summary>
        [Newtonsoft.Json.JsonProperty("itemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemInstanceId { get; set; }

        /// <summary>The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemQuantity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemQuantity>(data);
        }

    }

    /// <summary>So much of what you see in Destiny is actually an Item used in a new and creative way. This is the definition for Items in Destiny, which started off as just entities that could exist in your Inventory but ended up being the backing data for so much more: quests, reward previews, slots, and subclasses.
    /// In practice, you will want to associate this data with "live" item data from a Bungie.Net Platform call: these definitions describe the item in generic, non-instanced terms: but an actual instance of an item can vary widely from these generic definitions.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyInventoryItemDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>If this item has a collectible related to it, this is the hash identifier of that collectible entry.</summary>
        [Newtonsoft.Json.JsonProperty("collectibleHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CollectibleHash { get; set; }

        /// <summary>A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.</summary>
        [Newtonsoft.Json.JsonProperty("secondaryIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondaryIcon { get; set; }

        /// <summary>Pulled from the secondary icon, this is the "secondary background" of the secondary icon. Confusing? Sure, that's why I call it "overlay" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.</summary>
        [Newtonsoft.Json.JsonProperty("secondaryOverlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondaryOverlay { get; set; }

        /// <summary>Pulled from the Secondary Icon, this is the "special" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.</summary>
        [Newtonsoft.Json.JsonProperty("secondarySpecial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondarySpecial { get; set; }

        /// <summary>Sometimes, an item will have a background color. Most notably this occurs with Emblems, who use the Background Color for small character nameplates such as the "friends" view you see in-game. There are almost certainly other items that have background color as well, though I have not bothered to investigate what items have it nor what purposes they serve: use it as you will.</summary>
        [Newtonsoft.Json.JsonProperty("backgroundColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BackgroundColor BackgroundColor { get; set; }

        /// <summary>If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.</summary>
        [Newtonsoft.Json.JsonProperty("screenshot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Screenshot { get; set; }

        /// <summary>The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.</summary>
        [Newtonsoft.Json.JsonProperty("itemTypeDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemTypeDisplayName { get; set; }

        /// <summary>A string identifier that the game's UI uses to determine how the item should be rendered in inventory screens and the like. This could really be anything - at the moment, we don't have the time to really breakdown and maintain all the possible strings this could be, partly because new ones could be added ad hoc. But if you want to use it to dictate your own UI, or look for items with a certain display style, go for it!</summary>
        [Newtonsoft.Json.JsonProperty("uiItemDisplayStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UiItemDisplayStyle { get; set; }

        /// <summary>It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.</summary>
        [Newtonsoft.Json.JsonProperty("itemTypeAndTierDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemTypeAndTierDisplayName { get; set; }

        /// <summary>In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.</summary>
        [Newtonsoft.Json.JsonProperty("displaySource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplaySource { get; set; }

        /// <summary>An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).</summary>
        [Newtonsoft.Json.JsonProperty("tooltipStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TooltipStyle { get; set; }

        /// <summary>If the item can be "used", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is "dismantle". Shocker)</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Action Action { get; set; }

        /// <summary>If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.</summary>
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inventory Inventory { get; set; }

        /// <summary>If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.</summary>
        [Newtonsoft.Json.JsonProperty("setData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetData SetData { get; set; }

        /// <summary>If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats Stats { get; set; }

        /// <summary>If the item is an emblem that has a special Objective attached to it - for instance, if the emblem tracks PVP Kills, or what-have-you. This is a bit different from, for example, the Vanguard Kill Tracker mod, which pipes data into the "art channel". When I get some time, I would like to standardize these so you can get at the values they expose without having to care about what they're being used for and how they are wired up, but for now here's the raw data.</summary>
        [Newtonsoft.Json.JsonProperty("emblemObjectiveHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EmblemObjectiveHash { get; set; }

        /// <summary>If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.</summary>
        [Newtonsoft.Json.JsonProperty("equippingBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquippingBlock EquippingBlock { get; set; }

        /// <summary>If this item can be rendered, this block will be non-null and will be populated with rendering information.</summary>
        [Newtonsoft.Json.JsonProperty("translationBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslationBlock TranslationBlock { get; set; }

        /// <summary>If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.</summary>
        [Newtonsoft.Json.JsonProperty("preview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Preview Preview { get; set; }

        /// <summary>If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, "quality", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.</summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quality Quality { get; set; }

        /// <summary>The conceptual "Value" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Value Value { get; set; }

        /// <summary>If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.</summary>
        [Newtonsoft.Json.JsonProperty("sourceData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceData SourceData { get; set; }

        /// <summary>If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.</summary>
        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Objectives Objectives { get; set; }

        /// <summary>If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.</summary>
        [Newtonsoft.Json.JsonProperty("plug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Plug Plug { get; set; }

        /// <summary>If this item has related items in a "Gear Set", this will be non-null and the relationships defined herein.</summary>
        [Newtonsoft.Json.JsonProperty("gearset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gearset Gearset { get; set; }

        /// <summary>If this item is a "reward sack" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.</summary>
        [Newtonsoft.Json.JsonProperty("sack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sack Sack { get; set; }

        /// <summary>If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.</summary>
        [Newtonsoft.Json.JsonProperty("sockets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sockets Sockets { get; set; }

        /// <summary>Summary data about the item.</summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Summary Summary { get; set; }

        /// <summary>If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/"Build" items.</summary>
        [Newtonsoft.Json.JsonProperty("talentGrid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TalentGrid TalentGrid { get; set; }

        /// <summary>If the item has stats, this block will be defined. It has the "raw" investment stats for the item. These investment stats don't take into account the ways that the items can spawn, nor do they take into account any Stat Group transformations. I have retained them for debugging purposes, but I do not know how useful people will find them.</summary>
        [Newtonsoft.Json.JsonProperty("investmentStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemInvestmentStatDefinition> InvestmentStats { get; set; }

        /// <summary>If the item has any *intrinsic* Perks (Perks that it will provide regardless of Sockets, Talent Grid, and other transitory state), they will be defined here.</summary>
        [Newtonsoft.Json.JsonProperty("perks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemPerkEntryDefinition> Perks { get; set; }

        /// <summary>If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.</summary>
        [Newtonsoft.Json.JsonProperty("loreHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoreHash { get; set; }

        /// <summary>There are times when the game will show you a "summary/vague" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.
        /// This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.</summary>
        [Newtonsoft.Json.JsonProperty("summaryItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SummaryItemHash { get; set; }

        /// <summary>If any animations were extracted from game content for this item, these will be the definitions of those animations.</summary>
        [Newtonsoft.Json.JsonProperty("animations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyAnimationReference> Animations { get; set; }

        /// <summary>BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.</summary>
        [Newtonsoft.Json.JsonProperty("allowActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowActions { get; set; }

        /// <summary>If we added any help or informational URLs about this item, these will be those links.</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<HyperlinkReference> Links { get; set; }

        /// <summary>The boolean will indicate to us (and you!) whether something *could* happen when you transfer this item from the Postmaster that might be considered a "destructive" action.
        /// It is not feasible currently to tell you (or ourelves!) in a consistent way whether this *will* actually cause a destructive action, so we are playing it safe: if it has the potential to do so, we will not allow it to be transferred from the Postmaster by default. You will need to check for this flag before transferring an item from the Postmaster, or else you'll end up receiving an error.</summary>
        [Newtonsoft.Json.JsonProperty("doesPostmasterPullHaveSideEffects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesPostmasterPullHaveSideEffects { get; set; }

        /// <summary>The intrinsic transferability of an item.
        /// I hate that this boolean is negative - but there's a reason.
        /// Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.</summary>
        [Newtonsoft.Json.JsonProperty("nonTransferrable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonTransferrable { get; set; }

        /// <summary>BNet attempts to make a more formal definition of item "Categories", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a "Weapon", that it's an "Auto Rifle", etc...)
        /// The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.</summary>
        [Newtonsoft.Json.JsonProperty("itemCategoryHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ItemCategoryHashes { get; set; }

        /// <summary>In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.</summary>
        [Newtonsoft.Json.JsonProperty("specialItemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecialItemType2 SpecialItemType { get; set; }

        /// <summary>A value indicating the "base" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a "Type". Still, it's handy in many situations.
        /// itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.</summary>
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemType ItemType { get; set; }

        /// <summary>A value indicating the "sub-type" of the item. For instance, where an item might have an itemType value "Weapon", this will be something more specific like "Auto Rifle".
        /// itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.</summary>
        [Newtonsoft.Json.JsonProperty("itemSubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemSubType ItemSubType { get; set; }

        /// <summary>We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.
        /// If you see a mis-classed item, please inform the developers in the Bungie API forum.</summary>
        [Newtonsoft.Json.JsonProperty("classType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassType ClassType { get; set; }

        /// <summary>If true, then you will be allowed to equip the item if you pass its other requirements.
        /// This being false means that you cannot equip the item under any circumstances.</summary>
        [Newtonsoft.Json.JsonProperty("equippable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Equippable { get; set; }

        /// <summary>Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.</summary>
        [Newtonsoft.Json.JsonProperty("damageTypeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> DamageTypeHashes { get; set; }

        /// <summary>This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.
        /// This damage type prediction will only use the following to determine potential damage types:
        /// - Intrinsic perks
        /// - Talent Node perks
        /// - Known, reusable plugs for sockets</summary>
        [Newtonsoft.Json.JsonProperty("damageTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DamageType> DamageTypes { get; set; }

        /// <summary>If the item has a damage type that could be considered to be default, it will be populated here.
        /// For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.</summary>
        [Newtonsoft.Json.JsonProperty("defaultDamageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefaultDamageType DefaultDamageType { get; set; }

        /// <summary>Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.
        /// I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.</summary>
        [Newtonsoft.Json.JsonProperty("defaultDamageTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultDamageTypeHash { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyInventoryItemDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyInventoryItemDefinition>(data);
        }

    }

    /// <summary>Represents a color whose RGBA values are all represented as values between 0 and 255.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyColor
    {
        [Newtonsoft.Json.JsonProperty("red", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Red { get; set; }

        [Newtonsoft.Json.JsonProperty("green", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Green { get; set; }

        [Newtonsoft.Json.JsonProperty("blue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Blue { get; set; }

        [Newtonsoft.Json.JsonProperty("alpha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Alpha { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyColor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyColor>(data);
        }

    }

    /// <summary>If an item can have an action performed on it (like "Dismantle"), it will be defined here if you care.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemActionBlockDefinition
    {
        /// <summary>Localized text for the verb of the action being performed.</summary>
        [Newtonsoft.Json.JsonProperty("verbName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VerbName { get; set; }

        /// <summary>Localized text describing the action being performed.</summary>
        [Newtonsoft.Json.JsonProperty("verbDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VerbDescription { get; set; }

        /// <summary>The content has this property, however it's not entirely clear how it is used.</summary>
        [Newtonsoft.Json.JsonProperty("isPositive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPositive { get; set; }

        /// <summary>If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen's data itself.</summary>
        [Newtonsoft.Json.JsonProperty("overlayScreenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverlayScreenName { get; set; }

        /// <summary>The icon associated with the overlay screen for the action, if any.</summary>
        [Newtonsoft.Json.JsonProperty("overlayIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverlayIcon { get; set; }

        /// <summary>The number of seconds to delay before allowing this action to be performed again.</summary>
        [Newtonsoft.Json.JsonProperty("requiredCooldownSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RequiredCooldownSeconds { get; set; }

        /// <summary>If the action requires other items to exist or be destroyed, this is the list of those items and requirements.</summary>
        [Newtonsoft.Json.JsonProperty("requiredItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemActionRequiredItemDefinition> RequiredItems { get; set; }

        /// <summary>If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.</summary>
        [Newtonsoft.Json.JsonProperty("progressionRewards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyProgressionRewardDefinition> ProgressionRewards { get; set; }

        /// <summary>The internal identifier for the action.</summary>
        [Newtonsoft.Json.JsonProperty("actionTypeLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionTypeLabel { get; set; }

        /// <summary>Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.</summary>
        [Newtonsoft.Json.JsonProperty("requiredLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequiredLocation { get; set; }

        /// <summary>The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.</summary>
        [Newtonsoft.Json.JsonProperty("requiredCooldownHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RequiredCooldownHash { get; set; }

        /// <summary>If true, the item is deleted when the action completes.</summary>
        [Newtonsoft.Json.JsonProperty("deleteOnAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeleteOnAction { get; set; }

        /// <summary>If true, the entire stack is deleted when the action completes.</summary>
        [Newtonsoft.Json.JsonProperty("consumeEntireStack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConsumeEntireStack { get; set; }

        /// <summary>If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.</summary>
        [Newtonsoft.Json.JsonProperty("useOnAcquire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseOnAcquire { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemActionBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemActionBlockDefinition>(data);
        }

    }

    /// <summary>The definition of an item and quantity required in a character's inventory in order to perform an action.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemActionRequiredItemDefinition
    {
        /// <summary>The minimum quantity of the item you have to have.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>The hash identifier of the item you need to have. Use it to look up the DestinyInventoryItemDefinition for more info.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>If true, the item/quantity will be deleted from your inventory when the action is performed. Otherwise, you'll retain these required items after the action is complete.</summary>
        [Newtonsoft.Json.JsonProperty("deleteOnAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeleteOnAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemActionRequiredItemDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemActionRequiredItemDefinition>(data);
        }

    }

    /// <summary>Inventory Items can reward progression when actions are performed on them. A common example of this in Destiny 1 was Bounties, which would reward Experience on your Character and the like when you completed the bounty.
    /// Note that this maps to a DestinyProgressionMappingDefinition, and *not* a DestinyProgressionDefinition directly. This is apparently so that multiple progressions can be granted progression points/experience at the same time.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProgressionRewardDefinition
    {
        /// <summary>The hash identifier of the DestinyProgressionMappingDefinition that contains the progressions for which experience should be applied.</summary>
        [Newtonsoft.Json.JsonProperty("progressionMappingHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionMappingHash { get; set; }

        /// <summary>The amount of experience to give to each of the mapped progressions.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Amount { get; set; }

        /// <summary>If true, the game's internal mechanisms to throttle progression should be applied.</summary>
        [Newtonsoft.Json.JsonProperty("applyThrottles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyThrottles { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProgressionRewardDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProgressionRewardDefinition>(data);
        }

    }

    /// <summary>Aggregations of multiple progressions.
    /// These are used to apply rewards to multiple progressions at once. They can sometimes have human readable data as well, but only extremely sporadically.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProgressionMappingDefinition
    {
        /// <summary>Infrequently defined in practice. Defer to the individual progressions' display properties.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties DisplayProperties { get; set; }

        /// <summary>The localized unit of measurement for progression across the progressions defined in this mapping. Unfortunately, this is very infrequently defined. Defer to the individual progressions' display units.</summary>
        [Newtonsoft.Json.JsonProperty("displayUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayUnits { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProgressionMappingDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProgressionMappingDefinition>(data);
        }

    }

    /// <summary>If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item's relationship with the inventory.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemInventoryBlockDefinition
    {
        /// <summary>If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.</summary>
        [Newtonsoft.Json.JsonProperty("stackUniqueLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StackUniqueLabel { get; set; }

        /// <summary>The maximum quantity of this item that can exist in a stack.</summary>
        [Newtonsoft.Json.JsonProperty("maxStackSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxStackSize { get; set; }

        /// <summary>The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this "bucketHash", but too many things refer to it now. Sigh.</summary>
        [Newtonsoft.Json.JsonProperty("bucketTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BucketTypeHash { get; set; }

        /// <summary>If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.</summary>
        [Newtonsoft.Json.JsonProperty("recoveryBucketTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecoveryBucketTypeHash { get; set; }

        /// <summary>The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.</summary>
        [Newtonsoft.Json.JsonProperty("tierTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TierTypeHash { get; set; }

        /// <summary>If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).</summary>
        [Newtonsoft.Json.JsonProperty("isInstanceItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInstanceItem { get; set; }

        /// <summary>The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.</summary>
        [Newtonsoft.Json.JsonProperty("tierTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TierTypeName { get; set; }

        /// <summary>The enumeration matching the tier type of the item to known values, again for convenience sake.</summary>
        [Newtonsoft.Json.JsonProperty("tierType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TierType2 TierType { get; set; }

        /// <summary>The tooltip message to show, if any, when the item expires.</summary>
        [Newtonsoft.Json.JsonProperty("expirationTooltip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationTooltip { get; set; }

        /// <summary>If the item expires while playing in an activity, we show a different message.</summary>
        [Newtonsoft.Json.JsonProperty("expiredInActivityMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpiredInActivityMessage { get; set; }

        /// <summary>If the item expires in orbit, we show a... more different message. ("Consummate V's, consummate!")</summary>
        [Newtonsoft.Json.JsonProperty("expiredInOrbitMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpiredInOrbitMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("suppressExpirationWhenObjectivesComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuppressExpirationWhenObjectivesComplete { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemInventoryBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemInventoryBlockDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TierType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    /// <summary>An Inventory (be it Character or Profile level) is comprised of many Buckets. An example of a bucket is "Primary Weapons", where all of the primary weapons on a character are gathered together into a single visual element in the UI: a subset of the inventory that has a limited number of slots, and in this case also has an associated Equipment Slot for equipping an item in the bucket.
    /// Item definitions declare what their "default" bucket is (DestinyInventoryItemDefinition.inventory.bucketTypeHash), and Item instances will tell you which bucket they are currently residing in (DestinyItemComponent.bucketHash). You can use this information along with the DestinyInventoryBucketDefinition to show these items grouped by bucket.
    /// You cannot transfer an item to a bucket that is not its Default without going through a Vendor's "accepted items" (DestinyVendorDefinition.acceptedItems). This is how transfer functionality like the Vault is implemented, as a feature of a Vendor. See the vendor's acceptedItems property for more details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyInventoryBucketDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>Where the bucket is found. 0 = Character, 1 = Account</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope2 Scope { get; set; }

        /// <summary>An enum value for what items can be found in the bucket. See the BucketCategory enum for more details.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Category Category { get; set; }

        /// <summary>Use this property to provide a quick-and-dirty recommended ordering for buckets in the UI. Most UIs will likely want to forsake this for something more custom and manual.</summary>
        [Newtonsoft.Json.JsonProperty("bucketOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BucketOrder { get; set; }

        /// <summary>The maximum # of item "slots" in a bucket. A slot is a given combination of item + quantity.
        /// For instance, a Weapon will always take up a single slot, and always have a quantity of 1. But a material could take up only a single slot with hundreds of quantity.</summary>
        [Newtonsoft.Json.JsonProperty("itemCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemCount { get; set; }

        /// <summary>Sometimes, inventory buckets represent conceptual "locations" in the game that might not be expected. This value indicates the conceptual location of the bucket, regardless of where it is actually contained on the character/account. 
        /// See ItemLocation for details. 
        /// Note that location includes the Vault and the Postmaster (both of whom being just inventory buckets with additional actions that can be performed on them through a Vendor)</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        /// <summary>If TRUE, there is at least one Vendor that can transfer items to/from this bucket. See the DestinyVendorDefinition's acceptedItems property for more information on how transferring works.</summary>
        [Newtonsoft.Json.JsonProperty("hasTransferDestination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasTransferDestination { get; set; }

        /// <summary>If True, this bucket is enabled. Disabled buckets may include buckets that were included for test purposes, or that were going to be used but then were abandoned but never removed from content *cough*.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>if a FIFO bucket fills up, it will delete the oldest item from said bucket when a new item tries to be added to it. If this is FALSE, the bucket will not allow new items to be placed in it until room is made by the user manually deleting items from it. You can see an example of this with the Postmaster's bucket.</summary>
        [Newtonsoft.Json.JsonProperty("fifo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fifo { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyInventoryBucketDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyInventoryBucketDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BucketScope
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BucketCategory
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemLocation
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>Defines the tier type of an item. Mostly this provides human readable properties for types like Common, Rare, etc...
    /// It also provides some base data for infusion that could be useful.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemTierTypeDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>If this tier defines infusion properties, they will be contained here.</summary>
        [Newtonsoft.Json.JsonProperty("infusionProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfusionProcess InfusionProcess { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemTierTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemTierTypeDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemTierTypeInfusionBlock
    {
        /// <summary>The default portion of quality that will transfer from the infuser to the infusee item. (InfuserQuality - InfuseeQuality) * baseQualityTransferRatio = base quality transferred.</summary>
        [Newtonsoft.Json.JsonProperty("baseQualityTransferRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BaseQualityTransferRatio { get; set; }

        /// <summary>As long as InfuserQuality > InfuseeQuality, the amount of quality bestowed is guaranteed to be at least this value, even if the transferRatio would dictate that it should be less. The total amount of quality that ends up in the Infusee cannot exceed the Infuser's quality however (for instance, if you infuse a 300 item with a 301 item and the minimum quality increment is 10, the infused item will not end up with 310 quality)</summary>
        [Newtonsoft.Json.JsonProperty("minimumQualityIncrement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumQualityIncrement { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemTierTypeInfusionBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemTierTypeInfusionBlock>(data);
        }

    }

    /// <summary>Primarily for Quests, this is the definition of properties related to the item if it is a quest and its various quest steps.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSetBlockDefinition
    {
        /// <summary>A collection of hashes of set items, for items such as Quest Metadata items that possess this data.</summary>
        [Newtonsoft.Json.JsonProperty("itemList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSetBlockEntryDefinition> ItemList { get; set; }

        /// <summary>If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest.</summary>
        [Newtonsoft.Json.JsonProperty("requireOrderedSetItemAdd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequireOrderedSetItemAdd { get; set; }

        /// <summary>If true, the UI should treat this quest as "featured"</summary>
        [Newtonsoft.Json.JsonProperty("setIsFeatured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SetIsFeatured { get; set; }

        /// <summary>A string identifier we can use to attempt to identify the category of the Quest.</summary>
        [Newtonsoft.Json.JsonProperty("setType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SetType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSetBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSetBlockDefinition>(data);
        }

    }

    /// <summary>Defines a particular entry in an ItemSet (AKA a particular Quest Step in a Quest)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSetBlockEntryDefinition
    {
        /// <summary>Used for tracking which step a user reached. These values will be populated in the user's internal state, which we expose externally as a more usable DestinyQuestStatus object. If this item has been obtained, this value will be set in trackingUnlockValueHash.</summary>
        [Newtonsoft.Json.JsonProperty("trackingValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackingValue { get; set; }

        /// <summary>This is the hash identifier for a DestinyInventoryItemDefinition representing this quest step.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSetBlockEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSetBlockEntryDefinition>(data);
        }

    }

    /// <summary>Information about the item's calculated stats, with as much data as we can find for the stats without having an actual instance of the item.
    /// Note that this means the entire concept of providing these stats is fundamentally insufficient: we cannot predict with 100% accuracy the conditions under which an item can spawn, so we use various heuristics to attempt to simulate the conditions as accurately as possible. Actual stats for items in-game can and will vary, but these should at least be useful base points for comparison and display.
    /// It is also worth noting that some stats, like Magazine size, have further calculations performed on them by scripts in-game and on the game servers that BNet does not have access to. We cannot know how those stats are further transformed, and thus some stats will be inaccurate even on instances of items in BNet vs. how they appear in-game. This is a known limitation of our item statistics, without any planned fix.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemStatBlockDefinition
    {
        /// <summary>If true, the game won't show the "primary" stat on this item when you inspect it.
        /// NOTE: This is being manually mapped, because I happen to want it in a block that isn't going to directly create this derivative block.</summary>
        [Newtonsoft.Json.JsonProperty("disablePrimaryStatDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisablePrimaryStatDisplay { get; set; }

        /// <summary>If the item's stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.
        /// If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don't have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.</summary>
        [Newtonsoft.Json.JsonProperty("statGroupHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatGroupHash { get; set; }

        /// <summary>If you are looking for precomputed values for the stats on a weapon, this is where they are stored. Technically these are the "Display" stat values. Please see DestinyStatsDefinition for what Display Stat Values means, it's a very long story... but essentially these are the closest values BNet can get to the item stats that you see in-game.
        /// These stats are keyed by the DestinyStatDefinition's hash identifier for the stat that's found on the item.</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyInventoryItemStatDefinition> Stats { get; set; }

        /// <summary>A quick and lazy way to determine whether any stat other than the "primary" stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they're not part of the "Stat Group" and thus we wouldn't display them in our UI. If this is False, then we're not going to display any of these stats other than the primary one.</summary>
        [Newtonsoft.Json.JsonProperty("hasDisplayableStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasDisplayableStats { get; set; }

        /// <summary>This stat is determined to be the "primary" stat, and can be looked up in the stats or any other stat collection related to the item.
        /// Use this hash to look up the stat's value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("primaryBaseStatHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PrimaryBaseStatHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemStatBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemStatBlockDefinition>(data);
        }

    }

    /// <summary>Defines a specific stat value on an item, and the minimum/maximum range that we could compute for the item based on our heuristics for how the item might be generated.
    /// Not guaranteed to match real-world instances of the item, but should hopefully at least be close. If it's not close, let us know on the Bungie API forums.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyInventoryItemStatDefinition
    {
        /// <summary>The hash for the DestinyStatDefinition representing this stat.</summary>
        [Newtonsoft.Json.JsonProperty("statHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatHash { get; set; }

        /// <summary>This value represents the stat value assuming the minimum possible roll but accounting for any mandatory bonuses that should be applied to the stat on item creation.
        /// In Destiny 1, this was different from the "minimum" value because there were certain conditions where an item could be theoretically lower level/value than the initial roll. 
        /// In Destiny 2, this is not possible unless Talent Grids begin to be used again for these purposes or some other system change occurs... thus in practice, value and minimum should be the same in Destiny 2. Good riddance.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }

        /// <summary>The minimum possible value for this stat that we think the item can roll.</summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minimum { get; set; }

        /// <summary>The maximum possible value for this stat that we think the item can roll.
        /// WARNING: In Destiny 1, this field was calculated using the potential stat rolls on the item's talent grid. In Destiny 2, items no longer have meaningful talent grids and instead have sockets: but the calculation of this field was never altered to adapt to this change. As such, this field should be considered deprecated until we can address this oversight.</summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Maximum { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyInventoryItemStatDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyInventoryItemStatDefinition>(data);
        }

    }

    /// <summary>This represents a stat that's applied to a character or an item (such as a weapon, piece of armor, or a vehicle).
    /// An example of a stat might be Attack Power on a weapon.
    /// Stats go through a complex set of transformations before they end up being shown to the user as a number or a progress bar, and those transformations are fundamentally intertwined with the concept of a "Stat Group" (DestinyStatGroupDefinition). Items have both Stats and a reference to a Stat Group, and it is the Stat Group that takes the raw stat information and gives it both rendering metadata (such as whether to show it as a number or a progress bar) and the final transformation data (interpolation tables to turn the raw investment stat into a display stat). Please see DestinyStatGroupDefinition for more information on that transformational process.
    /// Stats are segregated from Stat Groups because different items and types of items can refer to the same stat, but have different "scales" for the stat while still having the same underlying value. For example, both a Shotgun and an Auto Rifle may have a "raw" impact stat of 50, but the Auto Rifle's Stat Group will scale that 50 down so that, when it is displayed, it is a smaller value relative to the shotgun. (this is a totally made up example, don't assume shotguns have naturally higher impact than auto rifles because of this)
    /// A final caveat is that some stats, even after this "final" transformation, go through yet another set of transformations directly in the game as a result of dynamic, stateful scripts that get run. BNet has no access to these scripts, nor any way to know which scripts get executed. As a result, the stats for an item that you see in-game - particularly for stats that are often impacted by Perks, like Magazine Size - can change dramatically from what we return on Bungie.Net. This is a known issue with no fix coming down the pipeline. Take these stats with a grain of salt.
    /// Stats actually go through four transformations, for those interested:
    /// 1) "Sandbox" stat, the "most raw" form. These are pretty much useless without transformations applied, and thus are not currently returned in the API. If you really want these, we can provide them. Maybe someone could do something cool with it?
    /// 2) "Investment" stat (the stat's value after DestinyStatDefinition's interpolation tables and aggregation logic is applied to the "Sandbox" stat value)
    /// 3) "Display" stat (the stat's base UI-visible value after DestinyStatGroupDefinition's interpolation tables are applied to the Investment Stat value. For most stats, this is what is displayed.)
    /// 4) Underlying in-game stat (the stat's actual value according to the game, after the game runs dynamic scripts based on the game and character's state. This is the final transformation that BNet does not have access to. For most stats, this is not actually displayed to the user, with the exception of Magazine Size which is then piped back to the UI for display in-game, but not to BNet.)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyStatDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>Stats can exist on a character or an item, and they may potentially be aggregated in different ways. The DestinyStatAggregationType enum value indicates the way that this stat is being aggregated.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AggregationType AggregationType { get; set; }

        /// <summary>True if the stat is computed rather than being delivered as a raw value on items.
        /// For instance, the Light stat in Destiny 1 was a computed stat.</summary>
        [Newtonsoft.Json.JsonProperty("hasComputedBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasComputedBlock { get; set; }

        /// <summary>The category of the stat, according to the game.</summary>
        [Newtonsoft.Json.JsonProperty("statCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatCategory StatCategory { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyStatDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyStatDefinition>(data);
        }

    }

    /// <summary>When a Stat (DestinyStatDefinition) is aggregated, this is the rules used for determining the level and formula used for aggregation.
    /// * CharacterAverage = apply a weighted average using the related DestinyStatGroupDefinition on the DestinyInventoryItemDefinition across the character's equipped items. See both of those definitions for details. * Character = don't aggregate: the stat should be located and used directly on the character. * Item = don't aggregate: the stat should be located and used directly on the item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyStatAggregationType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>At last, stats have categories. Use this for whatever purpose you might wish.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyStatCategory
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>When an inventory item (DestinyInventoryItemDefinition) has Stats (such as Attack Power), the item will refer to a Stat Group. This definition enumerates the properties used to transform the item's "Investment" stats into "Display" stats.
    /// See DestinyStatDefinition's documentation for information about the transformation of Stats, and the meaning of an Investment vs. a Display stat.
    /// If you don't want to do these calculations on your own, fear not: pulling live data from the BNet endpoints will return display stat values pre-computed and ready for you to use. I highly recommend this approach, saves a lot of time and also accounts for certain stat modifiers that can't easily be accounted for without live data (such as stat modifiers on Talent Grids and Socket Plugs)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyStatGroupDefinition
    {
        /// <summary>The maximum possible value that any stat in this group can be transformed into.
        /// This is used by stats that *don't* have scaledStats entries below, but that still need to be displayed as a progress bar, in which case this is used as the upper bound for said progress bar. (the lower bound is always 0)</summary>
        [Newtonsoft.Json.JsonProperty("maximumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumValue { get; set; }

        /// <summary>This apparently indicates the position of the stats in the UI? I've returned it in case anyone can use it, but it's not of any use to us on BNet. Something's being lost in translation with this value.</summary>
        [Newtonsoft.Json.JsonProperty("uiPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UiPosition { get; set; }

        /// <summary>Any stat that requires scaling to be transformed from an "Investment" stat to a "Display" stat will have an entry in this list. For more information on what those types of stats mean and the transformation process, see DestinyStatDefinition.
        /// In retrospect, I wouldn't mind if this was a dictionary keyed by the stat hash instead. But I'm going to leave it be because [[After Apple Picking]].</summary>
        [Newtonsoft.Json.JsonProperty("scaledStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyStatDisplayDefinition> ScaledStats { get; set; }

        /// <summary>The game has the ability to override, based on the stat group, what the localized text is that is displayed for Stats being shown on the item.
        /// Mercifully, no Stat Groups use this feature currently. If they start using them, we'll all need to start using them (and those of you who are more prudent than I am can go ahead and start pre-checking for this.)</summary>
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyStatOverrideDefinition> Overrides { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyStatGroupDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyStatGroupDefinition>(data);
        }

    }

    /// <summary>Describes the way that an Item Stat (see DestinyStatDefinition) is transformed using the DestinyStatGroupDefinition related to that item. See both of the aforementioned definitions for more information about the stages of stat transformation.
    /// This represents the transformation of a stat into a "Display" stat (the closest value that BNet can get to the in-game display value of the stat)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyStatDisplayDefinition
    {
        /// <summary>The hash identifier for the stat being transformed into a Display stat.
        /// Use it to look up the DestinyStatDefinition, or key into a DestinyInventoryItemDefinition's stats property.</summary>
        [Newtonsoft.Json.JsonProperty("statHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatHash { get; set; }

        /// <summary>Regardless of the output of interpolation, this is the maximum possible value that the stat can be. It should also be used as the upper bound for displaying the stat as a progress bar (the minimum always being 0)</summary>
        [Newtonsoft.Json.JsonProperty("maximumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumValue { get; set; }

        /// <summary>If this is true, the stat should be displayed as a number. Otherwise, display it as a progress bar. Or, you know, do whatever you want. There's no displayAsNumeric police.</summary>
        [Newtonsoft.Json.JsonProperty("displayAsNumeric", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayAsNumeric { get; set; }

        /// <summary>The interpolation table representing how the Investment Stat is transformed into a Display Stat. 
        /// See DestinyStatDefinition for a description of the stages of stat transformation.</summary>
        [Newtonsoft.Json.JsonProperty("displayInterpolation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InterpolationPoint> DisplayInterpolation { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyStatDisplayDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyStatDisplayDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InterpolationPoint
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InterpolationPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InterpolationPoint>(data);
        }

    }

    /// <summary>Stat Groups (DestinyStatGroupDefinition) has the ability to override the localized text associated with stats that are to be shown on the items with which they are associated.
    /// This defines a specific overridden stat. You could theoretically check these before rendering your stat UI, and for each stat that has an override show these displayProperties instead of those on the DestinyStatDefinition.
    /// Or you could be like us, and skip that for now because the game has yet to actually use this feature. But know that it's here, waiting for a resilliant young designer to take up the mantle and make us all look foolish by showing the wrong name for stats.
    /// Note that, if this gets used, the override will apply only to items using the overriding Stat Group. Other items will still show the default stat's name/description.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyStatOverrideDefinition
    {
        /// <summary>The hash identifier of the stat whose display properties are being overridden.</summary>
        [Newtonsoft.Json.JsonProperty("statHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatHash { get; set; }

        /// <summary>The display properties to show instead of the base DestinyStatDefinition display properties.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties2 DisplayProperties { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyStatOverrideDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyStatOverrideDefinition>(data);
        }

    }

    /// <summary>Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyEquippingBlockDefinition
    {
        /// <summary>If the item is part of a gearset, this is a reference to that gearset item.</summary>
        [Newtonsoft.Json.JsonProperty("gearsetItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GearsetItemHash { get; set; }

        /// <summary>If defined, this is the label used to check if the item has other items of matching types already equipped. 
        /// For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).</summary>
        [Newtonsoft.Json.JsonProperty("uniqueLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueLabel { get; set; }

        /// <summary>The hash of that unique label. Does not point to a specific definition.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueLabelHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UniqueLabelHash { get; set; }

        /// <summary>An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentSlotTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipmentSlotTypeHash { get; set; }

        /// <summary>These are custom attributes on the equippability of the item.
        /// For now, this can only be "equip on acquire", which would mean that the item will be automatically equipped as soon as you pick it up.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Attributes Attributes { get; set; }

        /// <summary>Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.</summary>
        [Newtonsoft.Json.JsonProperty("ammoType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmmoType AmmoType { get; set; }

        /// <summary>These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.</summary>
        [Newtonsoft.Json.JsonProperty("displayStrings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> DisplayStrings { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyEquippingBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyEquippingBlockDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum EquippingItemBlockAttributes
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyAmmunitionType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>Characters can not only have Inventory buckets (containers of items that are generally matched by their type or functionality), they can also have Equipment Slots.
    /// The Equipment Slot is an indicator that the related bucket can have instanced items equipped on the character. For instance, the Primary Weapon bucket has an Equipment Slot that determines whether you can equip primary weapons, and holds the association between its slot and the inventory bucket from which it can have items equipped.
    /// An Equipment Slot must have a related Inventory Bucket, but not all inventory buckets must have Equipment Slots.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyEquipmentSlotDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>These technically point to "Equipment Category Definitions". But don't get excited. There's nothing of significant value in those definitions, so I didn't bother to expose them. You can use the hash here to group equipment slots by common functionality, which serves the same purpose as if we had the Equipment Category definitions exposed.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentCategoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipmentCategoryHash { get; set; }

        /// <summary>The inventory bucket that owns this equipment slot.</summary>
        [Newtonsoft.Json.JsonProperty("bucketTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BucketTypeHash { get; set; }

        /// <summary>If True, equipped items should have their custom art dyes applied when rendering the item. Otherwise, custom art dyes on an item should be ignored if the item is equipped in this slot.</summary>
        [Newtonsoft.Json.JsonProperty("applyCustomArtDyes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyCustomArtDyes { get; set; }

        /// <summary>The Art Dye Channels that apply to this equipment slot.</summary>
        [Newtonsoft.Json.JsonProperty("artDyeChannels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyArtDyeReference> ArtDyeChannels { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyEquipmentSlotDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyEquipmentSlotDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyArtDyeReference
    {
        [Newtonsoft.Json.JsonProperty("artDyeChannelHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArtDyeChannelHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyArtDyeReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyArtDyeReference>(data);
        }

    }

    /// <summary>This Block defines the rendering data associated with the item, if any.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemTranslationBlockDefinition
    {
        [Newtonsoft.Json.JsonProperty("weaponPatternIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeaponPatternIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("weaponPatternHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WeaponPatternHash { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultDyes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DyeReference> DefaultDyes { get; set; }

        [Newtonsoft.Json.JsonProperty("lockedDyes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DyeReference> LockedDyes { get; set; }

        [Newtonsoft.Json.JsonProperty("customDyes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DyeReference> CustomDyes { get; set; }

        [Newtonsoft.Json.JsonProperty("arrangements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyGearArtArrangementReference> Arrangements { get; set; }

        [Newtonsoft.Json.JsonProperty("hasGeometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasGeometry { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemTranslationBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemTranslationBlockDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DyeReference
    {
        [Newtonsoft.Json.JsonProperty("channelHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChannelHash { get; set; }

        [Newtonsoft.Json.JsonProperty("dyeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DyeHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DyeReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DyeReference>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyGearArtArrangementReference
    {
        [Newtonsoft.Json.JsonProperty("classHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClassHash { get; set; }

        [Newtonsoft.Json.JsonProperty("artArrangementHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArtArrangementHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyGearArtArrangementReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyGearArtArrangementReference>(data);
        }

    }

    /// <summary>Items like Sacks or Boxes can have items that it shows in-game when you view details that represent the items you can obtain if you use or acquire the item.
    /// This defines those categories, and gives some insights into that data's source.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemPreviewBlockDefinition
    {
        /// <summary>A string that the game UI uses as a hint for which detail screen to show for the item. You, too, can leverage this for your own custom screen detail views. Note, however, that these are arbitrarily defined by designers: there's no guarantees of a fixed, known number of these - so fall back to something reasonable if you don't recognize it.</summary>
        [Newtonsoft.Json.JsonProperty("screenStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScreenStyle { get; set; }

        /// <summary>If the preview data is derived from a fake "Preview" Vendor, this will be the hash identifier for the DestinyVendorDefinition of that fake vendor.</summary>
        [Newtonsoft.Json.JsonProperty("previewVendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreviewVendorHash { get; set; }

        /// <summary>If the preview has an associated action (like "Open"), this will be the localized string for that action.</summary>
        [Newtonsoft.Json.JsonProperty("previewActionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviewActionString { get; set; }

        /// <summary>This is a list of the items being previewed, categorized in the same way as they are in the preview UI.</summary>
        [Newtonsoft.Json.JsonProperty("derivedItemCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyDerivedItemCategoryDefinition> DerivedItemCategories { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemPreviewBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemPreviewBlockDefinition>(data);
        }

    }

    /// <summary>A shortcut for the fact that some items have a "Preview Vendor" - See DestinyInventoryItemDefinition.preview.previewVendorHash - that is intended to be used to show what items you can get as a result of acquiring or using this item.
    /// A common example of this in Destiny 1 was Eververse "Boxes," which could have many possible items. This "Preview Vendor" is not a vendor you can actually see in the game, but it defines categories and sale items for all of the possible items you could get from the Box so that the game can show them to you. We summarize that info here so that you don't have to do that Vendor lookup and aggregation manually.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyDerivedItemCategoryDefinition
    {
        /// <summary>The localized string for the category title. This will be something describing the items you can get as a group, or your likelihood/the quantity you'll get.</summary>
        [Newtonsoft.Json.JsonProperty("categoryDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryDescription { get; set; }

        /// <summary>This is the list of all of the items for this category and the basic properties we'll know about them.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyDerivedItemDefinition> Items { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyDerivedItemCategoryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyDerivedItemCategoryDefinition>(data);
        }

    }

    /// <summary>This is a reference to, and summary data for, a specific item that you can get as a result of Using or Acquiring some other Item (For example, this could be summary information for an Emote that you can get by opening an an Eververse Box) See DestinyDerivedItemCategoryDefinition for more information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyDerivedItemDefinition
    {
        /// <summary>The hash for the DestinyInventoryItemDefinition of this derived item, if there is one. Sometimes we are given this information as a manual override, in which case there won't be an actual DestinyInventoryItemDefinition for what we display, but you can still show the strings from this object itself.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>The name of the derived item.</summary>
        [Newtonsoft.Json.JsonProperty("itemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemName { get; set; }

        /// <summary>Additional details about the derived item, in addition to the description.</summary>
        [Newtonsoft.Json.JsonProperty("itemDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDetail { get; set; }

        /// <summary>A brief description of the item.</summary>
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }

        /// <summary>An icon for the item.</summary>
        [Newtonsoft.Json.JsonProperty("iconPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconPath { get; set; }

        /// <summary>If the item was derived from a "Preview Vendor", this will be an index into the DestinyVendorDefinition's itemList property. Otherwise, -1.</summary>
        [Newtonsoft.Json.JsonProperty("vendorItemIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorItemIndex { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyDerivedItemDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyDerivedItemDefinition>(data);
        }

    }

    /// <summary>These are the definitions for Vendors.
    /// In Destiny, a Vendor can be a lot of things - some things that you wouldn't expect, and some things that you don't even see directly in the game. Vendors are the Dolly Levi of the Destiny universe.
    /// - Traditional Vendors as you see in game: people who you come up to and who give you quests, rewards, or who you can buy things from.
    /// - Kiosks/Collections, which are really just Vendors that don't charge currency (or charge some pittance of a currency) and whose gating for purchases revolves more around your character's state.
    /// - Previews for rewards or the contents of sacks. These are implemented as Vendors, where you can't actually purchase from them but the items that they have for sale and the categories of sale items reflect the rewards or contents of the sack. This is so that the game could reuse the existing Vendor display UI for rewards and save a bunch of wheel reinvention.
    /// - Item Transfer capabilities, like the Vault and Postmaster. Vendors can have "acceptedItem" buckets that determine the source and destination buckets for transfers. When you interact with such a vendor, these buckets are what gets shown in the UI instead of any items that the Vendor would have for sale. Yep, the Vault is a vendor.
    /// It is pretty much guaranteed that they'll be used for even more features in the future. They have come to be seen more as generic categorized containers for items than "vendors" in a traditional sense, for better or worse.
    /// Where possible and time allows, we'll attempt to split those out into their own more digestible derived "Definitions": but often time does not allow that, as you can see from the above ways that vendors are used which we never split off from Vendor Definitions externally.
    /// Since Vendors are so many things to so many parts of the game, the definition is understandably complex. You will want to combine this data with live Vendor information from the API when it is available.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyVendorDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>If the vendor has a custom localized string describing the "buy" action, that is returned here.</summary>
        [Newtonsoft.Json.JsonProperty("buyString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyString { get; set; }

        /// <summary>Ditto for selling. Not that you can sell items to a vendor anymore. Will it come back? Who knows. The string's still there.</summary>
        [Newtonsoft.Json.JsonProperty("sellString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellString { get; set; }

        /// <summary>If the vendor has an item that should be displayed as the "featured" item, this is the hash identifier for that DestinyVendorItemDefinition.
        /// Apparently this is usually a related currency, like a reputation token. But it need not be restricted to that.</summary>
        [Newtonsoft.Json.JsonProperty("displayItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayItemHash { get; set; }

        /// <summary>If this is true, you aren't allowed to buy whatever the vendor is selling.</summary>
        [Newtonsoft.Json.JsonProperty("inhibitBuying", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InhibitBuying { get; set; }

        /// <summary>If this is true, you're not allowed to sell whatever the vendor is buying.</summary>
        [Newtonsoft.Json.JsonProperty("inhibitSelling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InhibitSelling { get; set; }

        /// <summary>If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.
        /// The game UI and BNet often mine the faction definition for additional elements and details to place on the screen, such as the faction's Progression status (aka "Reputation").</summary>
        [Newtonsoft.Json.JsonProperty("factionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FactionHash { get; set; }

        /// <summary>A number used for calculating the frequency of a vendor's inventory resetting/refreshing.
        /// Don't worry about calculating this - we do it on the server side and send you the next refresh date with the live data.</summary>
        [Newtonsoft.Json.JsonProperty("resetIntervalMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResetIntervalMinutes { get; set; }

        /// <summary>Again, used for reset/refreshing of inventory. Don't worry too much about it. Unless you want to.</summary>
        [Newtonsoft.Json.JsonProperty("resetOffsetMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResetOffsetMinutes { get; set; }

        /// <summary>If an item can't be purchased from the vendor, there may be many "custom"/game state specific reasons why not.
        /// This is a list of localized strings with messages for those custom failures. The live BNet data will return a failureIndexes property for items that can't be purchased: using those values to index into this array, you can show the user the appropriate failure message for the item that can't be bought.</summary>
        [Newtonsoft.Json.JsonProperty("failureStrings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> FailureStrings { get; set; }

        /// <summary>If we were able to predict the dates when this Vendor will be visible/available, this will be the list of those date ranges. Sadly, we're not able to predict this very frequently, so this will often be useless data.</summary>
        [Newtonsoft.Json.JsonProperty("unlockRanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DateRange> UnlockRanges { get; set; }

        /// <summary>The internal identifier for the Vendor. A holdover from the old days of Vendors, but we don't have time to refactor it away.</summary>
        [Newtonsoft.Json.JsonProperty("vendorIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorIdentifier { get; set; }

        /// <summary>A portrait of the Vendor's smiling mug. Or frothing tentacles.</summary>
        [Newtonsoft.Json.JsonProperty("vendorPortrait", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorPortrait { get; set; }

        /// <summary>If the vendor has a custom banner image, that can be found here.</summary>
        [Newtonsoft.Json.JsonProperty("vendorBanner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorBanner { get; set; }

        /// <summary>If a vendor is not enabled, we won't even save the vendor's definition, and we won't return any items or info about them. It's as if they don't exist.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>If a vendor is not visible, we still have and will give vendor definition info, but we won't use them for things like Advisors or UI.</summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>The identifier of the VendorCategoryDefinition for this vendor's subcategory.</summary>
        [Newtonsoft.Json.JsonProperty("vendorSubcategoryIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorSubcategoryIdentifier { get; set; }

        /// <summary>If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)</summary>
        [Newtonsoft.Json.JsonProperty("consolidateCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConsolidateCategories { get; set; }

        /// <summary>Describes "actions" that can be performed on a vendor. Currently, none of these exist. But theoretically a Vendor could let you interact with it by performing actions. We'll see what these end up looking like if they ever get used.</summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorActionDefinition> Actions { get; set; }

        /// <summary>These are the headers for sections of items that the vendor is selling. When you see items organized by category in the header, it is these categories that it is showing.
        /// Well, technically not *exactly* these. On BNet, it doesn't make sense to have categories be "paged" as we do in Destiny, so we run some heuristics to attempt to aggregate pages of categories together. 
        /// These are the categories post-concatenation, if the vendor had concatenation applied. If you want the pre-aggregated category data, use originalCategories.</summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorCategoryEntryDefinition> Categories { get; set; }

        /// <summary>See the categories property for a description of categories and why originalCategories exists.</summary>
        [Newtonsoft.Json.JsonProperty("originalCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorCategoryEntryDefinition> OriginalCategories { get; set; }

        /// <summary>Display Categories are different from "categories" in that these are specifically for visual grouping and display of categories in Vendor UI. 
        /// The "categories" structure is for validation of the contained items, and can be categorized entirely separately from "Display Categories", there need be and often will be no meaningful relationship between the two.</summary>
        [Newtonsoft.Json.JsonProperty("displayCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyDisplayCategoryDefinition> DisplayCategories { get; set; }

        /// <summary>In addition to selling items, vendors can have "interactions": UI where you "talk" with the vendor and they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.</summary>
        [Newtonsoft.Json.JsonProperty("interactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorInteractionDefinition> Interactions { get; set; }

        /// <summary>If the vendor shows you items from your own inventory - such as the Vault vendor does - this data describes the UI around showing those inventory buckets and which ones get shown.</summary>
        [Newtonsoft.Json.JsonProperty("inventoryFlyouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorInventoryFlyoutDefinition> InventoryFlyouts { get; set; }

        /// <summary>If the vendor sells items (or merely has a list of items to show like the "Sack" vendors do), this is the list of those items that the vendor can sell. From this list, only a subset will be available from the vendor at any given time, selected randomly and reset on the vendor's refresh interval.
        /// Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from selling you some specific weapon but using two different currencies, or the same weapon at multiple "item levels".</summary>
        [Newtonsoft.Json.JsonProperty("itemList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorItemDefinition> ItemList { get; set; }

        /// <summary>BNet doesn't use this data yet, but it appears to be an optional list of flavor text about services that the Vendor can provide.</summary>
        [Newtonsoft.Json.JsonProperty("services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorServiceDefinition> Services { get; set; }

        /// <summary>If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmaster vendors), this defines the list of source->destination buckets for transferring.</summary>
        [Newtonsoft.Json.JsonProperty("acceptedItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorAcceptedItemDefinition> AcceptedItems { get; set; }

        /// <summary>As many of you know, Vendor data has historically been pretty brutal on the BNet servers. In an effort to reduce this workload, only Vendors with this flag set will be returned on Vendor requests. This allows us to filter out Vendors that don't dynamic data that's particularly useful: things like "Preview/Sack" vendors, for example, that you can usually suss out the details for using just the definitions themselves.</summary>
        [Newtonsoft.Json.JsonProperty("returnWithVendorRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnWithVendorRequest { get; set; }

        /// <summary>A vendor can be at different places in the world depending on the game/character/account state. This is the list of possible locations for the vendor, along with conditions we use to determine which one is currently active.</summary>
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorLocationDefinition> Locations { get; set; }

        /// <summary>A vendor can be a part of 0 or 1 "groups" at a time: a group being a collection of Vendors related by either location or function/purpose. It's used for our our Companion Vendor UI. Only one of these can be active for a Vendor at a time.</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorGroupReference> Groups { get; set; }

        /// <summary>Some items don't make sense to return in the API, for example because they represent an action to be performed rather than an item being sold. I'd rather we not do this, but at least in the short term this is a workable workaround.</summary>
        [Newtonsoft.Json.JsonProperty("ignoreSaleItemHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> IgnoreSaleItemHashes { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorDisplayPropertiesDefinition
    {
        /// <summary>I regret calling this a "large icon". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.</summary>
        [Newtonsoft.Json.JsonProperty("largeIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LargeIcon { get; set; }

        [Newtonsoft.Json.JsonProperty("subtitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subtitle { get; set; }

        /// <summary>If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.</summary>
        [Newtonsoft.Json.JsonProperty("originalIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalIcon { get; set; }

        /// <summary>Vendors, in addition to expected display property data, may also show some "common requirements" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.</summary>
        [Newtonsoft.Json.JsonProperty("requirementsDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorRequirementDisplayEntryDefinition> RequirementsDisplay { get; set; }

        /// <summary>This is the icon used in parts of the game UI such as the vendor's waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("smallTransparentIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SmallTransparentIcon { get; set; }

        /// <summary>This is the icon used in the map overview, when the vendor is located on the map.</summary>
        [Newtonsoft.Json.JsonProperty("mapIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MapIcon { get; set; }

        /// <summary>This is apparently the "Watermark". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.</summary>
        [Newtonsoft.Json.JsonProperty("largeTransparentIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LargeTransparentIcon { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Note that "icon" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.
        /// But usually, it will be a small square image that you can use as... well, an icon.</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [Newtonsoft.Json.JsonProperty("hasIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasIcon { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorDisplayPropertiesDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorDisplayPropertiesDefinition>(data);
        }

    }

    /// <summary>The localized properties of the requirementsDisplay, allowing information about the requirement or item being featured to be seen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorRequirementDisplayEntryDefinition
    {
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorRequirementDisplayEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorRequirementDisplayEntryDefinition>(data);
        }

    }

    /// <summary>If a vendor can ever end up performing actions, these are the properties that will be related to those actions. I'm not going to bother documenting this yet, as it is unused and unclear if it will ever be used... but in case it is ever populated and someone finds it useful, it is defined here.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorActionDefinition
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("executeSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExecuteSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("verb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Verb { get; set; }

        [Newtonsoft.Json.JsonProperty("isPositive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPositive { get; set; }

        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionId { get; set; }

        [Newtonsoft.Json.JsonProperty("actionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActionHash { get; set; }

        [Newtonsoft.Json.JsonProperty("autoPerformAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoPerformAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorActionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorActionDefinition>(data);
        }

    }

    /// <summary>This is the definition for a single Vendor Category, into which Sale Items are grouped.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorCategoryEntryDefinition
    {
        /// <summary>The index of the category in the original category definitions for the vendor.</summary>
        [Newtonsoft.Json.JsonProperty("categoryIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryIndex { get; set; }

        /// <summary>The string identifier of the category.</summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryId { get; set; }

        /// <summary>Used in sorting items in vendors... but there's a lot more to it. Just go with the order provided in the itemIndexes property on the DestinyVendorCategoryComponent instead, it should be more reliable than trying to recalculate it yourself.</summary>
        [Newtonsoft.Json.JsonProperty("sortValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortValue { get; set; }

        /// <summary>The hashed identifier for the category.</summary>
        [Newtonsoft.Json.JsonProperty("categoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryHash { get; set; }

        /// <summary>The amount of items that will be available when this category is shown.</summary>
        [Newtonsoft.Json.JsonProperty("quantityAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityAvailable { get; set; }

        /// <summary>If items aren't up for sale in this category, should we still show them (greyed out)?</summary>
        [Newtonsoft.Json.JsonProperty("showUnavailableItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowUnavailableItems { get; set; }

        /// <summary>If you don't have the currency required to buy items from this category, should the items be hidden?</summary>
        [Newtonsoft.Json.JsonProperty("hideIfNoCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HideIfNoCurrency { get; set; }

        /// <summary>True if this category doesn't allow purchases.</summary>
        [Newtonsoft.Json.JsonProperty("hideFromRegularPurchase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HideFromRegularPurchase { get; set; }

        /// <summary>The localized string for making purchases from this category, if it is different from the vendor's string for purchasing.</summary>
        [Newtonsoft.Json.JsonProperty("buyStringOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyStringOverride { get; set; }

        /// <summary>If the category is disabled, this is the localized description to show.</summary>
        [Newtonsoft.Json.JsonProperty("disabledDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisabledDescription { get; set; }

        /// <summary>The localized title of the category.</summary>
        [Newtonsoft.Json.JsonProperty("displayTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayTitle { get; set; }

        /// <summary>If this category has an overlay prompt that should appear, this contains the details of that prompt.</summary>
        [Newtonsoft.Json.JsonProperty("overlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overlay Overlay { get; set; }

        /// <summary>A shortcut for the vendor item indexes sold under this category. Saves us from some expensive reorganization at runtime.</summary>
        [Newtonsoft.Json.JsonProperty("vendorItemIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> VendorItemIndexes { get; set; }

        /// <summary>Sometimes a category isn't actually used to sell items, but rather to preview them. This implies different UI (and manual placement of the category in the UI) in the game, and special treatment.</summary>
        [Newtonsoft.Json.JsonProperty("isPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPreview { get; set; }

        /// <summary>If true, this category only displays items: you can't purchase anything in them.</summary>
        [Newtonsoft.Json.JsonProperty("isDisplayOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDisplayOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("resetIntervalMinutesOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResetIntervalMinutesOverride { get; set; }

        [Newtonsoft.Json.JsonProperty("resetOffsetMinutesOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResetOffsetMinutesOverride { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorCategoryEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorCategoryEntryDefinition>(data);
        }

    }

    /// <summary>The details of an overlay prompt to show to a user. They are all fairly self-explanatory localized strings that can be shown.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorCategoryOverlayDefinition
    {
        [Newtonsoft.Json.JsonProperty("choiceDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChoiceDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>If this overlay has a currency item that it features, this is said featured item.</summary>
        [Newtonsoft.Json.JsonProperty("currencyItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrencyItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorCategoryOverlayDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorCategoryOverlayDefinition>(data);
        }

    }

    /// <summary>Display Categories are different from "categories" in that these are specifically for visual grouping and display of categories in Vendor UI. The "categories" structure is for validation of the contained items, and can be categorized entirely separately from "Display Categories", there need be and often will be no meaningful relationship between the two.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyDisplayCategoryDefinition
    {
        /// <summary>A string identifier for the display category.</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("displayCategoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayCategoryHash { get; set; }

        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>If true, this category should be displayed in the "Banner" section of the vendor's UI.</summary>
        [Newtonsoft.Json.JsonProperty("displayInBanner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayInBanner { get; set; }

        /// <summary>If it exists, this is the hash identifier of a DestinyProgressionDefinition that represents the progression to show on this display category.
        /// Specific categories can now have thier own distinct progression, apparently. So that's cool.</summary>
        [Newtonsoft.Json.JsonProperty("progressionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionHash { get; set; }

        /// <summary>If this category sorts items in a nonstandard way, this will be the way we sort.</summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortOrder SortOrder { get; set; }

        /// <summary>An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category.</summary>
        [Newtonsoft.Json.JsonProperty("displayStyleHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayStyleHash { get; set; }

        /// <summary>An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category.</summary>
        [Newtonsoft.Json.JsonProperty("displayStyleIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayStyleIdentifier { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyDisplayCategoryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyDisplayCategoryDefinition>(data);
        }

    }

    /// <summary>Display categories can have custom sort orders. These are the possible options.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum VendorDisplayCategorySortOrder
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorInteractionDefinition
    {
        /// <summary>The position of this interaction in its parent array. Note that this is NOT content agnostic, and should not be used as such.</summary>
        [Newtonsoft.Json.JsonProperty("interactionIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InteractionIndex { get; set; }

        /// <summary>The potential replies that the user can make to the interaction.</summary>
        [Newtonsoft.Json.JsonProperty("replies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorInteractionReplyDefinition> Replies { get; set; }

        /// <summary>If >= 0, this is the category of sale items to show along with this interaction dialog.</summary>
        [Newtonsoft.Json.JsonProperty("vendorCategoryIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorCategoryIndex { get; set; }

        /// <summary>If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character's status with the quest if you use it to find the character's current Quest Step by checking their inventory against this questlineItemHash's DestinyInventoryItemDefinition.setData.</summary>
        [Newtonsoft.Json.JsonProperty("questlineItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuestlineItemHash { get; set; }

        /// <summary>If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.</summary>
        [Newtonsoft.Json.JsonProperty("sackInteractionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorInteractionSackEntryDefinition> SackInteractionList { get; set; }

        /// <summary>A UI hint for the behavior of the interaction screen. This is useful to determine what type of interaction is occurring, such as a prompt to receive a rank up reward or a prompt to choose a reward for completing a quest. The hash isn't as useful as the Enum in retrospect, well what can you do. Try using interactionType instead.</summary>
        [Newtonsoft.Json.JsonProperty("uiInteractionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UiInteractionType { get; set; }

        /// <summary>The enumerated version of the possible UI hints for vendor interactions, which is a little easier to grok than the hash found in uiInteractionType.</summary>
        [Newtonsoft.Json.JsonProperty("interactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InteractionType InteractionType { get; set; }

        /// <summary>If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.</summary>
        [Newtonsoft.Json.JsonProperty("rewardBlockLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RewardBlockLabel { get; set; }

        /// <summary>If the vendor's reward list is sourced from one of his categories, this is the index into the category array of items to show.</summary>
        [Newtonsoft.Json.JsonProperty("rewardVendorCategoryIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RewardVendorCategoryIndex { get; set; }

        /// <summary>If the vendor interaction has flavor text, this is some of it.</summary>
        [Newtonsoft.Json.JsonProperty("flavorLineOne", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FlavorLineOne { get; set; }

        /// <summary>If the vendor interaction has flavor text, this is the rest of it.</summary>
        [Newtonsoft.Json.JsonProperty("flavorLineTwo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FlavorLineTwo { get; set; }

        /// <summary>The header for the interaction dialog.</summary>
        [Newtonsoft.Json.JsonProperty("headerDisplayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeaderDisplayProperties HeaderDisplayProperties { get; set; }

        /// <summary>The localized text telling the player what to do when they see this dialog.</summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instructions { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorInteractionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorInteractionDefinition>(data);
        }

    }

    /// <summary>When the interaction is replied to, Reward sites will fire and items potentially selected based on whether the given unlock expression is TRUE.
    /// You can potentially choose one from multiple replies when replying to an interaction: this is how you get either/or rewards from vendors.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorInteractionReplyDefinition
    {
        /// <summary>The rewards granted upon responding to the vendor.</summary>
        [Newtonsoft.Json.JsonProperty("itemRewardsSelection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemRewardsSelection ItemRewardsSelection { get; set; }

        /// <summary>The localized text for the reply.</summary>
        [Newtonsoft.Json.JsonProperty("reply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reply { get; set; }

        /// <summary>An enum indicating the type of reply being made.</summary>
        [Newtonsoft.Json.JsonProperty("replyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReplyType ReplyType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorInteractionReplyDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorInteractionReplyDefinition>(data);
        }

    }

    /// <summary>When a Vendor Interaction provides rewards, they'll either let you choose one or let you have all of them. This determines which it will be.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyVendorInteractionRewardSelection
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>This determines the type of reply that a Vendor will have during an Interaction.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyVendorReplyType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>Compare this sackType to the sack identifier in the DestinyInventoryItemDefinition.vendorSackType property of items. If they match, show this sack with this interaction.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorInteractionSackEntryDefinition
    {
        [Newtonsoft.Json.JsonProperty("sackType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SackType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorInteractionSackEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorInteractionSackEntryDefinition>(data);
        }

    }

    /// <summary>An enumeration of the known UI interactions for Vendors.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum VendorInteractionType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

    }

    /// <summary>The definition for an "inventory flyout": a UI screen where we show you part of an otherwise hidden vendor inventory: like the Vault inventory buckets.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorInventoryFlyoutDefinition
    {
        /// <summary>If the flyout is locked, this is the reason why.</summary>
        [Newtonsoft.Json.JsonProperty("lockedDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockedDescription { get; set; }

        /// <summary>The title and other common properties of the flyout.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties3 DisplayProperties { get; set; }

        /// <summary>A list of inventory buckets and other metadata to show on the screen.</summary>
        [Newtonsoft.Json.JsonProperty("buckets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorInventoryFlyoutBucketDefinition> Buckets { get; set; }

        /// <summary>An identifier for the flyout, in case anything else needs to refer to them.</summary>
        [Newtonsoft.Json.JsonProperty("flyoutId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyoutId { get; set; }

        /// <summary>If this is true, don't show any of the glistening "this is a new item" UI elements, like we show on the inventory items themselves in in-game UI.</summary>
        [Newtonsoft.Json.JsonProperty("suppressNewness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuppressNewness { get; set; }

        /// <summary>If this flyout is meant to show you the contents of the player's equipment slot, this is the slot to show.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentSlotHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipmentSlotHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorInventoryFlyoutDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorInventoryFlyoutDefinition>(data);
        }

    }

    /// <summary>Information about a single inventory bucket in a vendor flyout UI and how it is shown.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorInventoryFlyoutBucketDefinition
    {
        /// <summary>If true, the inventory bucket should be able to be collapsed visually.</summary>
        [Newtonsoft.Json.JsonProperty("collapsible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Collapsible { get; set; }

        /// <summary>The inventory bucket whose contents should be shown.</summary>
        [Newtonsoft.Json.JsonProperty("inventoryBucketHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InventoryBucketHash { get; set; }

        /// <summary>The methodology to use for sorting items from the flyout.</summary>
        [Newtonsoft.Json.JsonProperty("sortItemsBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortItemsBy SortItemsBy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorInventoryFlyoutBucketDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorInventoryFlyoutBucketDefinition>(data);
        }

    }

    /// <summary>Determines how items are sorted in an inventory bucket.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyItemSortType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>This represents an item being sold by the vendor.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorItemDefinition
    {
        /// <summary>The index into the DestinyVendorDefinition.saleList. This is what we use to refer to items being sold throughout live and definition data.</summary>
        [Newtonsoft.Json.JsonProperty("vendorItemIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorItemIndex { get; set; }

        /// <summary>The hash identifier of the item being sold (DestinyInventoryItemDefinition).
        /// Note that a vendor can sell the same item in multiple ways, so don't assume that itemHash is a unique identifier for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>The amount you will recieve of the item described in itemHash if you make the purchase.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>An list of indexes into the DestinyVendorDefinition.failureStrings array, indicating the possible failure strings that can be relevant for this item.</summary>
        [Newtonsoft.Json.JsonProperty("failureIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> FailureIndexes { get; set; }

        /// <summary>This is a pre-compiled aggregation of item value and priceOverrideList, so that we have one place to check for what the purchaser must pay for the item. Use this instead of trying to piece together the price separately.
        /// The somewhat crappy part about this is that, now that item quantity overrides have dynamic modifiers, this will not necessarily be statically true. If you were using this instead of live data, switch to using live data.</summary>
        [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorItemQuantity> Currencies { get; set; }

        /// <summary>If this item can be refunded, this is the policy for what will be refundd, how, and in what time period.</summary>
        [Newtonsoft.Json.JsonProperty("refundPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RefundPolicy RefundPolicy { get; set; }

        /// <summary>The amount of time before refundability of the newly purchased item will expire.</summary>
        [Newtonsoft.Json.JsonProperty("refundTimeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RefundTimeLimit { get; set; }

        /// <summary>The Default level at which the item will spawn. Almost always driven by an adjusto these days. Ideally should be singular. It's a long story how this ended up as a list, but there is always either going to be 0:1 of these entities.</summary>
        [Newtonsoft.Json.JsonProperty("creationLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemCreationEntryLevelDefinition> CreationLevels { get; set; }

        /// <summary>This is an index specifically into the display category, as opposed to the server-side Categories (which do not need to match or pair with each other in any way: server side categories are really just structures for common validation. Display Category will let us more easily categorize items visually)</summary>
        [Newtonsoft.Json.JsonProperty("displayCategoryIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayCategoryIndex { get; set; }

        /// <summary>The index into the DestinyVendorDefinition.categories array, so you can find the category associated with this item.</summary>
        [Newtonsoft.Json.JsonProperty("categoryIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryIndex { get; set; }

        /// <summary>Same as above, but for the original category indexes.</summary>
        [Newtonsoft.Json.JsonProperty("originalCategoryIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OriginalCategoryIndex { get; set; }

        /// <summary>The minimum character level at which this item is available for sale.</summary>
        [Newtonsoft.Json.JsonProperty("minimumLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLevel { get; set; }

        /// <summary>The maximum character level at which this item is available for sale.</summary>
        [Newtonsoft.Json.JsonProperty("maximumLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLevel { get; set; }

        /// <summary>The action to be performed when purchasing the item, if it's not just "buy".</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Action2 Action { get; set; }

        /// <summary>The string identifier for the category selling this item.</summary>
        [Newtonsoft.Json.JsonProperty("displayCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayCategory { get; set; }

        /// <summary>The inventory bucket into which this item will be placed upon purchase.</summary>
        [Newtonsoft.Json.JsonProperty("inventoryBucketHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InventoryBucketHash { get; set; }

        /// <summary>The most restrictive scope that determines whether the item is available in the Vendor's inventory. See DestinyGatingScope's documentation for more information.
        /// This can be determined by Unlock gating, or by whether or not the item has purchase level requirements (minimumLevel and maximumLevel properties).</summary>
        [Newtonsoft.Json.JsonProperty("visibilityScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisibilityScope VisibilityScope { get; set; }

        /// <summary>Similar to visibilityScope, it represents the most restrictive scope that determines whether the item can be purchased. It will at least be as restrictive as visibilityScope, but could be more restrictive if the item has additional purchase requirements beyond whether it is merely visible or not.
        /// See DestinyGatingScope's documentation for more information.</summary>
        [Newtonsoft.Json.JsonProperty("purchasableScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PurchasableScope PurchasableScope { get; set; }

        /// <summary>If this item can only be purchased by a given platform, this indicates the platform to which it is restricted.</summary>
        [Newtonsoft.Json.JsonProperty("exclusivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Exclusivity Exclusivity { get; set; }

        /// <summary>If this sale can only be performed as the result of an offer check, this is true.</summary>
        [Newtonsoft.Json.JsonProperty("isOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOffer { get; set; }

        /// <summary>If this sale can only be performed as the result of receiving a CRM offer, this is true.</summary>
        [Newtonsoft.Json.JsonProperty("isCrm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCrm { get; set; }

        /// <summary>*if* the category this item is in supports non-default sorting, this value should represent the sorting value to use, pre-processed and ready to go.</summary>
        [Newtonsoft.Json.JsonProperty("sortValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortValue { get; set; }

        /// <summary>If this item can expire, this is the tooltip message to show with its expiration info.</summary>
        [Newtonsoft.Json.JsonProperty("expirationTooltip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationTooltip { get; set; }

        /// <summary>If this is populated, the purchase of this item should redirect to purchasing these other items instead.</summary>
        [Newtonsoft.Json.JsonProperty("redirectToSaleIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> RedirectToSaleIndexes { get; set; }

        [Newtonsoft.Json.JsonProperty("socketOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorItemSocketOverride> SocketOverrides { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorItemDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorItemDefinition>(data);
        }

    }

    /// <summary>In addition to item quantity information for vendor prices, this also has any optional information that may exist about how the item's quantity can be modified. (unfortunately not information that is able to be read outside of the BNet servers, but it's there)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorItemQuantity
    {
        /// <summary>The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.</summary>
        [Newtonsoft.Json.JsonProperty("itemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemInstanceId { get; set; }

        /// <summary>The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorItemQuantity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorItemQuantity>(data);
        }

    }

    /// <summary>The action that happens when the user attempts to refund an item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyVendorItemRefundPolicy
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>An overly complicated wrapper for the item level at which the item should spawn.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemCreationEntryLevelDefinition
    {
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Level { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemCreationEntryLevelDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemCreationEntryLevelDefinition>(data);
        }

    }

    /// <summary>Not terribly useful, some basic cooldown interaction info.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorSaleItemActionBlockDefinition
    {
        [Newtonsoft.Json.JsonProperty("executeSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExecuteSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("isPositive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPositive { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorSaleItemActionBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorSaleItemActionBlockDefinition>(data);
        }

    }

    /// <summary>This enumeration represents the most restrictive type of gating that is being performed by an entity. This is useful as a shortcut to avoid a lot of lookups when determining whether the gating on an Entity applies to everyone equally, or to their specific Profile or Character states.
    /// None = There is no gating on this item. Global = The gating on this item is based entirely on global game state. It will be gated the same for everyone. Clan = The gating on this item is at the Clan level. For instance, if you're gated by Clan level this will be the case. Profile = The gating includes Profile-specific checks, but not on the Profile's characters. An example of this might be when you acquire an Emblem: the Emblem will be available in your Kiosk for all characters in your Profile from that point onward. Character = The gating includes Character-specific checks, including character level restrictions. An example of this might be an item that you can't purchase from a Vendor until you reach a specific Character Level. Item = The gating includes item-specific checks. For BNet, this generally implies that we'll show this data only on a character level or deeper. AssumedWorstCase = The unlocks and checks being used for this calculation are of an unknown type and are used for unknown purposes. For instance, if some great person decided that an unlock value should be globally scoped, but then the game changes it using character-specific data in a way that BNet doesn't know about. Because of the open-ended potential for this to occur, many unlock checks for "globally" scoped unlock data may be assumed as the worst case unless it has been specifically whitelisted as otherwise. That sucks, but them's the breaks.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyGatingScope
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    /// <summary>The information for how the vendor purchase should override a given socket with custom plug data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorItemSocketOverride
    {
        /// <summary>If this is populated, the socket will be overridden with a specific plug.
        /// If this isn't populated, it's being overridden by something more complicated that is only known by the Game Server and God, which means we can't tell you in advance what it'll be.</summary>
        [Newtonsoft.Json.JsonProperty("singleItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SingleItemHash { get; set; }

        /// <summary>If this is greater than -1, the number of randomized plugs on this socket will be set to this quantity instead of whatever it's set to by default.</summary>
        [Newtonsoft.Json.JsonProperty("randomizedOptionsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RandomizedOptionsCount { get; set; }

        /// <summary>This appears to be used to select which socket ultimately gets the override defined here.</summary>
        [Newtonsoft.Json.JsonProperty("socketTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SocketTypeHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorItemSocketOverride FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorItemSocketOverride>(data);
        }

    }

    /// <summary>All Sockets have a "Type": a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.
    /// See DestinyInventoryItemDefinition for more information about Socketed items and Plugs.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinySocketTypeDefinition
    {
        /// <summary>There are fields for this display data, but they appear to be unpopulated as of now. I am not sure where in the UI these would show if they even were populated, but I will continue to return this data in case it becomes useful.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties4 DisplayProperties { get; set; }

        /// <summary>Defines what happens when a plug is inserted into sockets of this type.</summary>
        [Newtonsoft.Json.JsonProperty("insertAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsertAction InsertAction { get; set; }

        /// <summary>A list of Plug "Categories" that are allowed to be plugged into sockets of this type.
        /// These should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item's category.
        /// If the plug's category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted.</summary>
        [Newtonsoft.Json.JsonProperty("plugWhitelist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPlugWhitelistEntryDefinition> PlugWhitelist { get; set; }

        [Newtonsoft.Json.JsonProperty("socketCategoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SocketCategoryHash { get; set; }

        /// <summary>Sometimes a socket isn't visible. These are some of the conditions under which sockets of this type are not visible. Unfortunately, the truth of visibility is much, much more complex. Best to rely on the live data for whether the socket is visible and enabled.</summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visibility Visibility { get; set; }

        [Newtonsoft.Json.JsonProperty("alwaysRandomizeSockets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlwaysRandomizeSockets { get; set; }

        [Newtonsoft.Json.JsonProperty("isPreviewEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPreviewEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("hideDuplicateReusablePlugs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HideDuplicateReusablePlugs { get; set; }

        /// <summary>This property indicates if the socket type determines whether Emblem icons and nameplates should be overridden by the inserted plug item's icon and nameplate.</summary>
        [Newtonsoft.Json.JsonProperty("overridesUiAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverridesUiAppearance { get; set; }

        [Newtonsoft.Json.JsonProperty("avoidDuplicatesOnInitialization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AvoidDuplicatesOnInitialization { get; set; }

        [Newtonsoft.Json.JsonProperty("currencyScalars", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinySocketTypeScalarMaterialRequirementEntry> CurrencyScalars { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinySocketTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinySocketTypeDefinition>(data);
        }

    }

    /// <summary>Data related to what happens while a plug is being inserted, mostly for UI purposes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyInsertPlugActionDefinition
    {
        /// <summary>How long it takes for the Plugging of the item to be completed once it is initiated, if you care.</summary>
        [Newtonsoft.Json.JsonProperty("actionExecuteSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActionExecuteSeconds { get; set; }

        /// <summary>The type of action being performed when you act on this Socket Type. The most common value is "insert plug", but there are others as well (for instance, a "Masterwork" socket may allow for Re-initialization, and an Infusion socket allows for items to be consumed to upgrade the item)</summary>
        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionType ActionType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyInsertPlugActionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyInsertPlugActionDefinition>(data);
        }

    }

    /// <summary>Indicates the type of actions that can be performed</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SocketTypeActionType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>Defines a plug "Category" that is allowed to be plugged into a socket of this type.
    /// This should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item's category.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPlugWhitelistEntryDefinition
    {
        /// <summary>The hash identifier of the Plug Category to compare against the plug item's plug.plugCategoryHash.
        /// Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.</summary>
        [Newtonsoft.Json.JsonProperty("categoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryHash { get; set; }

        /// <summary>The string identifier for the category, which is here mostly for debug purposes.</summary>
        [Newtonsoft.Json.JsonProperty("categoryIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryIdentifier { get; set; }

        /// <summary>The list of all plug items (DestinyInventoryItemDefinition) that the socket may randomly be populated with when reinitialized.
        /// Which ones you should actually show are determined by the plug being inserted into the socket, and the socket’s type.
        /// When you inspect the plug that could go into a Masterwork Socket, look up the socket type of the socket being inspected and find the DestinySocketTypeDefinition.
        /// Then, look at the Plugs that can fit in that socket. Find the Whitelist in the DestinySocketTypeDefinition that matches the plug item’s categoryhash.
        /// That whitelist entry will potentially have a new “reinitializationPossiblePlugHashes” property.If it does, that means we know what it will roll if you try to insert this plug into this socket.</summary>
        [Newtonsoft.Json.JsonProperty("reinitializationPossiblePlugHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ReinitializationPossiblePlugHashes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPlugWhitelistEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPlugWhitelistEntryDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinySocketVisibility
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinySocketTypeScalarMaterialRequirementEntry
    {
        [Newtonsoft.Json.JsonProperty("currencyItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrencyItemHash { get; set; }

        [Newtonsoft.Json.JsonProperty("scalarValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScalarValue { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinySocketTypeScalarMaterialRequirementEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinySocketTypeScalarMaterialRequirementEntry>(data);
        }

    }

    /// <summary>Sockets on an item are organized into Categories visually.
    /// You can find references to the socket category defined on an item's DestinyInventoryItemDefinition.sockets.socketCategories property.
    /// This has the display information for rendering the categories' header, and a hint for how the UI should handle showing this category.
    /// The shitty thing about this, however, is that the socket categories' UI style can be overridden by the item's UI style. For instance, the Socket Category used by Emote Sockets says it's "consumable," but that's a lie: they're all reusable, and overridden by the detail UI pages in ways that we can't easily account for in the API.
    /// As a result, I will try to compile these rules into the individual sockets on items, and provide the best hint possible there through the plugSources property. In the future, I may attempt to use this information in conjunction with the item to provide a more usable UI hint on the socket layer, but for now improving the consistency of plugSources is the best I have time to provide. (See https://github.com/Bungie-net/api/issues/522 for more info)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinySocketCategoryDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>A string hinting to the game's UI system about how the sockets in this category should be displayed.
        /// BNet doesn't use it: it's up to you to find valid values and make your own special UI if you want to honor this category style.</summary>
        [Newtonsoft.Json.JsonProperty("uiCategoryStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UiCategoryStyle { get; set; }

        /// <summary>Same as uiCategoryStyle, but in a more usable enumeration form.</summary>
        [Newtonsoft.Json.JsonProperty("categoryStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CategoryStyle CategoryStyle { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinySocketCategoryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinySocketCategoryDefinition>(data);
        }

    }

    /// <summary>Represents the possible and known UI styles used by the game for rendering Socket Categories.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinySocketCategoryStyle
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>When a vendor provides services, this is the localized name of those services.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorServiceDefinition
    {
        /// <summary>The localized name of a service provided.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorServiceDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorServiceDefinition>(data);
        }

    }

    /// <summary>If you ever wondered how the Vault works, here it is.
    /// The Vault is merely a set of inventory buckets that exist on your Profile/Account level. When you transfer items in the Vault, the game is using the Vault Vendor's DestinyVendorAcceptedItemDefinitions to see where the appropriate destination bucket is for the source bucket from whence your item is moving. If it finds such an entry, it transfers the item to the other bucket.
    /// The mechanics for Postmaster works similarly, which is also a vendor. All driven by Accepted Items.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorAcceptedItemDefinition
    {
        /// <summary>The "source" bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition's acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash.</summary>
        [Newtonsoft.Json.JsonProperty("acceptedInventoryBucketHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AcceptedInventoryBucketHash { get; set; }

        /// <summary>This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash.</summary>
        [Newtonsoft.Json.JsonProperty("destinationInventoryBucketHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationInventoryBucketHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorAcceptedItemDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorAcceptedItemDefinition>(data);
        }

    }

    /// <summary>These definitions represent vendors' locations and relevant display information at different times in the game.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorLocationDefinition
    {
        /// <summary>The hash identifier for a Destination at which this vendor may be located. Each destination where a Vendor may exist will only ever have a single entry.</summary>
        [Newtonsoft.Json.JsonProperty("destinationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationHash { get; set; }

        /// <summary>The relative path to the background image representing this Vendor at this location, for use in a banner.</summary>
        [Newtonsoft.Json.JsonProperty("backgroundImagePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackgroundImagePath { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorLocationDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorLocationDefinition>(data);
        }

    }

    /// <summary>On to one of the more confusing subjects of the API. What is a Destination, and what is the relationship between it, Activities, Locations, and Places?
    /// A "Destination" is a specific region/city/area of a larger "Place". For instance, a Place might be Earth where a Destination might be Bellevue, Washington. (Please, pick a more interesting destination if you come to visit Earth).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyDestinationDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The place that "owns" this Destination. Use this hash to look up the DestinyPlaceDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("placeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlaceHash { get; set; }

        /// <summary>If this Destination has a default Free-Roam activity, this is the hash for that Activity. Use it to look up the DestinyActivityDefintion.</summary>
        [Newtonsoft.Json.JsonProperty("defaultFreeroamActivityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultFreeroamActivityHash { get; set; }

        /// <summary>If the Destination has default Activity Graphs (i.e. "Map") that should be shown in the director, this is the list of those Graphs. At most, only one should be active at any given time for a Destination: these would represent, for example, different variants on a Map if the Destination is changing on a macro level based on game state.</summary>
        [Newtonsoft.Json.JsonProperty("activityGraphEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphListEntryDefinition> ActivityGraphEntries { get; set; }

        /// <summary>A Destination may have many "Bubbles" zones with human readable properties.
        /// We don't get as much info as I'd like about them - I'd love to return info like where on the map they are located - but at least this gives you the name of those bubbles. bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.
        /// DEPRECATED - Just use bubbles, it now has this data.</summary>
        [Newtonsoft.Json.JsonProperty("bubbleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyDestinationBubbleSettingDefinition> BubbleSettings { get; set; }

        /// <summary>This provides the unique identifiers for every bubble in the destination (only guaranteed unique within the destination), and any intrinsic properties of the bubble.
        /// bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.</summary>
        [Newtonsoft.Json.JsonProperty("bubbles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyBubbleDefinition> Bubbles { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyDestinationDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyDestinationDefinition>(data);
        }

    }

    /// <summary>Destinations and Activities may have default Activity Graphs that should be shown when you bring up the Director and are playing in either.
    /// This contract defines the graph referred to and the gating for when it is relevant.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphListEntryDefinition
    {
        /// <summary>The hash identifier of the DestinyActivityGraphDefinition that should be shown when opening the director.</summary>
        [Newtonsoft.Json.JsonProperty("activityGraphHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityGraphHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphListEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphListEntryDefinition>(data);
        }

    }

    /// <summary>Represents a Map View in the director: be them overview views, destination views, or other.
    /// They have nodes which map to activities, and other various visual elements that we (or others) may or may not be able to use.
    /// Activity graphs, most importantly, have nodes which can have activities in various states of playability.
    /// Unfortunately, activity graphs are combined at runtime with Game UI-only assets such as fragments of map images, various in-game special effects, decals etc... that we don't get in these definitions.
    /// If we end up having time, we may end up trying to manually populate those here: but the last time we tried that, before the lead-up to D1, it proved to be unmaintainable as the game's content changed. So don't bet the farm on us providing that content in this definition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphDefinition
    {
        /// <summary>These represent the visual "nodes" on the map's view. These are the activities you can click on in the map.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphNodeDefinition> Nodes { get; set; }

        /// <summary>Represents one-off/special UI elements that appear on the map.</summary>
        [Newtonsoft.Json.JsonProperty("artElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphArtElementDefinition> ArtElements { get; set; }

        /// <summary>Represents connections between graph nodes. However, it lacks context that we'd need to make good use of it.</summary>
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphConnectionDefinition> Connections { get; set; }

        /// <summary>Objectives can display on maps, and this is supposedly metadata for that. I have not had the time to analyze the details of what is useful within however: we could be missing important data to make this work. Expect this property to be expanded on later if possible.</summary>
        [Newtonsoft.Json.JsonProperty("displayObjectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphDisplayObjectiveDefinition> DisplayObjectives { get; set; }

        /// <summary>Progressions can also display on maps, but similarly to displayObjectives we appear to lack some required information and context right now. We will have to look into it later and add more data if possible.</summary>
        [Newtonsoft.Json.JsonProperty("displayProgressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphDisplayProgressionDefinition> DisplayProgressions { get; set; }

        /// <summary>Represents links between this Activity Graph and other ones.</summary>
        [Newtonsoft.Json.JsonProperty("linkedGraphs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyLinkedGraphDefinition> LinkedGraphs { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphDefinition>(data);
        }

    }

    /// <summary>This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphNodeDefinition
    {
        /// <summary>An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.</summary>
        [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        /// <summary>The node *may* have display properties that override the active Activity's display properties.</summary>
        [Newtonsoft.Json.JsonProperty("overrideDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideDisplay OverrideDisplay { get; set; }

        /// <summary>The position on the map for this node.</summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Position Position { get; set; }

        /// <summary>The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.</summary>
        [Newtonsoft.Json.JsonProperty("featuringStates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphNodeFeaturingStateDefinition> FeaturingStates { get; set; }

        /// <summary>The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.</summary>
        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphNodeActivityDefinition> Activities { get; set; }

        /// <summary>Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.</summary>
        [Newtonsoft.Json.JsonProperty("states", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphNodeStateEntry> States { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphNodeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphNodeDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPositionDefinition
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Y { get; set; }

        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Z { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPositionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPositionDefinition>(data);
        }

    }

    /// <summary>Nodes can have different visual states. This object represents a single visual state ("highlight type") that a node can be in, and the unlock expression condition to determine whether it should be set.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphNodeFeaturingStateDefinition
    {
        /// <summary>The node can be highlighted in a variety of ways - the game iterates through these and finds the first FeaturingState that is valid at the present moment given the Game, Account, and Character state, and renders the node in that state. See the ActivityGraphNodeHighlightType enum for possible values.</summary>
        [Newtonsoft.Json.JsonProperty("highlightType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HighlightType HighlightType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphNodeFeaturingStateDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphNodeFeaturingStateDefinition>(data);
        }

    }

    /// <summary>The various known UI styles in which an item can be highlighted. It'll be up to you to determine what you want to show based on this highlighting, BNet doesn't have any assets that correspond to these states. And yeah, RiseOfIron and Comet have their own special highlight states. Don't ask me, I can't imagine they're still used.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ActivityGraphNodeHighlightType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>The actual activity to be redirected to when you click on the node. Note that a node can have many Activities attached to it: but only one will be active at any given time. The list of Node Activities will be traversed, and the first one found to be active will be displayed. This way, a node can layer multiple variants of an activity on top of each other. For instance, one node can control the weekly Crucible Playlist. There are multiple possible playlists, but only one is active for the week.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphNodeActivityDefinition
    {
        /// <summary>An identifier for this node activity. It is only guaranteed to be unique within the Activity Graph.</summary>
        [Newtonsoft.Json.JsonProperty("nodeActivityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeActivityId { get; set; }

        /// <summary>The activity that will be activated if the user clicks on this node. Controls all activity-related information displayed on the node if it is active (the text shown in the tooltip etc)</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphNodeActivityDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphNodeActivityDefinition>(data);
        }

    }

    /// <summary>The static data about Activities in Destiny 2.
    /// Note that an Activity must be combined with an ActivityMode to know - from a Gameplay perspective - what the user is "Playing".
    /// In most PvE activities, this is fairly straightforward. A Story Activity can only be played in the Story Activity Mode.
    /// However, in PvP activities, the Activity alone only tells you the map being played, or the Playlist that the user chose to enter. You'll need to know the Activity Mode they're playing to know that they're playing Mode X on Map Y.
    /// Activity Definitions tell a great deal of information about what *could* be relevant to a user: what rewards they can earn, what challenges could be performed, what modifiers could be applied. To figure out which of these properties is actually live, you'll need to combine the definition with "Live" data from one of the Destiny endpoints.
    /// Activities also have Activity Types, but unfortunately in Destiny 2 these are even less reliable of a source of information than they were in Destiny 1. I will be looking into ways to provide more reliable sources for type information as time goes on, but for now we're going to have to deal with the limitations. See DestinyActivityTypeDefinition for more information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityDefinition
    {
        /// <summary>The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties5 DisplayProperties { get; set; }

        /// <summary>The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).</summary>
        [Newtonsoft.Json.JsonProperty("originalDisplayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OriginalDisplayProperties OriginalDisplayProperties { get; set; }

        /// <summary>The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won't be data in this field if the activity is never shown in a selection/options screen.</summary>
        [Newtonsoft.Json.JsonProperty("selectionScreenDisplayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SelectionScreenDisplayProperties SelectionScreenDisplayProperties { get; set; }

        /// <summary>If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.</summary>
        [Newtonsoft.Json.JsonProperty("releaseIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReleaseIcon { get; set; }

        /// <summary>If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.</summary>
        [Newtonsoft.Json.JsonProperty("releaseTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReleaseTime { get; set; }

        /// <summary>The difficulty level of the activity.</summary>
        [Newtonsoft.Json.JsonProperty("activityLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityLevel { get; set; }

        /// <summary>The recommended light level for this activity.</summary>
        [Newtonsoft.Json.JsonProperty("activityLightLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityLightLevel { get; set; }

        /// <summary>The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a "Place". For instance, if the "Place" is Earth, the "Destination" would be a specific city or region on Earth.</summary>
        [Newtonsoft.Json.JsonProperty("destinationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationHash { get; set; }

        /// <summary>The hash identifier for the "Place" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the "Place" is Earth, the "Destination" would be a specific city or region on Earth.</summary>
        [Newtonsoft.Json.JsonProperty("placeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlaceHash { get; set; }

        /// <summary>The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.</summary>
        [Newtonsoft.Json.JsonProperty("activityTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityTypeHash { get; set; }

        /// <summary>The difficulty tier of the activity.</summary>
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tier { get; set; }

        /// <summary>When Activities are completed, we generate a "Post-Game Carnage Report", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.</summary>
        [Newtonsoft.Json.JsonProperty("pgcrImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PgcrImage { get; set; }

        /// <summary>The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game's state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or "Dummy" items: items that tell you what you can earn in vague terms rather than what you'll specifically be earning (partly because the game doesn't even know what you'll earn specifically until you roll for it at the end)</summary>
        [Newtonsoft.Json.JsonProperty("rewards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityRewardDefinition> Rewards { get; set; }

        /// <summary>Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.</summary>
        [Newtonsoft.Json.JsonProperty("modifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityModifierReferenceDefinition> Modifiers { get; set; }

        /// <summary>If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.</summary>
        [Newtonsoft.Json.JsonProperty("isPlaylist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPlaylist { get; set; }

        /// <summary>An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they're active and what rewards they provide. Sadly, at the moment there's no central definition for challenges: much like "Skulls" were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.</summary>
        [Newtonsoft.Json.JsonProperty("challenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityChallengeDefinition> Challenges { get; set; }

        /// <summary>If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.</summary>
        [Newtonsoft.Json.JsonProperty("optionalUnlockStrings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityUnlockStringDefinition> OptionalUnlockStrings { get; set; }

        /// <summary>Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.</summary>
        [Newtonsoft.Json.JsonProperty("playlistItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityPlaylistItemDefinition> PlaylistItems { get; set; }

        /// <summary>Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.</summary>
        [Newtonsoft.Json.JsonProperty("activityGraphList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityGraphListEntryDefinition> ActivityGraphList { get; set; }

        /// <summary>This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.</summary>
        [Newtonsoft.Json.JsonProperty("matchmaking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Matchmaking Matchmaking { get; set; }

        /// <summary>This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.</summary>
        [Newtonsoft.Json.JsonProperty("guidedGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuidedGame GuidedGame { get; set; }

        /// <summary>If this activity had an activity mode directly defined on it, this will be the hash of that mode.</summary>
        [Newtonsoft.Json.JsonProperty("directActivityModeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DirectActivityModeHash { get; set; }

        /// <summary>If the activity had an activity mode directly defined on it, this will be the enum value of that mode.</summary>
        [Newtonsoft.Json.JsonProperty("directActivityModeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyActivityDefinitionDirectActivityModeType? DirectActivityModeType { get; set; }

        /// <summary>The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.</summary>
        [Newtonsoft.Json.JsonProperty("loadouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityLoadoutRequirementSet> Loadouts { get; set; }

        /// <summary>The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ActivityModeHashes { get; set; }

        /// <summary>The activity modes - if any - in enum form. Because we can't seem to escape the enums.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityModeType> ActivityModeTypes { get; set; }

        /// <summary>If true, this activity is a PVP activity or playlist.</summary>
        [Newtonsoft.Json.JsonProperty("isPvP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPvP { get; set; }

        /// <summary>The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.</summary>
        [Newtonsoft.Json.JsonProperty("insertionPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityInsertionPointDefinition> InsertionPoints { get; set; }

        /// <summary>A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.</summary>
        [Newtonsoft.Json.JsonProperty("activityLocationMappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyEnvironmentLocationMapping> ActivityLocationMappings { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityDefinition>(data);
        }

    }

    /// <summary>Activities can refer to one or more sets of tooltip-friendly reward data. These are the definitions for those tooltip friendly rewards.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityRewardDefinition
    {
        /// <summary>The header for the reward set, if any.</summary>
        [Newtonsoft.Json.JsonProperty("rewardText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RewardText { get; set; }

        /// <summary>The "Items provided" in the reward. This is almost always a pointer to a DestinyInventoryItemDefintion for an item that you can't actually earn in-game, but that has name/description/icon information for the vague concept of the rewards you will receive. This is because the actual reward generation is non-deterministic and extremely complicated, so the best the game can do is tell you what you'll get in vague terms. And so too shall we.
        /// Interesting trivia: you actually *do* earn these items when you complete the activity. They go into a single-slot bucket on your profile, which is how you see the pop-ups of these rewards when you complete an activity that match these "dummy" items. You can even see them if you look at the last one you earned in your profile-level inventory through the BNet API! Who said reading documentation is a waste of time?</summary>
        [Newtonsoft.Json.JsonProperty("rewardItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemQuantity> RewardItems { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityRewardDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityRewardDefinition>(data);
        }

    }

    /// <summary>A reference to an Activity Modifier from another entity, such as an Activity (for now, just Activities).
    /// This defines some</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityModifierReferenceDefinition
    {
        /// <summary>The hash identifier for the DestinyActivityModifierDefinition referenced by this activity.</summary>
        [Newtonsoft.Json.JsonProperty("activityModifierHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityModifierHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityModifierReferenceDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityModifierReferenceDefinition>(data);
        }

    }

    /// <summary>Modifiers - in Destiny 1, these were referred to as "Skulls" - are changes that can be applied to an Activity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityModifierDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityModifierDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityModifierDefinition>(data);
        }

    }

    /// <summary>Represents a reference to a Challenge, which for now is just an Objective.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityChallengeDefinition
    {
        /// <summary>The hash for the Objective that matches this challenge. Use it to look up the DestinyObjectiveDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectiveHash { get; set; }

        /// <summary>The rewards as they're represented in the UI. Note that they generally link to "dummy" items that give a summary of rewards rather than direct, real items themselves.
        /// If the quantity is 0, don't show the quantity.</summary>
        [Newtonsoft.Json.JsonProperty("dummyRewards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemQuantity> DummyRewards { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityChallengeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityChallengeDefinition>(data);
        }

    }

    /// <summary>Defines an "Objective".
    /// An objective is a specific task you should accomplish in the game. These are referred to by:
    /// - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)
    /// - Challenges (which are Objectives defined on an DestinyActivityDefintion)
    /// - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)
    /// - Anything else that the designers decide to do later.
    /// Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyObjectiveDefinition
    {
        /// <summary>Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties6 DisplayProperties { get; set; }

        /// <summary>The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.</summary>
        [Newtonsoft.Json.JsonProperty("completionValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompletionValue { get; set; }

        /// <summary>A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope3 Scope { get; set; }

        /// <summary>OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.</summary>
        [Newtonsoft.Json.JsonProperty("locationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationHash { get; set; }

        /// <summary>If true, the value is allowed to go negative.</summary>
        [Newtonsoft.Json.JsonProperty("allowNegativeValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowNegativeValue { get; set; }

        /// <summary>If true, you can effectively "un-complete" this objective if you lose progress after crossing the completion threshold. 
        /// If False, once you complete the task it will remain completed forever by locking the value.</summary>
        [Newtonsoft.Json.JsonProperty("allowValueChangeWhenCompleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowValueChangeWhenCompleted { get; set; }

        /// <summary>If true, completion means having an unlock value less than or equal to the completionValue.
        /// If False, completion means having an unlock value greater than or equal to the completionValue.</summary>
        [Newtonsoft.Json.JsonProperty("isCountingDownward", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCountingDownward { get; set; }

        /// <summary>The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.</summary>
        [Newtonsoft.Json.JsonProperty("valueStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueStyle ValueStyle { get; set; }

        /// <summary>Text to describe the progress bar.</summary>
        [Newtonsoft.Json.JsonProperty("progressDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProgressDescription { get; set; }

        /// <summary>If this objective enables Perks intrinsically, the conditions for that enabling are defined here.</summary>
        [Newtonsoft.Json.JsonProperty("perks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perks Perks { get; set; }

        /// <summary>If this objective enables modifications on a player's stats intrinsically, the conditions are defined here.</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats2 Stats { get; set; }

        /// <summary>If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet.</summary>
        [Newtonsoft.Json.JsonProperty("minimumVisibilityThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumVisibilityThreshold { get; set; }

        /// <summary>If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.</summary>
        [Newtonsoft.Json.JsonProperty("allowOvercompletion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowOvercompletion { get; set; }

        /// <summary>If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.</summary>
        [Newtonsoft.Json.JsonProperty("showValueOnComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowValueOnComplete { get; set; }

        /// <summary>The style to use when the objective is completed.</summary>
        [Newtonsoft.Json.JsonProperty("completedValueStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedValueStyle CompletedValueStyle { get; set; }

        /// <summary>The style to use when the objective is still in progress.</summary>
        [Newtonsoft.Json.JsonProperty("inProgressValueStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InProgressValueStyle InProgressValueStyle { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyObjectiveDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyObjectiveDefinition>(data);
        }

    }

    /// <summary>If you're showing an unlock value in the UI, this is the format in which it should be shown. You'll have to build your own algorithms on the client side to determine how best to render these options.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyUnlockValueUIStyle
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

    }

    /// <summary>Defines the conditions under which an intrinsic perk is applied while participating in an Objective.
    /// These perks will generally not be benefit-granting perks, but rather a perk that modifies gameplay in some interesting way.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyObjectivePerkEntryDefinition
    {
        /// <summary>The hash identifier of the DestinySandboxPerkDefinition that will be applied to the character.</summary>
        [Newtonsoft.Json.JsonProperty("perkHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PerkHash { get; set; }

        /// <summary>An enumeration indicating whether it will be applied as long as the Objective is active, when it's completed, or until it's completed.</summary>
        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Style Style { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyObjectivePerkEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyObjectivePerkEntryDefinition>(data);
        }

    }

    /// <summary>Some Objectives provide perks, generally as part of providing some kind of interesting modifier for a Challenge or Quest. This indicates when the Perk is granted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyObjectiveGrantStyle
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>Perks are modifiers to a character or item that can be applied situationally.
    /// - Perks determine a weapons' damage type.
    /// - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)
    /// - Perks are applied for unique alterations of state in Objectives
    /// Anyways, I'm sure you can see why perks are so interesting.
    /// What Perks often don't have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinySandboxPerkDefinition
    {
        /// <summary>These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties7 DisplayProperties { get; set; }

        /// <summary>The string identifier for the perk.</summary>
        [Newtonsoft.Json.JsonProperty("perkIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerkIdentifier { get; set; }

        /// <summary>If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information.</summary>
        [Newtonsoft.Json.JsonProperty("isDisplayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDisplayable { get; set; }

        /// <summary>If this perk grants a damage type to a weapon, the damage type will be defined here.
        /// Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("damageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DamageType2 DamageType { get; set; }

        /// <summary>The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.
        /// This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.</summary>
        [Newtonsoft.Json.JsonProperty("damageTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DamageTypeHash { get; set; }

        /// <summary>An old holdover from the original Armory, this was an attempt to group perks by functionality.
        /// It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.</summary>
        [Newtonsoft.Json.JsonProperty("perkGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerkGroups PerkGroups { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinySandboxPerkDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinySandboxPerkDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DamageType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    /// <summary>These properties are an attempt to categorize talent node steps by certain common properties. See the related enumerations for the type of properties being categorized.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyTalentNodeStepGroups
    {
        [Newtonsoft.Json.JsonProperty("weaponPerformance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyTalentNodeStepWeaponPerformances? WeaponPerformance { get; set; }

        [Newtonsoft.Json.JsonProperty("impactEffects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyTalentNodeStepImpactEffects? ImpactEffects { get; set; }

        [Newtonsoft.Json.JsonProperty("guardianAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyTalentNodeStepGuardianAttributes? GuardianAttributes { get; set; }

        [Newtonsoft.Json.JsonProperty("lightAbilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyTalentNodeStepLightAbilities? LightAbilities { get; set; }

        [Newtonsoft.Json.JsonProperty("damageTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyTalentNodeStepDamageTypes? DamageTypes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyTalentNodeStepGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyTalentNodeStepGroups>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyTalentNodeStepWeaponPerformances
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

        _256 = 256,

        _512 = 512,

        _1024 = 1024,

        _2048 = 2048,

        _4096 = 4096,

        _8191 = 8191,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyTalentNodeStepImpactEffects
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _63 = 63,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyTalentNodeStepGuardianAttributes
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

        _255 = 255,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyTalentNodeStepLightAbilities
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _63 = 63,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyTalentNodeStepDamageTypes
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _15 = 15,

    }

    /// <summary>Defines the conditions under which stat modifications will be applied to a Character while participating in an objective.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyObjectiveStatEntryDefinition
    {
        /// <summary>The stat being modified, and the value used.</summary>
        [Newtonsoft.Json.JsonProperty("stat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stat Stat { get; set; }

        /// <summary>Whether it will be applied as long as the objective is active, when it's completed, or until it's completed.</summary>
        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Style2 Style { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyObjectiveStatEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyObjectiveStatEntryDefinition>(data);
        }

    }

    /// <summary>Represents a "raw" investment stat, before calculated stats are calculated and before any DestinyStatGroupDefinition is applied to transform the stat into something closer to what you see in-game.
    /// Because these won't match what you see in-game, consider carefully whether you really want to use these stats. I have left them in case someone can do something useful or interesting with the pre-processed statistics.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemInvestmentStatDefinition
    {
        /// <summary>The hash identifier for the DestinyStatDefinition defining this stat.</summary>
        [Newtonsoft.Json.JsonProperty("statTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatTypeHash { get; set; }

        /// <summary>The raw "Investment" value for the stat, before transformations are performed to turn this raw stat into stats that are displayed in the game UI.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }

        /// <summary>If this is true, the stat will only be applied on the item in certain game state conditions, and we can't know statically whether or not this stat will be applied. Check the "live" API data instead for whether this value is being applied on a specific instance of the item in question, and you can use this to decide whether you want to show the stat on the generic view of the item, or whether you want to show some kind of caveat or warning about the stat value being conditional on game state.</summary>
        [Newtonsoft.Json.JsonProperty("isConditionallyActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsConditionallyActive { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemInvestmentStatDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemInvestmentStatDefinition>(data);
        }

    }

    /// <summary>A "Location" is a sort of shortcut for referring to a specific combination of Activity, Destination, Place, and even Bubble or NavPoint within a space.
    /// Most of this data isn't intrinsically useful to us, but Objectives refer to locations, and through that we can at least infer the Activity, Destination, and Place being referred to by the Objective.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLocationDefinition
    {
        /// <summary>If the location has a Vendor on it, this is the hash identifier for that Vendor. Look them up with DestinyVendorDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        /// <summary>A Location may refer to different specific spots in the world based on the world's current state. This is a list of those potential spots, and the data we can use at runtime to determine which one of the spots is the currently valid one.</summary>
        [Newtonsoft.Json.JsonProperty("locationReleases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyLocationReleaseDefinition> LocationReleases { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLocationDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLocationDefinition>(data);
        }

    }

    /// <summary>A specific "spot" referred to by a location. Only one of these can be active at a time for a given Location.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLocationReleaseDefinition
    {
        /// <summary>Sadly, these don't appear to be populated anymore (ever?)</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties8 DisplayProperties { get; set; }

        [Newtonsoft.Json.JsonProperty("smallTransparentIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SmallTransparentIcon { get; set; }

        [Newtonsoft.Json.JsonProperty("mapIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MapIcon { get; set; }

        [Newtonsoft.Json.JsonProperty("largeTransparentIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LargeTransparentIcon { get; set; }

        /// <summary>If we had map information, this spawnPoint would be interesting. But sadly, we don't have that info.</summary>
        [Newtonsoft.Json.JsonProperty("spawnPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpawnPoint { get; set; }

        /// <summary>The Destination being pointed to by this location.</summary>
        [Newtonsoft.Json.JsonProperty("destinationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationHash { get; set; }

        /// <summary>The Activity being pointed to by this location.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>The Activity Graph being pointed to by this location.</summary>
        [Newtonsoft.Json.JsonProperty("activityGraphHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityGraphHash { get; set; }

        /// <summary>The Activity Graph Node being pointed to by this location. (Remember that Activity Graph Node hashes are only unique within an Activity Graph: so use the combination to find the node being spoken of)</summary>
        [Newtonsoft.Json.JsonProperty("activityGraphNodeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityGraphNodeHash { get; set; }

        /// <summary>The Activity Bubble within the Destination. Look this up in the DestinyDestinationDefinition's bubbles and bubbleSettings properties.</summary>
        [Newtonsoft.Json.JsonProperty("activityBubbleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityBubbleName { get; set; }

        /// <summary>If we had map information, this would tell us something cool about the path this location wants you to take. I wish we had map information.</summary>
        [Newtonsoft.Json.JsonProperty("activityPathBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityPathBundle { get; set; }

        /// <summary>If we had map information, this would tell us about path information related to destination on the map. Sad. Maybe you can do something cool with it. Go to town man.</summary>
        [Newtonsoft.Json.JsonProperty("activityPathDestination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityPathDestination { get; set; }

        /// <summary>The type of Nav Point that this represents. See the enumeration for more info.</summary>
        [Newtonsoft.Json.JsonProperty("navPointType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NavPointType NavPointType { get; set; }

        /// <summary>Looks like it should be the position on the map, but sadly it does not look populated... yet?</summary>
        [Newtonsoft.Json.JsonProperty("worldPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> WorldPosition { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLocationReleaseDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLocationReleaseDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyActivityNavPointType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

        _15 = 15,

        _16 = 16,

    }

    /// <summary>Represents a status string that could be conditionally displayed about an activity. Note that externally, you can only see the strings themselves. Internally we combine this information with server state to determine which strings should be shown.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityUnlockStringDefinition
    {
        /// <summary>The string to be displayed if the conditions are met.</summary>
        [Newtonsoft.Json.JsonProperty("displayString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayString { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityUnlockStringDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityUnlockStringDefinition>(data);
        }

    }

    /// <summary>If the activity is a playlist, this is the definition for a specific entry in the playlist: a single possible combination of Activity and Activity Mode that can be chosen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityPlaylistItemDefinition
    {
        /// <summary>The hash identifier of the Activity that can be played. Use it to look up the DestinyActivityDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>If this playlist entry had an activity mode directly defined on it, this will be the hash of that mode.</summary>
        [Newtonsoft.Json.JsonProperty("directActivityModeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DirectActivityModeHash { get; set; }

        /// <summary>If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.</summary>
        [Newtonsoft.Json.JsonProperty("directActivityModeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyActivityPlaylistItemDefinitionDirectActivityModeType? DirectActivityModeType { get; set; }

        /// <summary>The hash identifiers for Activity Modes relevant to this entry.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ActivityModeHashes { get; set; }

        /// <summary>The activity modes - if any - in enum form. Because we can't seem to escape the enums.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityModeType> ActivityModeTypes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityPlaylistItemDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityPlaylistItemDefinition>(data);
        }

    }

    /// <summary>For historical reasons, this list will have both D1 and D2-relevant Activity Modes in it. Please don't take this to mean that some D1-only feature is coming back!</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyActivityModeType
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    /// <summary>This definition represents an "Activity Mode" as it exists in the Historical Stats endpoints. An individual Activity Mode represents a collection of activities that are played in a certain way. For example, Nightfall Strikes are part of a "Nightfall" activity mode, and any activities played as the PVP mode "Clash" are part of the "Clash activity mode.
    /// Activity modes are nested under each other in a hierarchy, so that if you ask for - for example - "AllPvP", you will get any PVP activities that the user has played, regardless of what specific PVP mode was being played.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityModeDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>If this activity mode has a related PGCR image, this will be the path to said image.</summary>
        [Newtonsoft.Json.JsonProperty("pgcrImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PgcrImage { get; set; }

        /// <summary>The Enumeration value for this Activity Mode. Pass this identifier into Stats endpoints to get aggregate stats for this mode.</summary>
        [Newtonsoft.Json.JsonProperty("modeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModeType ModeType { get; set; }

        /// <summary>The type of play being performed in broad terms (PVP, PVE)</summary>
        [Newtonsoft.Json.JsonProperty("activityModeCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActivityModeCategory ActivityModeCategory { get; set; }

        /// <summary>If True, this mode has oppositional teams fighting against each other rather than "Free-For-All" or Co-operative modes of play.
        /// Note that Aggregate modes are never marked as team based, even if they happen to be team based at the moment. At any time, an aggregate whose subordinates are only team based could be changed so that one or more aren't team based, and then this boolean won't make much sense (the aggregation would become "sometimes team based"). Let's not deal with that right now.</summary>
        [Newtonsoft.Json.JsonProperty("isTeamBased", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTeamBased { get; set; }

        /// <summary>If true, this mode is an aggregation of other, more specific modes rather than being a mode in itself. This includes modes that group Features/Events rather than Gameplay, such as Trials of The Nine: Trials of the Nine being an Event that is interesting to see aggregate data for, but when you play the activities within Trials of the Nine they are more specific activity modes such as Clash.</summary>
        [Newtonsoft.Json.JsonProperty("isAggregateMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAggregateMode { get; set; }

        /// <summary>The hash identifiers of the DestinyActivityModeDefinitions that represent all of the "parent" modes for this mode. For instance, the Nightfall Mode is also a member of AllStrikes and AllPvE.</summary>
        [Newtonsoft.Json.JsonProperty("parentHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ParentHashes { get; set; }

        /// <summary>A Friendly identifier you can use for referring to this Activity Mode. We really only used this in our URLs, so... you know, take that for whatever it's worth.</summary>
        [Newtonsoft.Json.JsonProperty("friendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        /// <summary>If this exists, the mode has specific Activities (referred to by the Key) that should instead map to other Activity Modes when they are played. This was useful in D1 for Private Matches, where we wanted to have Private Matches as an activity mode while still referring to the specific mode being played.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeMappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyActivityModeType> ActivityModeMappings { get; set; }

        /// <summary>If FALSE, we want to ignore this type when we're showing activity modes in BNet UI. It will still be returned in case 3rd parties want to use it for any purpose.</summary>
        [Newtonsoft.Json.JsonProperty("display", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Display { get; set; }

        /// <summary>The relative ordering of activity modes.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityModeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityModeDefinition>(data);
        }

    }

    /// <summary>Activity Modes are grouped into a few possible broad categories.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyActivityModeCategory
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>Information about matchmaking and party size for the activity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityMatchmakingBlockDefinition
    {
        /// <summary>If TRUE, the activity is matchmade. Otherwise, it requires explicit forming of a party.</summary>
        [Newtonsoft.Json.JsonProperty("isMatchmade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMatchmade { get; set; }

        /// <summary>The minimum # of people in the fireteam for the activity to launch.</summary>
        [Newtonsoft.Json.JsonProperty("minParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinParty { get; set; }

        /// <summary>The maximum # of people allowed in a Fireteam.</summary>
        [Newtonsoft.Json.JsonProperty("maxParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxParty { get; set; }

        /// <summary>The maximum # of people allowed across all teams in the activity.</summary>
        [Newtonsoft.Json.JsonProperty("maxPlayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxPlayers { get; set; }

        /// <summary>If true, you have to Solemnly Swear to be up to Nothing But Good(tm) to play.</summary>
        [Newtonsoft.Json.JsonProperty("requiresGuardianOath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequiresGuardianOath { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityMatchmakingBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityMatchmakingBlockDefinition>(data);
        }

    }

    /// <summary>Guided Game information for this activity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGuidedBlockDefinition
    {
        /// <summary>The maximum amount of people that can be in the waiting lobby.</summary>
        [Newtonsoft.Json.JsonProperty("guidedMaxLobbySize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GuidedMaxLobbySize { get; set; }

        /// <summary>The minimum amount of people that can be in the waiting lobby.</summary>
        [Newtonsoft.Json.JsonProperty("guidedMinLobbySize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GuidedMinLobbySize { get; set; }

        /// <summary>If -1, the guided group cannot be disbanded. Otherwise, take the total # of players in the activity and subtract this number: that is the total # of votes needed for the guided group to disband.</summary>
        [Newtonsoft.Json.JsonProperty("guidedDisbandCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GuidedDisbandCount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGuidedBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGuidedBlockDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityLoadoutRequirementSet
    {
        /// <summary>The set of requirements that will be applied on the activity if this requirement set is active.</summary>
        [Newtonsoft.Json.JsonProperty("requirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityLoadoutRequirement> Requirements { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityLoadoutRequirementSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityLoadoutRequirementSet>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityLoadoutRequirement
    {
        [Newtonsoft.Json.JsonProperty("equipmentSlotHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipmentSlotHash { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedEquippedItemHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> AllowedEquippedItemHashes { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedWeaponSubTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSubType> AllowedWeaponSubTypes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityLoadoutRequirement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityLoadoutRequirement>(data);
        }

    }

    /// <summary>This Enumeration further classifies items by more specific categorizations than DestinyItemType. The "Sub-Type" is where we classify and categorize items one step further in specificity: "Auto Rifle" instead of just "Weapon" for example, or "Vanguard Bounty" instead of merely "Bounty".
    /// These sub-types are provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a "best guess" fit.
    /// NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyItemSubType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _23 = 23,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

    }

    /// <summary>A point of entry into an activity, gated by an unlock flag and with some more-or-less useless (for our purposes) phase information. I'm including it in case we end up being able to bolt more useful information onto it in the future.
    /// UPDATE: Turns out this information isn't actually useless, and is in fact actually useful for people. Who would have thought? We still don't have localized info for it, but at least this will help people when they're looking at phase indexes in stats data, or when they want to know what phases have been completed on a weekly achievement.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityInsertionPointDefinition
    {
        /// <summary>A unique hash value representing the phase. This can be useful for, for example, comparing how different instances of Raids have phases in different orders!</summary>
        [Newtonsoft.Json.JsonProperty("phaseHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PhaseHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityInsertionPointDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityInsertionPointDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyEnvironmentLocationMapping
    {
        /// <summary>The location that is revealed on the director by this mapping.</summary>
        [Newtonsoft.Json.JsonProperty("locationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationHash { get; set; }

        /// <summary>A hint that the UI uses to figure out how this location is activated by the player.</summary>
        [Newtonsoft.Json.JsonProperty("activationSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivationSource { get; set; }

        /// <summary>If this is populated, it is the item that you must possess for this location to be active because of this mapping. (theoretically, a location can have multiple mappings, and some might require an item while others don't)</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>If this is populated, this is an objective related to the location.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectiveHash { get; set; }

        /// <summary>If this is populated, this is the activity you have to be playing in order to see this location appear because of this mapping. (theoretically, a location can have multiple mappings, and some might require you to be in a specific activity when others don't)</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyEnvironmentLocationMapping FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyEnvironmentLocationMapping>(data);
        }

    }

    /// <summary>Okay, so Activities (DestinyActivityDefinition) take place in Destinations (DestinyDestinationDefinition). Destinations are part of larger locations known as Places (you're reading its documentation right now).
    /// Places are more on the planetary scale, like "Earth" and "Your Mom."</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPlaceDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPlaceDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPlaceDefinition>(data);
        }

    }

    /// <summary>The definition for an Activity Type.
    /// In Destiny 2, an Activity Type represents a conceptual categorization of Activities.
    /// These are most commonly used in the game for the subtitle under Activities, but BNet uses them extensively to identify and group activities by their common properties.
    /// Unfortunately, there has been a movement away from providing the richer data in Destiny 2 that we used to get in Destiny 1 for Activity Types. For instance, Nightfalls are grouped under the same Activity Type as regular Strikes. 
    /// For this reason, BNet will eventually migrate toward Activity Modes as a better indicator of activity category. But for the time being, it is still referred to in many places across our codebase.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityTypeDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityTypeDefinition>(data);
        }

    }

    /// <summary>Represents a single state that a graph node might end up in. Depending on what's going on in the game, graph nodes could be shown in different ways or even excluded from view entirely.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphNodeStateEntry
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyGraphNodeState? State { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphNodeStateEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphNodeStateEntry>(data);
        }

    }

    /// <summary>Represents a potential state of an Activity Graph node.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyGraphNodeState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>These Art Elements are meant to represent one-off visual effects overlaid on the map. Currently, we do not have a pipeline to import the assets for these overlays, so this info exists as a placeholder for when such a pipeline exists (if it ever will)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphArtElementDefinition
    {
        /// <summary>The position on the map of the art element.</summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Position2 Position { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphArtElementDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphArtElementDefinition>(data);
        }

    }

    /// <summary>Nodes on a graph can be visually connected: this appears to be the information about which nodes to link. It appears to lack more detailed information, such as the path for that linking.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphConnectionDefinition
    {
        [Newtonsoft.Json.JsonProperty("sourceNodeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SourceNodeHash { get; set; }

        [Newtonsoft.Json.JsonProperty("destNodeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestNodeHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphConnectionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphConnectionDefinition>(data);
        }

    }

    /// <summary>When a Graph needs to show active Objectives, this defines those objectives as well as an identifier.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphDisplayObjectiveDefinition
    {
        /// <summary>$NOTE $amola 2017-01-19 This field is apparently something that CUI uses to manually wire up objectives to display info. I am unsure how it works.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>The objective being shown on the map.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectiveHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphDisplayObjectiveDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphDisplayObjectiveDefinition>(data);
        }

    }

    /// <summary>When a Graph needs to show active Progressions, this defines those objectives as well as an identifier.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityGraphDisplayProgressionDefinition
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("progressionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityGraphDisplayProgressionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityGraphDisplayProgressionDefinition>(data);
        }

    }

    /// <summary>This describes links between the current graph and others, as well as when that link is relevant.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLinkedGraphDefinition
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("unlockExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyUnlockExpressionDefinition UnlockExpression { get; set; }

        [Newtonsoft.Json.JsonProperty("linkedGraphId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LinkedGraphId { get; set; }

        [Newtonsoft.Json.JsonProperty("linkedGraphs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyLinkedGraphEntryDefinition> LinkedGraphs { get; set; }

        [Newtonsoft.Json.JsonProperty("overview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Overview { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLinkedGraphDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLinkedGraphDefinition>(data);
        }

    }

    /// <summary>Where the sausage gets made. Unlock Expressions are the foundation of the game's gating mechanics and investment-related restrictions. They can test Unlock Flags and Unlock Values for certain states, using a sufficient amount of logical operators such that unlock expressions are effectively Turing complete.
    /// Use UnlockExpressionParser to evaluate expressions using an IUnlockContext parsed from Babel.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyUnlockExpressionDefinition
    {
        /// <summary>A shortcut for determining the most restrictive gating that this expression performs. See the DestinyGatingScope enum's documentation for more details.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope4 Scope { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyUnlockExpressionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyUnlockExpressionDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLinkedGraphEntryDefinition
    {
        [Newtonsoft.Json.JsonProperty("activityGraphHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityGraphHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLinkedGraphEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLinkedGraphEntryDefinition>(data);
        }

    }

    /// <summary>Human readable data about the bubble. Combine with DestinyBubbleDefinition - see DestinyDestinationDefinition.bubbleSettings for more information.
    /// DEPRECATED - Just use bubbles.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyDestinationBubbleSettingDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyDestinationBubbleSettingDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyDestinationBubbleSettingDefinition>(data);
        }

    }

    /// <summary>Basic identifying data about the bubble. Combine with DestinyDestinationBubbleSettingDefinition - see DestinyDestinationDefinition.bubbleSettings for more information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyBubbleDefinition
    {
        /// <summary>The identifier for the bubble: only guaranteed to be unique within the Destination.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The display properties of this bubble, so you don't have to look them up in a separate list anymore.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties9 DisplayProperties { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyBubbleDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyBubbleDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorGroupReference
    {
        /// <summary>The DestinyVendorGroupDefinition to which this Vendor can belong.</summary>
        [Newtonsoft.Json.JsonProperty("vendorGroupHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorGroupHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorGroupReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorGroupReference>(data);
        }

    }

    /// <summary>BNet attempts to group vendors into similar collections. These groups aren't technically game canonical, but they are helpful for filtering vendors or showing them organized into a clean view on a webpage or app.
    /// These definitions represent the groups we've built. Unlike in Destiny 1, a Vendors' group may change dynamically as the game state changes: thus, you will want to check DestinyVendorComponent responses to find a vendor's currently active Group (if you care).
    /// Using this will let you group your vendors in your UI in a similar manner to how we will do grouping in the Companion.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorGroupDefinition
    {
        /// <summary>The recommended order in which to render the groups, Ascending order.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>For now, a group just has a name.</summary>
        [Newtonsoft.Json.JsonProperty("categoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryName { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorGroupDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorGroupDefinition>(data);
        }

    }

    /// <summary>These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.
    /// A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyFactionDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The hash identifier for the DestinyProgressionDefinition that indicates the character's relationship with this faction in terms of experience and levels.</summary>
        [Newtonsoft.Json.JsonProperty("progressionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionHash { get; set; }

        /// <summary>The faction token item hashes, and their respective progression values.</summary>
        [Newtonsoft.Json.JsonProperty("tokenValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, int> TokenValues { get; set; }

        /// <summary>The faction reward item hash, usually an engram.</summary>
        [Newtonsoft.Json.JsonProperty("rewardItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RewardItemHash { get; set; }

        /// <summary>The faction reward vendor hash, used for faction engram previews.</summary>
        [Newtonsoft.Json.JsonProperty("rewardVendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RewardVendorHash { get; set; }

        /// <summary>List of vendors that are associated with this faction. The last vendor that passes the unlock flag checks is the one that should be shown.</summary>
        [Newtonsoft.Json.JsonProperty("vendors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyFactionVendorDefinition> Vendors { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyFactionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyFactionDefinition>(data);
        }

    }

    /// <summary>These definitions represent faction vendors at different points in the game.
    /// A single faction may contain multiple vendors, or the same vendor available at two different locations.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyFactionVendorDefinition
    {
        /// <summary>The faction vendor hash.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        /// <summary>The hash identifier for a Destination at which this vendor may be located. Each destination where a Vendor may exist will only ever have a single entry.</summary>
        [Newtonsoft.Json.JsonProperty("destinationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationHash { get; set; }

        /// <summary>The relative path to the background image representing this Vendor at this location, for use in a banner.</summary>
        [Newtonsoft.Json.JsonProperty("backgroundImagePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackgroundImagePath { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyFactionVendorDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyFactionVendorDefinition>(data);
        }

    }

    /// <summary>An item's "Quality" determines its calculated stats. The Level at which the item spawns is combined with its "qualityLevel" along with some additional calculations to determine the value of those stats.
    /// In Destiny 2, most items don't have default item levels and quality, making this property less useful: these apparently are almost always determined by the complex mechanisms of the Reward system rather than statically. They are still provided here in case they are still useful for people. This also contains some information about Infusion.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemQualityBlockDefinition
    {
        /// <summary>The "base" defined level of an item. This is a list because, in theory, each Expansion could define its own base level for an item.
        /// In practice, not only was that never done in Destiny 1, but now this isn't even populated at all. When it's not populated, the level at which it spawns has to be inferred by Reward information, of which BNet receives an imperfect view and will only be reliable on instanced data as a result.</summary>
        [Newtonsoft.Json.JsonProperty("itemLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ItemLevels { get; set; }

        /// <summary>qualityLevel is used in combination with the item's level to calculate stats like Attack and Defense. It plays a role in that calculation, but not nearly as large as itemLevel does.</summary>
        [Newtonsoft.Json.JsonProperty("qualityLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QualityLevel { get; set; }

        /// <summary>The string identifier for this item's "infusability", if any. 
        /// Items that match the same infusionCategoryName are allowed to infuse with each other.
        /// DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.</summary>
        [Newtonsoft.Json.JsonProperty("infusionCategoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InfusionCategoryName { get; set; }

        /// <summary>The hash identifier for the infusion. It does not map to a Definition entity.
        /// DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.</summary>
        [Newtonsoft.Json.JsonProperty("infusionCategoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InfusionCategoryHash { get; set; }

        /// <summary>If any one of these hashes matches any value in another item's infusionCategoryHashes, the two can infuse with each other.</summary>
        [Newtonsoft.Json.JsonProperty("infusionCategoryHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> InfusionCategoryHashes { get; set; }

        /// <summary>An item can refer to pre-set level requirements. They are defined in DestinyProgressionLevelRequirementDefinition, and you can use this hash to find the appropriate definition.</summary>
        [Newtonsoft.Json.JsonProperty("progressionLevelRequirementHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionLevelRequirementHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemQualityBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemQualityBlockDefinition>(data);
        }

    }

    /// <summary>These are pre-constructed collections of data that can be used to determine the Level Requirement for an item given a Progression to be tested (such as the Character's level).
    /// For instance, say a character receives a new Auto Rifle, and that Auto Rifle's DestinyInventoryItemDefinition.quality.progressionLevelRequirementHash property is pointing at one of these DestinyProgressionLevelRequirementDefinitions. Let's pretend also that the progressionHash it is pointing at is the Character Level progression. In that situation, the character's level will be used to interpolate a value in the requirementCurve property. The value picked up from that interpolation will be the required level for the item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProgressionLevelRequirementDefinition
    {
        /// <summary>A curve of level requirements, weighted by the related progressions' level.
        /// Interpolate against this curve with the character's progression level to determine what the level requirement of the generated item that is using this data will be.</summary>
        [Newtonsoft.Json.JsonProperty("requirementCurve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InterpolationPointFloat> RequirementCurve { get; set; }

        /// <summary>The progression whose level should be used to determine the level requirement.
        /// Look up the DestinyProgressionDefinition with this hash for more information about the progression in question.</summary>
        [Newtonsoft.Json.JsonProperty("progressionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionHash { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProgressionLevelRequirementDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProgressionLevelRequirementDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InterpolationPointFloat
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InterpolationPointFloat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InterpolationPointFloat>(data);
        }

    }

    /// <summary>This defines an item's "Value". Unfortunately, this appears to be used in different ways depending on the way that the item itself is used.
    /// For items being sold at a Vendor, this is the default "sale price" of the item. These days, the vendor itself almost always sets the price, but it still possible for the price to fall back to this value. For quests, it is a preview of rewards you can gain by completing the quest. For dummy items, if the itemValue refers to an Emblem, it is the emblem that should be shown as the reward. (jeez louise)
    /// It will likely be used in a number of other ways in the future, it appears to be a bucket where they put arbitrary items and quantities into the item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemValueBlockDefinition
    {
        /// <summary>References to the items that make up this item's "value", and the quantity.</summary>
        [Newtonsoft.Json.JsonProperty("itemValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemQuantity> ItemValue { get; set; }

        /// <summary>If there's a localized text description of the value provided, this will be said description.</summary>
        [Newtonsoft.Json.JsonProperty("valueDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueDescription { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemValueBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemValueBlockDefinition>(data);
        }

    }

    /// <summary>Data about an item's "sources": ways that the item can be obtained.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSourceBlockDefinition
    {
        /// <summary>The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).</summary>
        [Newtonsoft.Json.JsonProperty("sourceHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> SourceHashes { get; set; }

        /// <summary>A collection of details about the stats that were computed for the ways we found that the item could be spawned.</summary>
        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSourceDefinition> Sources { get; set; }

        /// <summary>If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.</summary>
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Exclusive Exclusive { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSourceBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSourceBlockDefinition>(data);
        }

    }

    /// <summary>Properties of a DestinyInventoryItemDefinition that store all of the information we were able to discern about how the item spawns, and where you can find the item.
    /// Items will have many of these sources, one per level at which it spawns, to try and give more granular data about where items spawn for specific level ranges.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSourceDefinition
    {
        /// <summary>The level at which the item spawns. Essentially the Primary Key for this source data: there will be multiple of these source entries per item that has source data, grouped by the level at which the item spawns.</summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Level { get; set; }

        /// <summary>The minimum Quality at which the item spawns for this level. Examine DestinyInventoryItemDefinition for more information about what Quality means. Just don't ask Phaedrus about it, he'll never stop talking and you'll have to write a book about it.</summary>
        [Newtonsoft.Json.JsonProperty("minQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinQuality { get; set; }

        /// <summary>The maximum quality at which the item spawns for this level.</summary>
        [Newtonsoft.Json.JsonProperty("maxQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxQuality { get; set; }

        /// <summary>The minimum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.</summary>
        [Newtonsoft.Json.JsonProperty("minLevelRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinLevelRequired { get; set; }

        /// <summary>The maximum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.</summary>
        [Newtonsoft.Json.JsonProperty("maxLevelRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLevelRequired { get; set; }

        /// <summary>The stats computed for this level/quality range.</summary>
        [Newtonsoft.Json.JsonProperty("computedStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyInventoryItemStatDefinition> ComputedStats { get; set; }

        /// <summary>The DestinyRewardSourceDefinitions found that can spawn the item at this level.</summary>
        [Newtonsoft.Json.JsonProperty("sourceHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> SourceHashes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSourceDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSourceDefinition>(data);
        }

    }

    /// <summary>Represents a heuristically-determined "item source" according to Bungie.net. These item sources are non-canonical: we apply a combination of special configuration and often-fragile heuristics to attempt to discern whether an item should be part of a given "source," but we have known cases of false positives and negatives due to our imperfect heuristics.
    /// Still, they provide a decent approximation for people trying to figure out how an item can be obtained. DestinyInventoryItemDefinition refers to sources in the sourceDatas.sourceHashes property for all sources we determined the item could spawn from.
    /// An example in Destiny 1 of a Source would be "Nightfall". If an item has the "Nightfall" source associated with it, it's extremely likely that you can earn that item while playing Nightfall, either during play or as an after-completion reward.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyRewardSourceDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>Sources are grouped into categories: common ways that items are provided. I hope to see this expand in Destiny 2 once we have time to generate accurate reward source data.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Category2 Category { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyRewardSourceDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyRewardSourceDefinition>(data);
        }

    }

    /// <summary>BNet's custom categorization of reward sources. We took a look at the existing ways that items could be spawned, and tried to make high-level categorizations of them. This needs to be re-evaluated for Destiny 2.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyRewardSourceCategory
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>An item can have objectives on it. In practice, these are the exclusive purview of "Quest Step" items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.
    /// Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemObjectiveBlockDefinition
    {
        /// <summary>The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in the order that they should be rendered.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ObjectiveHashes { get; set; }

        /// <summary>For every entry in objectiveHashes, there is a corresponding entry in this array at the same index. If the objective is meant to be associated with a specific DestinyActivityDefinition, there will be a valid hash at that index. Otherwise, it will be invalid (0).
        /// Rendered somewhat obsolete by perObjectiveDisplayProperties, which currently has much the same information but may end up with more info in the future.</summary>
        [Newtonsoft.Json.JsonProperty("displayActivityHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> DisplayActivityHashes { get; set; }

        /// <summary>If True, all objectives must be completed for the step to be completed. If False, any one objective can be completed for the step to be completed.</summary>
        [Newtonsoft.Json.JsonProperty("requireFullObjectiveCompletion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequireFullObjectiveCompletion { get; set; }

        /// <summary>The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.</summary>
        [Newtonsoft.Json.JsonProperty("questlineItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuestlineItemHash { get; set; }

        /// <summary>The localized string for narrative text related to this quest step, if any.</summary>
        [Newtonsoft.Json.JsonProperty("narrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Narrative { get; set; }

        /// <summary>The localized string describing an action to be performed associated with the objectives, if any.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveVerbName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectiveVerbName { get; set; }

        /// <summary>The identifier for the type of quest being performed, if any. Not associated with any fixed definition, yet.</summary>
        [Newtonsoft.Json.JsonProperty("questTypeIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuestTypeIdentifier { get; set; }

        /// <summary>A hashed value for the questTypeIdentifier, because apparently I like to be redundant.</summary>
        [Newtonsoft.Json.JsonProperty("questTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuestTypeHash { get; set; }

        /// <summary>One entry per Objective on the item, it will have related display information.</summary>
        [Newtonsoft.Json.JsonProperty("perObjectiveDisplayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyObjectiveDisplayProperties> PerObjectiveDisplayProperties { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemObjectiveBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemObjectiveBlockDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyObjectiveDisplayProperties
    {
        /// <summary>The activity associated with this objective in the context of this item, if any.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>If true, the game shows this objective on item preview screens.</summary>
        [Newtonsoft.Json.JsonProperty("displayOnItemPreviewScreen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayOnItemPreviewScreen { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyObjectiveDisplayProperties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyObjectiveDisplayProperties>(data);
        }

    }

    /// <summary>If an item is a Plug, its DestinyInventoryItemDefinition.plug property will be populated with an instance of one of these bad boys.
    /// This gives information about when it can be inserted, what the plug's category is (and thus whether it is compatible with a socket... see DestinySocketTypeDefinition for information about Plug Categories and socket compatibility), whether it is enabled and other Plug info.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemPlugDefinition
    {
        /// <summary>The rules around when this plug can be inserted into a socket, aside from the socket's individual restrictions.
        /// The live data DestinyItemPlugComponent.insertFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.</summary>
        [Newtonsoft.Json.JsonProperty("insertionRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPlugRuleDefinition> InsertionRules { get; set; }

        /// <summary>The string identifier for the plug's category. Use the socket's DestinySocketTypeDefinition.plugWhitelist to determine whether this plug can be inserted into the socket.</summary>
        [Newtonsoft.Json.JsonProperty("plugCategoryIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlugCategoryIdentifier { get; set; }

        /// <summary>The hash for the plugCategoryIdentifier. You can use this instead if you wish: I put both in the definition for debugging purposes.</summary>
        [Newtonsoft.Json.JsonProperty("plugCategoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugCategoryHash { get; set; }

        /// <summary>If you successfully socket the item, this will determine whether or not you get "refunded" on the plug.</summary>
        [Newtonsoft.Json.JsonProperty("onActionRecreateSelf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnActionRecreateSelf { get; set; }

        /// <summary>If inserting this plug requires materials, this is the hash identifier for looking up the DestinyMaterialRequirementSetDefinition for those requirements.</summary>
        [Newtonsoft.Json.JsonProperty("insertionMaterialRequirementHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsertionMaterialRequirementHash { get; set; }

        /// <summary>In the game, if you're inspecting a plug item directly, this will be the item shown with the plug attached. Look up the DestinyInventoryItemDefinition for this hash for the item.</summary>
        [Newtonsoft.Json.JsonProperty("previewItemOverrideHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreviewItemOverrideHash { get; set; }

        /// <summary>It's not enough for the plug to be inserted. It has to be enabled as well. For it to be enabled, it may require materials. This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements, if there is one.</summary>
        [Newtonsoft.Json.JsonProperty("enabledMaterialRequirementHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnabledMaterialRequirementHash { get; set; }

        /// <summary>The rules around whether the plug, once inserted, is enabled and providing its benefits.
        /// The live data DestinyItemPlugComponent.enableFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.</summary>
        [Newtonsoft.Json.JsonProperty("enabledRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPlugRuleDefinition> EnabledRules { get; set; }

        /// <summary>Plugs can have arbitrary, UI-defined identifiers that the UI designers use to determine the style applied to plugs. Unfortunately, we have neither a definitive list of these labels nor advance warning of when new labels might be applied or how that relates to how they get rendered. If you want to, you can refer to known labels to change your own styles: but know that new ones can be created arbitrarily, and we have no way of associating the labels with any specific UI style guidance... you'll have to piece that together on your end. Or do what we do, and just show plugs more generically, without specialized styles.</summary>
        [Newtonsoft.Json.JsonProperty("uiPlugLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UiPlugLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("plugStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlugUiStyles? PlugStyle { get; set; }

        /// <summary>If TRUE, the plug doesn't actually convey any benefit: it only exists to show information in the UI.</summary>
        [Newtonsoft.Json.JsonProperty("isPseudoPlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPseudoPlug { get; set; }

        /// <summary>Indicates the rules about when this plug can be used. See the PlugAvailabilityMode enumeration for more information!</summary>
        [Newtonsoft.Json.JsonProperty("plugAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlugAvailability PlugAvailability { get; set; }

        /// <summary>If the plug meets certain state requirements, it may have an alternative label applied to it. This is the alternative label that will be applied in such a situation.</summary>
        [Newtonsoft.Json.JsonProperty("alternateUiPlugLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateUiPlugLabel { get; set; }

        /// <summary>The alternate plug of the plug: only applies when the item is in states that only the server can know about and control, unfortunately. See AlternateUiPlugLabel for the related label info.</summary>
        [Newtonsoft.Json.JsonProperty("alternatePlugStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlternatePlugStyle AlternatePlugStyle { get; set; }

        /// <summary>If TRUE, this plug is used for UI display purposes only, and doesn't have any interesting effects of its own.</summary>
        [Newtonsoft.Json.JsonProperty("isDummyPlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDummyPlug { get; set; }

        /// <summary>Do you ever get the feeling that a system has become so overburdened by edge cases that it probably should have become some other system entirely? So do I!
        /// In totally unrelated news, Plugs can now override properties of their parent items. This is some of the relevant definition data for those overrides.
        /// If this is populated, it will have the override data to be applied when this plug is applied to an item.</summary>
        [Newtonsoft.Json.JsonProperty("parentItemOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParentItemOverride ParentItemOverride { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemPlugDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemPlugDefinition>(data);
        }

    }

    /// <summary>Dictates a rule around whether the plug is enabled or insertable.
    /// In practice, the live Destiny data will refer to these entries by index. You can then look up that index in the appropriate property (enabledRules or insertionRules) to get the localized string for the failure message if it failed.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPlugRuleDefinition
    {
        /// <summary>The localized string to show if this rule fails.</summary>
        [Newtonsoft.Json.JsonProperty("failureMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FailureMessage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPlugRuleDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPlugRuleDefinition>(data);
        }

    }

    /// <summary>If the plug has a specific custom style, this enumeration will represent that style/those styles.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlugUiStyles
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>This enum determines whether the plug is available to be inserted.
    /// - Normal means that all existing rules for plug insertion apply.
    /// - UnavailableIfSocketContainsMatchingPlugCategory means that the plug is only available if the socket does NOT match the plug category.
    /// - AvailableIfSocketContainsMatchingPlugCategory means that the plug is only available if the socket DOES match the plug category.
    /// For category matching, use the plug's "plugCategoryIdentifier" property, comparing it to</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlugAvailabilityMode
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyParentItemOverride
    {
        [Newtonsoft.Json.JsonProperty("additionalEquipRequirementsDisplayStrings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AdditionalEquipRequirementsDisplayStrings { get; set; }

        [Newtonsoft.Json.JsonProperty("pipIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PipIcon { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyParentItemOverride FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyParentItemOverride>(data);
        }

    }

    /// <summary>Represent a set of material requirements: Items that either need to be owned or need to be consumed in order to perform an action.
    /// A variety of other entities refer to these as gatekeepers and payments for actions that can be performed in game.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMaterialRequirementSetDefinition
    {
        /// <summary>The list of all materials that are required.</summary>
        [Newtonsoft.Json.JsonProperty("materials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMaterialRequirement> Materials { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMaterialRequirementSetDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMaterialRequirementSetDefinition>(data);
        }

    }

    /// <summary>Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I'm not sure yet whether I regret that.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMaterialRequirement
    {
        /// <summary>The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>If True, the material will be removed from the character's inventory when the action is performed.</summary>
        [Newtonsoft.Json.JsonProperty("deleteOnAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeleteOnAction { get; set; }

        /// <summary>The amount of the material required.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>If True, this requirement is "silent": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.</summary>
        [Newtonsoft.Json.JsonProperty("omitFromRequirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OmitFromRequirements { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMaterialRequirement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMaterialRequirement>(data);
        }

    }

    /// <summary>If an item has a related gearset, this is the list of items in that set, and an unlock expression that evaluates to a number representing the progress toward gearset completion (a very rare use for unlock expressions!)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemGearsetBlockDefinition
    {
        /// <summary>The maximum possible number of items that can be collected.</summary>
        [Newtonsoft.Json.JsonProperty("trackingValueMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackingValueMax { get; set; }

        /// <summary>The list of hashes for items in the gearset. Use them to look up DestinyInventoryItemDefinition entries for the items in the set.</summary>
        [Newtonsoft.Json.JsonProperty("itemList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ItemList { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemGearsetBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemGearsetBlockDefinition>(data);
        }

    }

    /// <summary>Some items are "sacks" - they can be "opened" to produce other items. This is information related to its sack status, mostly UI strings. Engrams are an example of items that are considered to be "Sacks".</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSackBlockDefinition
    {
        /// <summary>A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info.</summary>
        [Newtonsoft.Json.JsonProperty("detailAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailAction { get; set; }

        /// <summary>The localized name of the action being performed when you open the sack.</summary>
        [Newtonsoft.Json.JsonProperty("openAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OpenAction { get; set; }

        [Newtonsoft.Json.JsonProperty("selectItemCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SelectItemCount { get; set; }

        [Newtonsoft.Json.JsonProperty("vendorSackType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorSackType { get; set; }

        [Newtonsoft.Json.JsonProperty("openOnAcquire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OpenOnAcquire { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSackBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSackBlockDefinition>(data);
        }

    }

    /// <summary>If defined, the item has at least one socket.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSocketBlockDefinition
    {
        /// <summary>This was supposed to be a string that would give per-item details about sockets. In practice, it turns out that all this ever has is the localized word "details". ... that's lame, but perhaps it will become something cool in the future.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>Each non-intrinsic (or mutable) socket on an item is defined here. Check inside for more info.</summary>
        [Newtonsoft.Json.JsonProperty("socketEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSocketEntryDefinition> SocketEntries { get; set; }

        /// <summary>Each intrinsic (or immutable/permanent) socket on an item is defined here, along with the plug that is permanently affixed to the socket.</summary>
        [Newtonsoft.Json.JsonProperty("intrinsicSockets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemIntrinsicSocketEntryDefinition> IntrinsicSockets { get; set; }

        /// <summary>A convenience property, that refers to the sockets in the "sockets" property, pre-grouped by category and ordered in the manner that they should be grouped in the UI. You could form this yourself with the existing data, but why would you want to? Enjoy life man.</summary>
        [Newtonsoft.Json.JsonProperty("socketCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSocketCategoryDefinition> SocketCategories { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSocketBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSocketBlockDefinition>(data);
        }

    }

    /// <summary>The definition information for a specific socket on an item. This will determine how the socket behaves in-game.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSocketEntryDefinition
    {
        /// <summary>All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket.</summary>
        [Newtonsoft.Json.JsonProperty("socketTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SocketTypeHash { get; set; }

        /// <summary>If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted.</summary>
        [Newtonsoft.Json.JsonProperty("singleInitialItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SingleInitialItemHash { get; set; }

        /// <summary>This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.
        /// If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.</summary>
        [Newtonsoft.Json.JsonProperty("reusablePlugItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSocketEntryPlugItemDefinition> ReusablePlugItems { get; set; }

        /// <summary>If this is true, then the socket will not be initialized with a plug if the item is purchased from a Vendor.
        /// Remember that Vendors are much more than conceptual vendors: they include "Collection Kiosks" and other entities. See DestinyVendorDefinition for more information.</summary>
        [Newtonsoft.Json.JsonProperty("preventInitializationOnVendorPurchase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreventInitializationOnVendorPurchase { get; set; }

        /// <summary>If this is true, the perks provided by this socket shouldn't be shown in the item's tooltip. This might be useful if it's providing a hidden bonus, or if the bonus is less important than other benefits on the item.</summary>
        [Newtonsoft.Json.JsonProperty("hidePerksInItemTooltip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HidePerksInItemTooltip { get; set; }

        /// <summary>Indicates where you should go to get plugs for this socket. This will affect how you populate your UI, as well as what plugs are valid for this socket. It's an alternative to having to check for the existence of certain properties (reusablePlugItems for example) to infer where plugs should come from.</summary>
        [Newtonsoft.Json.JsonProperty("plugSources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlugSources PlugSources { get; set; }

        /// <summary>If this socket's plugs come from a reusable DestinyPlugSetDefinition, this is the identifier for that set. We added this concept to reduce some major duplication that's going to come from sockets as replacements for what was once implemented as large sets of items and kiosks (like Emotes).</summary>
        [Newtonsoft.Json.JsonProperty("reusablePlugSetHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReusablePlugSetHash { get; set; }

        /// <summary>As of Forsaken, item sockets can have randomized plugs. If this is populated, the live data will return a subset of plugs from this list that are active and able to be inserted into the socket just like a reusable plug.</summary>
        [Newtonsoft.Json.JsonProperty("randomizedPlugItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSocketEntryPlugItemRandomizedDefinition> RandomizedPlugItems { get; set; }

        /// <summary>If true, then this socket is visible in the item's "default" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.</summary>
        [Newtonsoft.Json.JsonProperty("defaultVisible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultVisible { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSocketEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSocketEntryDefinition>(data);
        }

    }

    /// <summary>The definition of a known, reusable plug that can be applied to a socket.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSocketEntryPlugItemDefinition
    {
        /// <summary>The hash identifier of a DestinyInventoryItemDefinition representing the plug that can be inserted.</summary>
        [Newtonsoft.Json.JsonProperty("plugItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSocketEntryPlugItemDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSocketEntryPlugItemDefinition>(data);
        }

    }

    /// <summary>Indicates how a socket is populated, and where you should look for valid plug data. This is a flags enumeration field, as you may have to look in multiple sources across multiple components for valid plugs.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SocketPlugSources
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSocketEntryPlugItemRandomizedDefinition
    {
        /// <summary>The hash identifier of a DestinyInventoryItemDefinition representing the plug that can be inserted.</summary>
        [Newtonsoft.Json.JsonProperty("plugItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSocketEntryPlugItemRandomizedDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSocketEntryPlugItemRandomizedDefinition>(data);
        }

    }

    /// <summary>Represents a socket that has a plug associated with it intrinsically. This is useful for situations where the weapon needs to have a visual plug/Mod on it, but that plug/Mod should never change.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemIntrinsicSocketEntryDefinition
    {
        /// <summary>Indicates the plug that is intrinsically inserted into this socket.</summary>
        [Newtonsoft.Json.JsonProperty("plugItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugItemHash { get; set; }

        /// <summary>Indicates the type of this intrinsic socket.</summary>
        [Newtonsoft.Json.JsonProperty("socketTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SocketTypeHash { get; set; }

        /// <summary>If true, then this socket is visible in the item's "default" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.</summary>
        [Newtonsoft.Json.JsonProperty("defaultVisible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultVisible { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemIntrinsicSocketEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemIntrinsicSocketEntryDefinition>(data);
        }

    }

    /// <summary>Sockets are grouped into categories in the UI. These define which category and which sockets are under that category.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSocketCategoryDefinition
    {
        /// <summary>The hash for the Socket Category: a quick way to go get the header display information for the category. Use it to look up DestinySocketCategoryDefinition info.</summary>
        [Newtonsoft.Json.JsonProperty("socketCategoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SocketCategoryHash { get; set; }

        /// <summary>Use these indexes to look up the sockets in the "sockets.socketEntries" property on the item definition. These are the indexes under the category, in game-rendered order.</summary>
        [Newtonsoft.Json.JsonProperty("socketIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> SocketIndexes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSocketCategoryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSocketCategoryDefinition>(data);
        }

    }

    /// <summary>This appears to be information used when rendering rewards. We don't currently use it on BNet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSummaryBlockDefinition
    {
        /// <summary>Apparently when rendering an item in a reward, this should be used as a sort priority. We're not doing it presently.</summary>
        [Newtonsoft.Json.JsonProperty("sortPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortPriority { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSummaryBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSummaryBlockDefinition>(data);
        }

    }

    /// <summary>This defines information that can only come from a talent grid on an item. Items mostly have negligible talent grid data these days, but instanced items still retain grids as a source for some of this common information.
    /// Builds/Subclasses are the only items left that still have talent grids with meaningful Nodes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemTalentGridBlockDefinition
    {
        /// <summary>The hash identifier of the DestinyTalentGridDefinition attached to this item.</summary>
        [Newtonsoft.Json.JsonProperty("talentGridHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TalentGridHash { get; set; }

        /// <summary>This is meant to be a subtitle for looking at the talent grid. In practice, somewhat frustratingly, this always merely says the localized word for "Details". Great. Maybe it'll have more if talent grids ever get used for more than builds and subclasses again.</summary>
        [Newtonsoft.Json.JsonProperty("itemDetailString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDetailString { get; set; }

        /// <summary>A shortcut string identifier for the "build" in question, if this talent grid has an associated build. Doesn't map to anything we can expose at the moment.</summary>
        [Newtonsoft.Json.JsonProperty("buildName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildName { get; set; }

        /// <summary>If the talent grid implies a damage type, this is the enum value for that damage type.</summary>
        [Newtonsoft.Json.JsonProperty("hudDamageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HudDamageType HudDamageType { get; set; }

        /// <summary>If the talent grid has a special icon that's shown in the game UI (like builds, funny that), this is the identifier for that icon. Sadly, we don't actually get that icon right now. I'll be looking to replace this with a path to the actual icon itself.</summary>
        [Newtonsoft.Json.JsonProperty("hudIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HudIcon { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemTalentGridBlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemTalentGridBlockDefinition>(data);
        }

    }

    /// <summary>The time has unfortunately come to talk about Talent Grids.
    /// Talent Grids are the most complex and unintuitive part of the Destiny Definition data. Grab a cup of coffee before we begin, I can wait.
    /// Talent Grids were the primary way that items could be customized in Destiny 1. In Destiny 2, for now, talent grids have become exclusively used by Subclass/Build items: but the system is still in place for it to be used by items should the direction change back toward talent grids.
    /// Talent Grids have Nodes: the visual circles on the talent grid detail screen that have icons and can be activated if you meet certain requirements and pay costs. The actual visual data and effects, however, are driven by the "Steps" on Talent Nodes. Any given node will have 1:M of these steps, and the specific step that will be considered the "current" step (and thus the dictator of all benefits, visual state, and activation requirements on the Node) will almost always not be determined until an instance of the item is created. This is how, in Destiny 1, items were able to have such a wide variety of what users saw as "Perks": they were actually Talent Grids with nodes that had a wide variety of Steps, randomly chosen at the time of item creation.
    /// Now that Talent Grids are used exclusively by subclasses and builds, all of the properties within still apply: but there are additional visual elements on the Subclass/Build screens that are superimposed on top of the talent nodes. Unfortunately, BNet doesn't have this data: if you want to build a subclass screen, you will have to provide your own "decorative" assets, such as the visual connectors between nodes and the fancy colored-fire-bathed character standing behind the nodes.
    /// DestinyInventoryItem.talentGrid.talentGridHash defines an item's linked Talent Grid, which brings you to this definition that contains enough satic data about talent grids to make your head spin. These *must* be combined with instanced data - found when live data returns DestinyItemTalentGridComponent - in order to derive meaning. The instanced data will reference nodes and steps within these definitions, which you will then have to look up in the definition and combine with the instanced data to give the user the visual representation of their item's talent grid.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyTalentGridDefinition
    {
        /// <summary>The maximum possible level of the Talent Grid: at this level, any nodes are allowed to be activated.</summary>
        [Newtonsoft.Json.JsonProperty("maxGridLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxGridLevel { get; set; }

        /// <summary>The meaning of this has been lost in the sands of time: it still exists as a property, but appears to be unused in the modern UI of talent grids. It used to imply that each visual "column" of talent nodes required identical progression levels in order to be activated. Returning this value in case it is still useful to someone? Perhaps it's just a bit of interesting history.</summary>
        [Newtonsoft.Json.JsonProperty("gridLevelPerColumn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GridLevelPerColumn { get; set; }

        /// <summary>The hash identifier of the Progression (DestinyProgressionDefinition) that drives whether and when Talent Nodes can be activated on the Grid. Items will have instances of this Progression, and will gain experience that will eventually cause the grid to increase in level. As the grid's level increases, it will cross the threshold where nodes can be activated. See DestinyTalentGridStepDefinition's activation requirements for more information.</summary>
        [Newtonsoft.Json.JsonProperty("progressionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionHash { get; set; }

        /// <summary>The list of Talent Nodes on the Grid (recall that Nodes themselves are really just locations in the UI to show whatever their current Step is. You will only know the current step for a node by retrieving instanced data through platform calls to the API that return DestinyItemTalentGridComponent).</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyTalentNodeDefinition> Nodes { get; set; }

        /// <summary>Talent Nodes can exist in "exclusive sets": these are sets of nodes in which only a single node in the set can be activated at any given time. Activating a node in this set will automatically deactivate the other nodes in the set (referred to as a "Swap").
        /// If a node in the exclusive set has already been activated, the game will not charge you materials to activate another node in the set, even if you have never activated it before, because you already paid the cost to activate one node in the set.
        /// Not to be confused with Exclusive Groups. (how the heck do we NOT get confused by that? Jeez) See the groups property for information about that only-tangentially-related concept.</summary>
        [Newtonsoft.Json.JsonProperty("exclusiveSets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyTalentNodeExclusiveSetDefinition> ExclusiveSets { get; set; }

        /// <summary>This is a quick reference to the indexes of nodes that are not part of exclusive sets. Handy for knowing which talent nodes can only be activated directly, rather than via swapping.</summary>
        [Newtonsoft.Json.JsonProperty("independentNodeIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> IndependentNodeIndexes { get; set; }

        /// <summary>Talent Nodes can have "Exclusive Groups". These are not to be confused with Exclusive Sets (see exclusiveSets property).
        /// Look at the definition of DestinyTalentExclusiveGroup for more information and how they work. These groups are keyed by the "groupHash" from DestinyTalentExclusiveGroup.</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyTalentExclusiveGroup> Groups { get; set; }

        /// <summary>BNet wants to show talent nodes grouped by similar purpose with localized titles. This is the ordered list of those categories: if you want to show nodes by category, you can iterate over this list, render the displayProperties for the category as the title, and then iterate over the talent nodes referenced by the category to show the related nodes.
        /// Note that this is different from Exclusive Groups or Sets, because these categories also incorporate "Independent" nodes that belong to neither sets nor groups. These are purely for visual grouping of nodes rather than functional grouping.</summary>
        [Newtonsoft.Json.JsonProperty("nodeCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyTalentNodeCategory> NodeCategories { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyTalentGridDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyTalentGridDefinition>(data);
        }

    }

    /// <summary>Talent Grids on items have Nodes. These nodes have positions in the talent grid's UI, and contain "Steps" (DestinyTalentNodeStepDefinition), one of whom will be the "Current" step.
    /// The Current Step determines the visual properties of the node, as well as what the node grants when it is activated.
    /// See DestinyTalentGridDefinition for a more complete overview of how Talent Grids work, and how they are used in Destiny 2 (and how they were used in Destiny 1).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyTalentNodeDefinition
    {
        /// <summary>The index into the DestinyTalentGridDefinition's "nodes" property where this node is located. Used to uniquely identify the node within the Talent Grid. Note that this is content version dependent: make sure you have the latest version of content before trying to use these properties.</summary>
        [Newtonsoft.Json.JsonProperty("nodeIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeIndex { get; set; }

        /// <summary>The hash identifier for the node, which unfortunately is also content version dependent but can be (and ideally, should be) used instead of the nodeIndex to uniquely identify the node.
        /// The two exist side-by-side for backcompat reasons due to the Great Talent Node Restructuring of Destiny 1, and I ran out of time to remove one of them and standardize on the other. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("nodeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeHash { get; set; }

        /// <summary>The visual "row" where the node should be shown in the UI. If negative, then the node is hidden.</summary>
        [Newtonsoft.Json.JsonProperty("row", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Row { get; set; }

        /// <summary>The visual "column" where the node should be shown in the UI. If negative, the node is hidden.</summary>
        [Newtonsoft.Json.JsonProperty("column", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Column { get; set; }

        /// <summary>Indexes into the DestinyTalentGridDefinition.nodes property for any nodes that must be activated before this one is allowed to be activated.
        /// I would have liked to change this to hashes for Destiny 2, but we have run out of time.</summary>
        [Newtonsoft.Json.JsonProperty("prerequisiteNodeIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> PrerequisiteNodeIndexes { get; set; }

        /// <summary>At one point, Talent Nodes supported the idea of "Binary Pairs": nodes that overlapped each other visually, and where activating one deactivated the other. They ended up not being used, mostly because Exclusive Sets are *almost* a superset of this concept, but the potential for it to be used still exists in theory.
        /// If this is ever used, this will be the index into the DestinyTalentGridDefinition.nodes property for the node that is the binary pair match to this node. Activating one deactivates the other.</summary>
        [Newtonsoft.Json.JsonProperty("binaryPairNodeIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BinaryPairNodeIndex { get; set; }

        /// <summary>If true, this node will automatically unlock when the Talent Grid's level reaches the required level of the current step of this node.</summary>
        [Newtonsoft.Json.JsonProperty("autoUnlocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoUnlocks { get; set; }

        /// <summary>At one point, Nodes were going to be able to be activated multiple times, changing the current step and potentially piling on multiple effects from the previously activated steps. This property would indicate if the last step could be activated multiple times. 
        /// This is not currently used, but it isn't out of the question that this could end up being used again in a theoretical future.</summary>
        [Newtonsoft.Json.JsonProperty("lastStepRepeats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LastStepRepeats { get; set; }

        /// <summary>If this is true, the node's step is determined randomly rather than the first step being chosen.</summary>
        [Newtonsoft.Json.JsonProperty("isRandom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRandom { get; set; }

        /// <summary>At one point, you were going to be able to repurchase talent nodes that had random steps, to "re-roll" the current step of the node (and thus change the properties of your item). This was to be the activation requirement for performing that re-roll.
        /// The system still exists to do this, as far as I know, so it may yet come back around!</summary>
        [Newtonsoft.Json.JsonProperty("randomActivationRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RandomActivationRequirement RandomActivationRequirement { get; set; }

        /// <summary>If this is true, the node can be "re-rolled" to acquire a different random current step. This is not used, but still exists for a theoretical future of talent grids.</summary>
        [Newtonsoft.Json.JsonProperty("isRandomRepurchasable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRandomRepurchasable { get; set; }

        /// <summary>At this point, "steps" have been obfuscated into conceptual entities, aggregating the underlying notions of "properties" and "true steps".
        /// If you need to know a step as it truly exists - such as when recreating Node logic when processing Vendor data - you'll have to use the "realSteps" property below.</summary>
        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyNodeStepDefinition> Steps { get; set; }

        /// <summary>The nodeHash values for nodes that are in an Exclusive Set with this node.
        /// See DestinyTalentGridDefinition.exclusiveSets for more info about exclusive sets.
        /// Again, note that these are nodeHashes and *not* nodeIndexes.</summary>
        [Newtonsoft.Json.JsonProperty("exclusiveWithNodeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ExclusiveWithNodeHashes { get; set; }

        /// <summary>If the node's step is randomly selected, this is the amount of the Talent Grid's progression experience at which the progression bar for the node should be shown.</summary>
        [Newtonsoft.Json.JsonProperty("randomStartProgressionBarAtProgression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RandomStartProgressionBarAtProgression { get; set; }

        /// <summary>A string identifier for a custom visual layout to apply to this talent node. Unfortunately, we do not have any data for rendering these custom layouts. It will be up to you to interpret these strings and change your UI if you want to have custom UI matching these layouts.</summary>
        [Newtonsoft.Json.JsonProperty("layoutIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayoutIdentifier { get; set; }

        /// <summary>As of Destiny 2, nodes can exist as part of "Exclusive Groups". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause "opposing" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
        /// See DestinyTalentExclusiveGroup for more information on the details. This is an identifier for this node's group, if it is part of one.</summary>
        [Newtonsoft.Json.JsonProperty("groupHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupHash { get; set; }

        /// <summary>Talent nodes can be associated with a piece of Lore, generally rendered in a tooltip. This is the hash identifier of the lore element to show, if there is one to be show.</summary>
        [Newtonsoft.Json.JsonProperty("loreHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoreHash { get; set; }

        /// <summary>Comes from the talent grid node style: this identifier should be used to determine how to render the node in the UI.</summary>
        [Newtonsoft.Json.JsonProperty("nodeStyleIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeStyleIdentifier { get; set; }

        /// <summary>Comes from the talent grid node style: if true, then this node should be ignored for determining whether the grid is complete.</summary>
        [Newtonsoft.Json.JsonProperty("ignoreForCompletion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IgnoreForCompletion { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyTalentNodeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyTalentNodeDefinition>(data);
        }

    }

    /// <summary>Talent nodes have requirements that must be met before they can be activated.
    /// This describes the material costs, the Level of the Talent Grid's progression required, and other conditional information that limits whether a talent node can be activated.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyNodeActivationRequirement
    {
        /// <summary>The Progression level on the Talent Grid required to activate this node.
        /// See DestinyTalentGridDefinition.progressionHash for the related Progression, and read DestinyProgressionDefinition's documentation to learn more about Progressions.</summary>
        [Newtonsoft.Json.JsonProperty("gridLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GridLevel { get; set; }

        /// <summary>The list of hash identifiers for material requirement sets: materials that are required for the node to be activated. See DestinyMaterialRequirementSetDefinition for more information about material requirements.
        /// In this case, only a single DestinyMaterialRequirementSetDefinition will be chosen from this list, and we won't know which one will be chosen until an instance of the item is created.</summary>
        [Newtonsoft.Json.JsonProperty("materialRequirementHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> MaterialRequirementHashes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyNodeActivationRequirement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyNodeActivationRequirement>(data);
        }

    }

    /// <summary>This defines the properties of a "Talent Node Step". When you see a talent node in game, the actual visible properties that you see (its icon, description, the perks and stats it provides) are not provided by the Node itself, but rather by the currently active Step on the node.
    /// When a Talent Node is activated, the currently active step's benefits are conferred upon the item and character.
    /// The currently active step on talent nodes are determined when an item is first instantiated. Sometimes it is random, sometimes it is more deterministic (particularly when a node has only a single step).
    /// Note that, when dealing with Talent Node Steps, you must ensure that you have the latest version of content. stepIndex and nodeStepHash - two ways of identifying the step within a node - are both content version dependent, and thus are subject to change between content updates.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyNodeStepDefinition
    {
        /// <summary>These are the display properties actually used to render the Talent Node. The currently active step's displayProperties are shown.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties10 DisplayProperties { get; set; }

        /// <summary>The index of this step in the list of Steps on the Talent Node.
        /// Unfortunately, this is the closest thing we have to an identifier for the Step: steps are not provided a content version agnostic identifier. This means that, when you are dealing with talent nodes, you will need to first ensure that you have the latest version of content.</summary>
        [Newtonsoft.Json.JsonProperty("stepIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StepIndex { get; set; }

        /// <summary>The hash of this node step. Unfortunately, while it can be used to uniquely identify the step within a node, it is also content version dependent and should not be relied on without ensuring you have the latest vesion of content.</summary>
        [Newtonsoft.Json.JsonProperty("nodeStepHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeStepHash { get; set; }

        /// <summary>If you can interact with this node in some way, this is the localized description of that interaction.</summary>
        [Newtonsoft.Json.JsonProperty("interactionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InteractionDescription { get; set; }

        /// <summary>An enum representing a damage type granted by activating this step, if any.</summary>
        [Newtonsoft.Json.JsonProperty("damageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DamageType3 DamageType { get; set; }

        /// <summary>If the step provides a damage type, this will be the hash identifier used to look up the damage type's DestinyDamageTypeDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("damageTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DamageTypeHash { get; set; }

        /// <summary>If the step has requirements for activation (they almost always do, if nothing else than for the Talent Grid's Progression to have reached a certain level), they will be defined here.</summary>
        [Newtonsoft.Json.JsonProperty("activationRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActivationRequirement ActivationRequirement { get; set; }

        /// <summary>There was a time when talent nodes could be activated multiple times, and the effects of subsequent Steps would be compounded on each other, essentially "upgrading" the node. We have moved away from this, but theoretically the capability still exists.
        /// I continue to return this in case it is used in the future: if true and this step is the current step in the node, you are allowed to activate the node a second time to receive the benefits of the next step in the node, which will then become the active step.</summary>
        [Newtonsoft.Json.JsonProperty("canActivateNextStep", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanActivateNextStep { get; set; }

        /// <summary>The stepIndex of the next step in the talent node, or -1 if this is the last step or if the next step to be chosen is random.
        /// This doesn't really matter anymore unless canActivateNextStep begins to be used again.</summary>
        [Newtonsoft.Json.JsonProperty("nextStepIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NextStepIndex { get; set; }

        /// <summary>If true, the next step to be chosen is random, and if you're allowed to activate the next step. (if canActivateNextStep = true)</summary>
        [Newtonsoft.Json.JsonProperty("isNextStepRandom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNextStepRandom { get; set; }

        /// <summary>The list of hash identifiers for Perks (DestinySandboxPerkDefinition) that are applied when this step is active. Perks provide a variety of benefits and modifications - examine DestinySandboxPerkDefinition to learn more.</summary>
        [Newtonsoft.Json.JsonProperty("perkHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> PerkHashes { get; set; }

        /// <summary>When the Talent Grid's progression reaches this value, the circular "progress bar" that surrounds the talent node should be shown.
        /// This also indicates the lower bound of said progress bar, with the upper bound being the progress required to reach activationRequirement.gridLevel. (at some point I should precalculate the upper bound and put it in the definition to save people time)</summary>
        [Newtonsoft.Json.JsonProperty("startProgressionBarAtProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartProgressionBarAtProgress { get; set; }

        /// <summary>When the step provides stat benefits on the item or character, this is the list of hash identifiers for stats (DestinyStatDefinition) that are provided.</summary>
        [Newtonsoft.Json.JsonProperty("statHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> StatHashes { get; set; }

        /// <summary>If this is true, the step affects the item's Quality in some way. See DestinyInventoryItemDefinition for more information about the meaning of Quality. I already made a joke about Zen and the Art of Motorcycle Maintenance elsewhere in the documentation, so I will avoid doing it again. Oops too late</summary>
        [Newtonsoft.Json.JsonProperty("affectsQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AffectsQuality { get; set; }

        /// <summary>In Destiny 1, the Armory's Perk Filtering was driven by a concept of TalentNodeStepGroups: categorizations of talent nodes based on their functionality. While the Armory isn't a BNet-facing thing for now, and the new Armory will need to account for Sockets rather than Talent Nodes, this categorization capability feels useful enough to still keep around.</summary>
        [Newtonsoft.Json.JsonProperty("stepGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StepGroups StepGroups { get; set; }

        /// <summary>If true, this step can affect the level of the item. See DestinyInventoryItemDefintion for more information about item levels and their effect on stats.</summary>
        [Newtonsoft.Json.JsonProperty("affectsLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AffectsLevel { get; set; }

        /// <summary>If this step is activated, this will be a list of information used to replace socket items with new Plugs. See DestinyInventoryItemDefinition for more information about sockets and plugs.</summary>
        [Newtonsoft.Json.JsonProperty("socketReplacements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyNodeSocketReplaceResponse> SocketReplacements { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyNodeStepDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyNodeStepDefinition>(data);
        }

    }

    /// <summary>This is a bit of an odd duck. Apparently, if talent nodes steps have this data, the game will go through on step activation and alter the first Socket it finds on the item that has a type matching the given socket type, inserting the indicated plug item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyNodeSocketReplaceResponse
    {
        /// <summary>The hash identifier of the socket type to find amidst the item's sockets (the item to which this talent grid is attached). See DestinyInventoryItemDefinition.sockets.socketEntries to find the socket type of sockets on the item in question.</summary>
        [Newtonsoft.Json.JsonProperty("socketTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SocketTypeHash { get; set; }

        /// <summary>The hash identifier of the plug item that will be inserted into the socket found.</summary>
        [Newtonsoft.Json.JsonProperty("plugItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyNodeSocketReplaceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyNodeSocketReplaceResponse>(data);
        }

    }

    /// <summary>All damage types that are possible in the game are defined here, along with localized info and icons as needed.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyDamageTypeDefinition
    {
        /// <summary>The description of the damage type, icon etc...</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties11 DisplayProperties { get; set; }

        /// <summary>A variant of the icon that is transparent and colorless.</summary>
        [Newtonsoft.Json.JsonProperty("transparentIconPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransparentIconPath { get; set; }

        /// <summary>If TRUE, the game shows this damage type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.</summary>
        [Newtonsoft.Json.JsonProperty("showIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowIcon { get; set; }

        /// <summary>We have an enumeration for damage types for quick reference. This is the current definition's damage type enum value.</summary>
        [Newtonsoft.Json.JsonProperty("enumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnumValue EnumValue { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyDamageTypeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyDamageTypeDefinition>(data);
        }

    }

    /// <summary>These are definitions for in-game "Lore," meant to be narrative enhancements of the game experience.
    /// DestinyInventoryItemDefinitions for interesting items point to these definitions, but nothing's stopping you from scraping all of these and doing something cool with them. If they end up having cool data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLoreDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        [Newtonsoft.Json.JsonProperty("subtitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subtitle { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLoreDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLoreDefinition>(data);
        }

    }

    /// <summary>The list of indexes into the Talent Grid's "nodes" property for nodes in this exclusive set. (See DestinyTalentNodeDefinition.nodeIndex)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyTalentNodeExclusiveSetDefinition
    {
        /// <summary>The list of node indexes for the exclusive set. Historically, these were indexes. I would have liked to replace this with nodeHashes for consistency, but it's way too late for that. (9:09 PM, he's right!)</summary>
        [Newtonsoft.Json.JsonProperty("nodeIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> NodeIndexes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyTalentNodeExclusiveSetDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyTalentNodeExclusiveSetDefinition>(data);
        }

    }

    /// <summary>As of Destiny 2, nodes can exist as part of "Exclusive Groups". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause "opposing" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyTalentExclusiveGroup
    {
        /// <summary>The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.</summary>
        [Newtonsoft.Json.JsonProperty("groupHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupHash { get; set; }

        /// <summary>If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("loreHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoreHash { get; set; }

        /// <summary>A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)</summary>
        [Newtonsoft.Json.JsonProperty("nodeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> NodeHashes { get; set; }

        /// <summary>A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.</summary>
        [Newtonsoft.Json.JsonProperty("opposingGroupHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> OpposingGroupHashes { get; set; }

        /// <summary>A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)</summary>
        [Newtonsoft.Json.JsonProperty("opposingNodeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> OpposingNodeHashes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyTalentExclusiveGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyTalentExclusiveGroup>(data);
        }

    }

    /// <summary>An artificial construct provided by Bungie.Net, where we attempt to group talent nodes by functionality.
    /// This is a single set of references to Talent Nodes that share a common trait or purpose.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyTalentNodeCategory
    {
        /// <summary>Mostly just for debug purposes, but if you find it useful you can have it. This is BNet's manually created identifier for this category.</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>If true, we found the localized content in a related DestinyLoreDefinition instead of local BNet localization files. This is mostly for ease of my own future investigations.</summary>
        [Newtonsoft.Json.JsonProperty("isLoreDriven", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLoreDriven { get; set; }

        /// <summary>Will contain at least the "name", which will be the title of the category. We will likely not have description and an icon yet, but I'm going to keep my options open.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties12 DisplayProperties { get; set; }

        /// <summary>The set of all hash identifiers for Talent Nodes (DestinyTalentNodeDefinition) in this Talent Grid that are part of this Category.</summary>
        [Newtonsoft.Json.JsonProperty("nodeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> NodeHashes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyTalentNodeCategory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyTalentNodeCategory>(data);
        }

    }

    /// <summary>An intrinsic perk on an item, and the requirements for it to be activated.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemPerkEntryDefinition
    {
        /// <summary>If this perk is not active, this is the string to show for why it's not providing its benefits.</summary>
        [Newtonsoft.Json.JsonProperty("requirementDisplayString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequirementDisplayString { get; set; }

        /// <summary>A hash identifier for the DestinySandboxPerkDefinition being provided on the item.</summary>
        [Newtonsoft.Json.JsonProperty("perkHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PerkHash { get; set; }

        /// <summary>Indicates whether this perk should be shown, or if it should be shown disabled.</summary>
        [Newtonsoft.Json.JsonProperty("perkVisibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerkVisibility PerkVisibility { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemPerkEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemPerkEntryDefinition>(data);
        }

    }

    /// <summary>Indicates how a perk should be shown, or if it should be, in the game UI. Maybe useful for those of you trying to filter out internal-use-only perks (or for those of you trying to figure out what they do!)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemPerkVisibility
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyAnimationReference
    {
        [Newtonsoft.Json.JsonProperty("animName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnimName { get; set; }

        [Newtonsoft.Json.JsonProperty("animIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnimIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyAnimationReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyAnimationReference>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HyperlinkReference
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static HyperlinkReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HyperlinkReference>(data);
        }

    }

    /// <summary>As you run into items that need to be classified for Milestone purposes in ways that we cannot infer via direct data, add a new classification here and use a string constant to represent it in the local item config file.
    /// NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpecialItemType
    {
        _0 = 0,

        _1 = 1,

        _8 = 8,

        _9 = 9,

        _23 = 23,

        _24 = 24,

        _25 = 25,

        _27 = 27,

        _29 = 29,

    }

    /// <summary>An enumeration that indicates the high-level "type" of the item, attempting to iron out the context specific differences for specific instances of an entity. For instance, though a weapon may be of various weapon "Types", in DestinyItemType they are all classified as "Weapon". This allows for better filtering on a higher level of abstraction for the concept of types.
    ///  This enum is provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a "best guess" fit.
    ///  NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
    ///  I keep updating these because they're so damn convenient. I guess I shouldn't fight it.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyItemType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _23 = 23,

        _24 = 24,

        _25 = 25,

        _26 = 26,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyClass
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>Defines a</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCollectibleDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>Indicates whether this Collectible's state is determined on a per-character or on an account-wide basis.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope5 Scope { get; set; }

        /// <summary>A human readable string for a hint about how to acquire the item.</summary>
        [Newtonsoft.Json.JsonProperty("sourceString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceString { get; set; }

        /// <summary>This is a hash identifier we are building on the BNet side in an attempt to let people group collectibles by similar sources.
        /// I can't promise that it's going to be 100% accurate, but if the designers were consistent in assigning the same source strings to items with the same sources, it *ought to* be. No promises though.
        /// This hash also doesn't relate to an actual definition, just to note: we've got nothing useful other than the source string for this data.</summary>
        [Newtonsoft.Json.JsonProperty("sourceHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SourceHash { get; set; }

        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        [Newtonsoft.Json.JsonProperty("acquisitionInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCollectibleAcquisitionBlock AcquisitionInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("stateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCollectibleStateBlock StateInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("presentationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationChildBlock PresentationInfo { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCollectibleDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCollectibleDefinition>(data);
        }

    }

    /// <summary>There's a lot of places where we need to know scope on more than just a profile or character level. For everything else, there's this more generic sense of scope.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyScope
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCollectibleAcquisitionBlock
    {
        [Newtonsoft.Json.JsonProperty("acquireMaterialRequirementHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AcquireMaterialRequirementHash { get; set; }

        [Newtonsoft.Json.JsonProperty("acquireTimestampUnlockValueHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AcquireTimestampUnlockValueHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCollectibleAcquisitionBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCollectibleAcquisitionBlock>(data);
        }

    }

    /// <summary>An Unlock Value is an internal integer value, stored on the server and used in a variety of ways, most frequently for the gating/requirement checks that the game performs across all of its main features. They can also be used as the storage data for mapped Progressions, Objectives, and other features that require storage of variable numeric values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyUnlockValueDefinition
    {
        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyUnlockValueDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyUnlockValueDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCollectibleStateBlock
    {
        [Newtonsoft.Json.JsonProperty("obscuredOverrideItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObscuredOverrideItemHash { get; set; }

        [Newtonsoft.Json.JsonProperty("requirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationNodeRequirementsBlock Requirements { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCollectibleStateBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCollectibleStateBlock>(data);
        }

    }

    /// <summary>Presentation nodes can be restricted by various requirements. This defines the rules of those requirements, and the message(s) to be shown if these requirements aren't met.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationNodeRequirementsBlock
    {
        /// <summary>If this node is not accessible due to Entitlements (for instance, you don't own the required game expansion), this is the message to show.</summary>
        [Newtonsoft.Json.JsonProperty("entitlementUnavailableMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntitlementUnavailableMessage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationNodeRequirementsBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationNodeRequirementsBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationChildBlock
    {
        [Newtonsoft.Json.JsonProperty("presentationNodeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationNodeType? PresentationNodeType { get; set; }

        [Newtonsoft.Json.JsonProperty("parentPresentationNodeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ParentPresentationNodeHashes { get; set; }

        [Newtonsoft.Json.JsonProperty("displayStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationDisplayStyle? DisplayStyle { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationChildBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationChildBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyPresentationNodeType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>A hint for how the presentation node should be displayed when shown in a list. How you use this is your UI is up to you.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyPresentationDisplayStyle
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>A PresentationNode is an entity that represents a logical grouping of other entities visually/organizationally.
    /// For now, Presentation Nodes may contain the following... but it may be used for more in the future:
    /// - Collectibles - Records (Or, as the public will call them, "Triumphs." Don't ask me why we're overloading the term "Triumph", it still hurts me to think about it) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created
    /// Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the "bare metal" presentation node concept has resulted in me deciding against that for the time being.
    /// We'll see if I come to regret this as well.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationNodeDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The original icon for this presentation node, before we futzed with it.</summary>
        [Newtonsoft.Json.JsonProperty("originalIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalIcon { get; set; }

        /// <summary>Some presentation nodes are meant to be explicitly shown on the "root" or "entry" screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar "entry point" view in your UI. If you don't have a UI, then I guess it doesn't matter either way does it?</summary>
        [Newtonsoft.Json.JsonProperty("rootViewIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootViewIcon { get; set; }

        [Newtonsoft.Json.JsonProperty("nodeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationNodeType? NodeType { get; set; }

        /// <summary>Indicates whether this presentation node's state is determined on a per-character or on an account-wide basis.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope6 Scope { get; set; }

        /// <summary>If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectiveHash { get; set; }

        /// <summary>If this presentation node has an associated "Record" that you can accomplish for completing its children, this is the identifier of that Record.</summary>
        [Newtonsoft.Json.JsonProperty("completionRecordHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompletionRecordHash { get; set; }

        /// <summary>The child entities contained by this presentation node.</summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Children Children { get; set; }

        /// <summary>A hint for how to display this presentation node when it's shown in a list.</summary>
        [Newtonsoft.Json.JsonProperty("displayStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayStyle DisplayStyle { get; set; }

        /// <summary>A hint for how to display this presentation node when it's shown in its own detail screen.</summary>
        [Newtonsoft.Json.JsonProperty("screenStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenStyle ScreenStyle { get; set; }

        /// <summary>The requirements for being able to interact with this presentation node and its children.</summary>
        [Newtonsoft.Json.JsonProperty("requirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Requirements Requirements { get; set; }

        /// <summary>If this presentation node has children, but the game doesn't let you inspect the details of those children, that is indicated here.</summary>
        [Newtonsoft.Json.JsonProperty("disableChildSubscreenNavigation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableChildSubscreenNavigation { get; set; }

        /// <summary>A quick reference to presentation nodes that have this node as a child. (presentation nodes can be parented under multiple parents)</summary>
        [Newtonsoft.Json.JsonProperty("parentNodeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ParentNodeHashes { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationNodeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationNodeDefinition>(data);
        }

    }

    /// <summary>As/if presentation nodes begin to host more entities as children, these lists will be added to. One list property exists per type of entity that can be treated as a child of this presentation node, and each holds the identifier of the entity and any associated information needed to display the UI for that entity (if anything)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationNodeChildrenBlock
    {
        [Newtonsoft.Json.JsonProperty("presentationNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPresentationNodeChildEntry> PresentationNodes { get; set; }

        [Newtonsoft.Json.JsonProperty("collectibles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPresentationNodeCollectibleChildEntry> Collectibles { get; set; }

        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPresentationNodeRecordChildEntry> Records { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationNodeChildrenBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationNodeChildrenBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationNodeChildEntry
    {
        [Newtonsoft.Json.JsonProperty("presentationNodeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PresentationNodeHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationNodeChildEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationNodeChildEntry>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationNodeCollectibleChildEntry
    {
        [Newtonsoft.Json.JsonProperty("collectibleHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CollectibleHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationNodeCollectibleChildEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationNodeCollectibleChildEntry>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationNodeRecordChildEntry
    {
        [Newtonsoft.Json.JsonProperty("recordHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecordHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationNodeRecordChildEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationNodeRecordChildEntry>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyRecordDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>Indicates whether this Record's state is determined on a per-character or on an account-wide basis.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope7 Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("presentationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationChildBlock PresentationInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("loreHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoreHash { get; set; }

        [Newtonsoft.Json.JsonProperty("objectiveHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ObjectiveHashes { get; set; }

        [Newtonsoft.Json.JsonProperty("recordValueStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyRecordValueStyle? RecordValueStyle { get; set; }

        [Newtonsoft.Json.JsonProperty("titleInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyRecordTitleBlock TitleInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("completionInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyRecordCompletionBlock CompletionInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("stateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaRecordStateBlock StateInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("requirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationNodeRequirementsBlock Requirements { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyRecordDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyRecordDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyRecordValueStyle
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyRecordTitleBlock
    {
        [Newtonsoft.Json.JsonProperty("hasTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("titlesByGender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> TitlesByGender { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyRecordTitleBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyRecordTitleBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyGender
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyRecordCompletionBlock
    {
        [Newtonsoft.Json.JsonProperty("partialCompletionObjectiveCountThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PartialCompletionObjectiveCountThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("ScoreValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScoreValue { get; set; }

        [Newtonsoft.Json.JsonProperty("shouldFireToast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShouldFireToast { get; set; }

        [Newtonsoft.Json.JsonProperty("toastStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyRecordToastStyle? ToastStyle { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyRecordCompletionBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyRecordCompletionBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyRecordToastStyle
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaRecordStateBlock
    {
        [Newtonsoft.Json.JsonProperty("featuredPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeaturedPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("obscuredString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObscuredString { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SchemaRecordStateBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaRecordStateBlock>(data);
        }

    }

    /// <summary>A hint for what screen should be shown when this presentation node is clicked into. How you use this is your UI is up to you.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyPresentationScreenStyle
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>In an attempt to categorize items by type, usage, and other interesting properties, we created DestinyItemCategoryDefinition: information about types that is assembled using a set of heuristics that examine the properties of an item such as what inventory bucket it's in, its item type name, and whether it has or is missing certain blocks of data.
    /// This heuristic is imperfect, however. If you find an item miscategorized, let us know on the Bungie API forums!
    /// We then populate all of the categories that we think an item belongs to in its DestinyInventoryItemDefinition.itemCategoryHashes property. You can use that to provide your own custom item filtering, sorting, aggregating... go nuts on it! And let us know if you see more categories that you wish would be added!</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemCategoryDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>If True, this category should be visible in UI. Sometimes we make categories that we don't think are interesting externally. It's up to you if you want to skip on showing them.</summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>If True, this category has been deprecated: it may have no items left, or there may be only legacy items that remain in it which are no longer relevant to the game.</summary>
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecated { get; set; }

        /// <summary>A shortened version of the title. The reason why we have this is because the Armory in German had titles that were too long to display in our UI, so these were localized abbreviated versions of those categories. The property still exists today, even though the Armory doesn't exist for D2... yet.</summary>
        [Newtonsoft.Json.JsonProperty("shortTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortTitle { get; set; }

        /// <summary>The janky regular expression we used against the item type to try and discern whether the item belongs to this category.</summary>
        [Newtonsoft.Json.JsonProperty("itemTypeRegex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemTypeRegex { get; set; }

        /// <summary>If the item is a plug, this is the identifier we expect to find associated with it if it is in this category.</summary>
        [Newtonsoft.Json.JsonProperty("plugCategoryIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlugCategoryIdentifier { get; set; }

        /// <summary>If the item type matches this janky regex, it does *not* belong to this category.</summary>
        [Newtonsoft.Json.JsonProperty("itemTypeRegexNot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemTypeRegexNot { get; set; }

        /// <summary>If the item belongs to this bucket, it does belong to this category.</summary>
        [Newtonsoft.Json.JsonProperty("originBucketIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginBucketIdentifier { get; set; }

        /// <summary>If an item belongs to this category, it will also receive this item type. This is now how DestinyItemType is populated for items: it used to be an even jankier process, but that's a story that requires more alcohol.</summary>
        [Newtonsoft.Json.JsonProperty("grantDestinyItemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GrantDestinyItemType GrantDestinyItemType { get; set; }

        /// <summary>If an item belongs to this category, it will also receive this subtype enum value.
        /// I know what you're thinking - what if it belongs to multiple categories that provide sub-types?
        /// The last one processed wins, as is the case with all of these "grant" enums. Now you can see one reason why we moved away from these enums... but they're so convenient when they work, aren't they?</summary>
        [Newtonsoft.Json.JsonProperty("grantDestinySubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GrantDestinySubType GrantDestinySubType { get; set; }

        /// <summary>If an item belongs to this category, it will also get this class restriction enum value.
        /// See the other "grant"-prefixed properties on this definition for my color commentary.</summary>
        [Newtonsoft.Json.JsonProperty("grantDestinyClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GrantDestinyClass GrantDestinyClass { get; set; }

        /// <summary>If this category is a "parent" category of other categories, those children will have their hashes listed in rendering order here, and can be looked up using these hashes against DestinyItemCategoryDefinition.
        /// In this way, you can build up a visual hierarchy of item categories. That's what we did, and you can do it too. I believe in you. Yes, you, Carl.
        /// (I hope someone named Carl reads this someday)</summary>
        [Newtonsoft.Json.JsonProperty("groupedCategoryHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> GroupedCategoryHashes { get; set; }

        /// <summary>All item category hashes of "parent" categories: categories that contain this as a child through the hierarchy of groupedCategoryHashes. It's a bit redundant, but having this child-centric list speeds up some calculations.</summary>
        [Newtonsoft.Json.JsonProperty("parentCategoryHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ParentCategoryHashes { get; set; }

        /// <summary>If true, this category is only used for grouping, and should not be evaluated with its own checks. Rather, the item only has this category if it has one of its child categories.</summary>
        [Newtonsoft.Json.JsonProperty("groupCategoryOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupCategoryOnly { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemCategoryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemCategoryDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupUserBase
    {
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard DestinyUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("bungieNetUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard BungieNetUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("joinDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? JoinDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupUserBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupUserBase>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupMember
    {
        [Newtonsoft.Json.JsonProperty("memberType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RuntimeGroupMemberType? MemberType { get; set; }

        [Newtonsoft.Json.JsonProperty("isOnline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOnline { get; set; }

        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard DestinyUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("bungieNetUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard BungieNetUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("joinDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? JoinDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupMember FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupMember>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupAllianceStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupPotentialMember
    {
        [Newtonsoft.Json.JsonProperty("potentialStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupPotentialMemberStatus? PotentialStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard DestinyUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("bungieNetUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard BungieNetUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("joinDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? JoinDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupPotentialMember FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupPotentialMember>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupPotentialMemberStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TagResponse
    {
        [Newtonsoft.Json.JsonProperty("tagText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TagText { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IgnoreResponse IgnoreStatus { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TagResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TagResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PollResponse
    {
        [Newtonsoft.Json.JsonProperty("topicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TopicId { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PollResult> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalVotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalVotes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PollResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PollResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PollResult
    {
        [Newtonsoft.Json.JsonProperty("answerText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnswerText { get; set; }

        [Newtonsoft.Json.JsonProperty("answerSlot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AnswerSlot { get; set; }

        [Newtonsoft.Json.JsonProperty("lastVoteDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastVoteDate { get; set; }

        [Newtonsoft.Json.JsonProperty("votes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Votes { get; set; }

        [Newtonsoft.Json.JsonProperty("requestingUserVoted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequestingUserVoted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PollResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PollResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ForumRecruitmentDetail
    {
        [Newtonsoft.Json.JsonProperty("topicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TopicId { get; set; }

        [Newtonsoft.Json.JsonProperty("microphoneRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicrophoneRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("intensity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForumRecruitmentIntensityLabel? Intensity { get; set; }

        [Newtonsoft.Json.JsonProperty("tone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForumRecruitmentToneLabel? Tone { get; set; }

        [Newtonsoft.Json.JsonProperty("approved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Approved { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ConversationId { get; set; }

        [Newtonsoft.Json.JsonProperty("playerSlotsTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerSlotsTotal { get; set; }

        [Newtonsoft.Json.JsonProperty("playerSlotsRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerSlotsRemaining { get; set; }

        [Newtonsoft.Json.JsonProperty("Fireteam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GeneralUser> Fireteam { get; set; }

        [Newtonsoft.Json.JsonProperty("kickedPlayerIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<long> KickedPlayerIds { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ForumRecruitmentDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForumRecruitmentDetail>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumRecruitmentIntensityLabel
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumRecruitmentToneLabel
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ForumPostSortEnum
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SaveMessageResult
    {
        [Newtonsoft.Json.JsonProperty("conversationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ConversationId { get; set; }

        [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MessageId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SaveMessageResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SaveMessageResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupTheme
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("folder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Folder { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupTheme FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupTheme>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupDateRange
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>A small infocard of group information, usually used for when a list of groups are returned</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupV2Card
    {
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("groupType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupType? GroupType { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("about", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string About { get; set; }

        [Newtonsoft.Json.JsonProperty("motto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Motto { get; set; }

        [Newtonsoft.Json.JsonProperty("memberCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemberCount { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipOption? MembershipOption { get; set; }

        [Newtonsoft.Json.JsonProperty("capabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Capabilities? Capabilities { get; set; }

        [Newtonsoft.Json.JsonProperty("clanInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupV2ClanInfo ClanInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("avatarPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvatarPath { get; set; }

        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Theme { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupV2Card FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupV2Card>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfGroupV2Card
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupV2Card> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfGroupV2Card FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfGroupV2Card>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupSearchResponse
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupV2Card> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupSearchResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupSearchResponse>(data);
        }

    }

    /// <summary>NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible "modes".
    /// If you are querying for a group, you can pass any of the properties below.
    /// If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):
    /// - groupMemberCountFilter - localeFilter - tagText
    /// If you pass these, you will get a useless InvalidParameters error.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupQuery
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("groupType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupType? GroupType { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupDateRange? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("sortBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupSortBy? SortBy { get; set; }

        [Newtonsoft.Json.JsonProperty("groupMemberCountFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupQueryGroupMemberCountFilter? GroupMemberCountFilter { get; set; }

        [Newtonsoft.Json.JsonProperty("localeFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocaleFilter { get; set; }

        [Newtonsoft.Json.JsonProperty("tagText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TagText { get; set; }

        [Newtonsoft.Json.JsonProperty("itemsPerPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemsPerPage { get; set; }

        [Newtonsoft.Json.JsonProperty("currentPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("requestContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestContinuationToken { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupQuery FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupQuery>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupSortBy
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupMemberCountFilter
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupOptionalConversation
    {
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ConversationId { get; set; }

        [Newtonsoft.Json.JsonProperty("chatEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChatEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("chatName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChatName { get; set; }

        [Newtonsoft.Json.JsonProperty("chatSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChatSecuritySetting? ChatSecurity { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupOptionalConversation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupOptionalConversation>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupCreationResponse
    {
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupCreationResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupCreationResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupAction
    {
        /// <summary>Type of group, either Bungie.net hosted group, or a game services hosted clan.</summary>
        [Newtonsoft.Json.JsonProperty("groupType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupType6 GroupType { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("about", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string About { get; set; }

        [Newtonsoft.Json.JsonProperty("motto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Motto { get; set; }

        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Theme { get; set; }

        [Newtonsoft.Json.JsonProperty("avatarImageIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvatarImageIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("isPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublic { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipOption? MembershipOption { get; set; }

        [Newtonsoft.Json.JsonProperty("isPublicTopicAdminOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublicTopicAdminOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefaultPostPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefaultPostPublic { get; set; }

        [Newtonsoft.Json.JsonProperty("allowChat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowChat { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefaultPostAlliance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefaultPostAlliance { get; set; }

        [Newtonsoft.Json.JsonProperty("chatSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChatSecuritySetting? ChatSecurity { get; set; }

        [Newtonsoft.Json.JsonProperty("callsign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Callsign { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupHomepage? Homepage { get; set; }

        /// <summary>When operation needs a platform specific account ID for the present user, use this property. In particular, groupType of Clan requires this value to be set.</summary>
        [Newtonsoft.Json.JsonProperty("platformMembershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformMembershipType PlatformMembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupAction>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupEditAction
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("about", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string About { get; set; }

        [Newtonsoft.Json.JsonProperty("motto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Motto { get; set; }

        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Theme { get; set; }

        [Newtonsoft.Json.JsonProperty("avatarImageIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvatarImageIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("isPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublic { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupEditActionMembershipOption? MembershipOption { get; set; }

        [Newtonsoft.Json.JsonProperty("isPublicTopicAdminOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublicTopicAdminOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("allowChat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowChat { get; set; }

        [Newtonsoft.Json.JsonProperty("chatSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupEditActionChatSecurity? ChatSecurity { get; set; }

        [Newtonsoft.Json.JsonProperty("callsign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Callsign { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupEditActionHomepage? Homepage { get; set; }

        [Newtonsoft.Json.JsonProperty("enableInvitationMessagingForAdmins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableInvitationMessagingForAdmins { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultPublicity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupEditActionDefaultPublicity? DefaultPublicity { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupEditAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupEditAction>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupOptionsEditAction
    {
        /// <summary>Minimum Member Level allowed to invite new members to group
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.</summary>
        [Newtonsoft.Json.JsonProperty("InvitePermissionOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InvitePermissionOverride { get; set; }

        /// <summary>Minimum Member Level allowed to update group culture
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.</summary>
        [Newtonsoft.Json.JsonProperty("UpdateCulturePermissionOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateCulturePermissionOverride { get; set; }

        /// <summary>Minimum Member Level allowed to host guided games
        /// Always Allowed: Founder, Acting Founder, Admin
        /// Allowed Overrides: None, Member, Beginner
        /// Default is Member for clans, None for groups, although this means nothing for groups.</summary>
        [Newtonsoft.Json.JsonProperty("HostGuidedGamePermissionOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupOptionsEditActionHostGuidedGamePermissionOverride? HostGuidedGamePermissionOverride { get; set; }

        /// <summary>Minimum Member Level allowed to update banner
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.</summary>
        [Newtonsoft.Json.JsonProperty("UpdateBannerPermissionOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateBannerPermissionOverride { get; set; }

        /// <summary>Level to join a member at when accepting an invite, application, or joining an open clan
        /// Default is Beginner.</summary>
        [Newtonsoft.Json.JsonProperty("JoinLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupOptionsEditActionJoinLevel? JoinLevel { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupOptionsEditAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupOptionsEditAction>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupOptionalConversationAddRequest
    {
        [Newtonsoft.Json.JsonProperty("chatName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChatName { get; set; }

        [Newtonsoft.Json.JsonProperty("chatSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChatSecuritySetting? ChatSecurity { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupOptionalConversationAddRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupOptionalConversationAddRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupOptionalConversationEditRequest
    {
        [Newtonsoft.Json.JsonProperty("chatEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChatEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("chatName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChatName { get; set; }

        [Newtonsoft.Json.JsonProperty("chatSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupOptionalConversationEditRequestChatSecurity? ChatSecurity { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupOptionalConversationEditRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupOptionalConversationEditRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfGroupMember
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupMember> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfGroupMember FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfGroupMember>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupMemberLeaveResult
    {
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupV2 Group { get; set; }

        [Newtonsoft.Json.JsonProperty("groupDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupDeleted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupMemberLeaveResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupMemberLeaveResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupBanRequest
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IgnoreLength? Length { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupBanRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupBanRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum IgnoreLength
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupBan
    {
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard LastModifiedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard CreatedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("dateBanned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateBanned { get; set; }

        [Newtonsoft.Json.JsonProperty("dateExpires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateExpires { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("bungieNetUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard BungieNetUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard DestinyUserInfo { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupBan FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupBan>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfGroupBan
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupBan> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfGroupBan FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfGroupBan>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupApplicationResponse
    {
        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupApplicationResolveState? Resolution { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupApplicationResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupApplicationResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupApplicationResolveState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupApplicationRequest
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupApplicationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupApplicationRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupMemberApplication
    {
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("resolveState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupApplicationResolveState? ResolveState { get; set; }

        [Newtonsoft.Json.JsonProperty("resolveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ResolveDate { get; set; }

        [Newtonsoft.Json.JsonProperty("resolvedByMembershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ResolvedByMembershipId { get; set; }

        [Newtonsoft.Json.JsonProperty("requestMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("resolveMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResolveMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard DestinyUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("bungieNetUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard BungieNetUserInfo { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupMemberApplication FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupMemberApplication>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfGroupMemberApplication
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupMemberApplication> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfGroupMemberApplication FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfGroupMemberApplication>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EntityActionResult
    {
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static EntityActionResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EntityActionResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlatformErrorCodes
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _23 = 23,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _33 = 33,

        _34 = 34,

        _35 = 35,

        _36 = 36,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _89 = 89,

        _90 = 90,

        _91 = 91,

        _92 = 92,

        _93 = 93,

        _94 = 94,

        _95 = 95,

        _96 = 96,

        _97 = 97,

        _98 = 98,

        _99 = 99,

        _100 = 100,

        _101 = 101,

        _102 = 102,

        _103 = 103,

        _104 = 104,

        _105 = 105,

        _106 = 106,

        _107 = 107,

        _108 = 108,

        _109 = 109,

        _110 = 110,

        _111 = 111,

        _112 = 112,

        _113 = 113,

        _115 = 115,

        _116 = 116,

        _117 = 117,

        _118 = 118,

        _119 = 119,

        _120 = 120,

        _121 = 121,

        _122 = 122,

        _123 = 123,

        _124 = 124,

        _125 = 125,

        _126 = 126,

        _127 = 127,

        _128 = 128,

        _129 = 129,

        _130 = 130,

        _131 = 131,

        _132 = 132,

        _133 = 133,

        _134 = 134,

        _135 = 135,

        _136 = 136,

        _137 = 137,

        _138 = 138,

        _139 = 139,

        _140 = 140,

        _141 = 141,

        _142 = 142,

        _143 = 143,

        _144 = 144,

        _145 = 145,

        _146 = 146,

        _147 = 147,

        _148 = 148,

        _149 = 149,

        _150 = 150,

        _151 = 151,

        _152 = 152,

        _153 = 153,

        _154 = 154,

        _155 = 155,

        _156 = 156,

        _157 = 157,

        _158 = 158,

        _159 = 159,

        _160 = 160,

        _161 = 161,

        _162 = 162,

        _163 = 163,

        _164 = 164,

        _165 = 165,

        _166 = 166,

        _167 = 167,

        _168 = 168,

        _169 = 169,

        _170 = 170,

        _171 = 171,

        _172 = 172,

        _173 = 173,

        _174 = 174,

        _175 = 175,

        _200 = 200,

        _201 = 201,

        _202 = 202,

        _203 = 203,

        _204 = 204,

        _205 = 205,

        _206 = 206,

        _207 = 207,

        _208 = 208,

        _209 = 209,

        _210 = 210,

        _211 = 211,

        _212 = 212,

        _213 = 213,

        _214 = 214,

        _215 = 215,

        _216 = 216,

        _217 = 217,

        _218 = 218,

        _219 = 219,

        _220 = 220,

        _221 = 221,

        _222 = 222,

        _223 = 223,

        _224 = 224,

        _225 = 225,

        _226 = 226,

        _227 = 227,

        _300 = 300,

        _301 = 301,

        _302 = 302,

        _303 = 303,

        _304 = 304,

        _305 = 305,

        _306 = 306,

        _307 = 307,

        _308 = 308,

        _309 = 309,

        _310 = 310,

        _311 = 311,

        _312 = 312,

        _313 = 313,

        _400 = 400,

        _500 = 500,

        _501 = 501,

        _502 = 502,

        _503 = 503,

        _504 = 504,

        _505 = 505,

        _506 = 506,

        _507 = 507,

        _508 = 508,

        _509 = 509,

        _510 = 510,

        _511 = 511,

        _512 = 512,

        _513 = 513,

        _514 = 514,

        _515 = 515,

        _516 = 516,

        _517 = 517,

        _518 = 518,

        _519 = 519,

        _520 = 520,

        _521 = 521,

        _522 = 522,

        _523 = 523,

        _524 = 524,

        _525 = 525,

        _526 = 526,

        _527 = 527,

        _528 = 528,

        _529 = 529,

        _530 = 530,

        _531 = 531,

        _532 = 532,

        _533 = 533,

        _534 = 534,

        _535 = 535,

        _536 = 536,

        _537 = 537,

        _538 = 538,

        _539 = 539,

        _540 = 540,

        _541 = 541,

        _542 = 542,

        _543 = 543,

        _544 = 544,

        _555 = 555,

        _556 = 556,

        _557 = 557,

        _558 = 558,

        _559 = 559,

        _560 = 560,

        _561 = 561,

        _562 = 562,

        _563 = 563,

        _564 = 564,

        _565 = 565,

        _566 = 566,

        _567 = 567,

        _568 = 568,

        _569 = 569,

        _570 = 570,

        _571 = 571,

        _572 = 572,

        _573 = 573,

        _574 = 574,

        _575 = 575,

        _576 = 576,

        _577 = 577,

        _578 = 578,

        _579 = 579,

        _580 = 580,

        _581 = 581,

        _582 = 582,

        _583 = 583,

        _584 = 584,

        _585 = 585,

        _586 = 586,

        _587 = 587,

        _588 = 588,

        _589 = 589,

        _590 = 590,

        _591 = 591,

        _592 = 592,

        _593 = 593,

        _594 = 594,

        _595 = 595,

        _601 = 601,

        _602 = 602,

        _603 = 603,

        _604 = 604,

        _605 = 605,

        _606 = 606,

        _607 = 607,

        _608 = 608,

        _609 = 609,

        _610 = 610,

        _611 = 611,

        _612 = 612,

        _613 = 613,

        _614 = 614,

        _615 = 615,

        _616 = 616,

        _617 = 617,

        _618 = 618,

        _619 = 619,

        _620 = 620,

        _621 = 621,

        _622 = 622,

        _623 = 623,

        _624 = 624,

        _625 = 625,

        _626 = 626,

        _627 = 627,

        _628 = 628,

        _629 = 629,

        _630 = 630,

        _631 = 631,

        _632 = 632,

        _633 = 633,

        _634 = 634,

        _635 = 635,

        _636 = 636,

        _637 = 637,

        _638 = 638,

        _639 = 639,

        _641 = 641,

        _642 = 642,

        _643 = 643,

        _644 = 644,

        _646 = 646,

        _647 = 647,

        _648 = 648,

        _649 = 649,

        _650 = 650,

        _651 = 651,

        _652 = 652,

        _653 = 653,

        _654 = 654,

        _655 = 655,

        _656 = 656,

        _657 = 657,

        _658 = 658,

        _659 = 659,

        _660 = 660,

        _661 = 661,

        _662 = 662,

        _663 = 663,

        _664 = 664,

        _665 = 665,

        _666 = 666,

        _667 = 667,

        _668 = 668,

        _669 = 669,

        _670 = 670,

        _671 = 671,

        _672 = 672,

        _673 = 673,

        _674 = 674,

        _675 = 675,

        _676 = 676,

        _677 = 677,

        _678 = 678,

        _679 = 679,

        _680 = 680,

        _681 = 681,

        _682 = 682,

        _683 = 683,

        _684 = 684,

        _685 = 685,

        _686 = 686,

        _687 = 687,

        _688 = 688,

        _689 = 689,

        _690 = 690,

        _691 = 691,

        _692 = 692,

        _693 = 693,

        _694 = 694,

        _695 = 695,

        _696 = 696,

        _697 = 697,

        _698 = 698,

        _699 = 699,

        _701 = 701,

        _702 = 702,

        _703 = 703,

        _704 = 704,

        _705 = 705,

        _706 = 706,

        _707 = 707,

        _750 = 750,

        _801 = 801,

        _802 = 802,

        _803 = 803,

        _804 = 804,

        _805 = 805,

        _806 = 806,

        _807 = 807,

        _900 = 900,

        _901 = 901,

        _902 = 902,

        _903 = 903,

        _904 = 904,

        _905 = 905,

        _906 = 906,

        _907 = 907,

        _908 = 908,

        _909 = 909,

        _1000 = 1000,

        _1001 = 1001,

        _1002 = 1002,

        _1003 = 1003,

        _1004 = 1004,

        _1005 = 1005,

        _1006 = 1006,

        _1007 = 1007,

        _1008 = 1008,

        _1009 = 1009,

        _1100 = 1100,

        _1204 = 1204,

        _1205 = 1205,

        _1218 = 1218,

        _1223 = 1223,

        _1224 = 1224,

        _1225 = 1225,

        _1226 = 1226,

        _1227 = 1227,

        _1229 = 1229,

        _1230 = 1230,

        _1231 = 1231,

        _1232 = 1232,

        _1233 = 1233,

        _1234 = 1234,

        _1235 = 1235,

        _1236 = 1236,

        _1237 = 1237,

        _1238 = 1238,

        _1239 = 1239,

        _1300 = 1300,

        _1301 = 1301,

        _1302 = 1302,

        _1303 = 1303,

        _1304 = 1304,

        _1305 = 1305,

        _1306 = 1306,

        _1307 = 1307,

        _1308 = 1308,

        _1309 = 1309,

        _1310 = 1310,

        _1311 = 1311,

        _1312 = 1312,

        _1313 = 1313,

        _1314 = 1314,

        _1315 = 1315,

        _1316 = 1316,

        _1317 = 1317,

        _1318 = 1318,

        _1400 = 1400,

        _1401 = 1401,

        _1402 = 1402,

        _1403 = 1403,

        _1404 = 1404,

        _1405 = 1405,

        _1500 = 1500,

        _1501 = 1501,

        _1502 = 1502,

        _1600 = 1600,

        _1601 = 1601,

        _1602 = 1602,

        _1603 = 1603,

        _1604 = 1604,

        _1605 = 1605,

        _1606 = 1606,

        _1607 = 1607,

        _1608 = 1608,

        _1609 = 1609,

        _1610 = 1610,

        _1611 = 1611,

        _1612 = 1612,

        _1613 = 1613,

        _1614 = 1614,

        _1615 = 1615,

        _1616 = 1616,

        _1617 = 1617,

        _1618 = 1618,

        _1619 = 1619,

        _1620 = 1620,

        _1621 = 1621,

        _1622 = 1622,

        _1623 = 1623,

        _1624 = 1624,

        _1625 = 1625,

        _1626 = 1626,

        _1627 = 1627,

        _1628 = 1628,

        _1629 = 1629,

        _1630 = 1630,

        _1631 = 1631,

        _1632 = 1632,

        _1633 = 1633,

        _1634 = 1634,

        _1635 = 1635,

        _1636 = 1636,

        _1637 = 1637,

        _1638 = 1638,

        _1639 = 1639,

        _1640 = 1640,

        _1641 = 1641,

        _1642 = 1642,

        _1643 = 1643,

        _1644 = 1644,

        _1645 = 1645,

        _1646 = 1646,

        _1647 = 1647,

        _1648 = 1648,

        _1649 = 1649,

        _1650 = 1650,

        _1651 = 1651,

        _1652 = 1652,

        _1653 = 1653,

        _1654 = 1654,

        _1655 = 1655,

        _1656 = 1656,

        _1657 = 1657,

        _1658 = 1658,

        _1659 = 1659,

        _1660 = 1660,

        _1661 = 1661,

        _1662 = 1662,

        _1663 = 1663,

        _1664 = 1664,

        _1665 = 1665,

        _1666 = 1666,

        _1667 = 1667,

        _1668 = 1668,

        _1669 = 1669,

        _1670 = 1670,

        _1671 = 1671,

        _1672 = 1672,

        _1673 = 1673,

        _1674 = 1674,

        _1675 = 1675,

        _1676 = 1676,

        _1677 = 1677,

        _1678 = 1678,

        _1679 = 1679,

        _1680 = 1680,

        _1681 = 1681,

        _1682 = 1682,

        _1800 = 1800,

        _1801 = 1801,

        _1802 = 1802,

        _1803 = 1803,

        _1804 = 1804,

        _1805 = 1805,

        _1806 = 1806,

        _1900 = 1900,

        _1901 = 1901,

        _1902 = 1902,

        _1903 = 1903,

        _1904 = 1904,

        _1905 = 1905,

        _1906 = 1906,

        _1907 = 1907,

        _1908 = 1908,

        _1910 = 1910,

        _1911 = 1911,

        _1912 = 1912,

        _1913 = 1913,

        _1914 = 1914,

        _2000 = 2000,

        _2001 = 2001,

        _2002 = 2002,

        _2003 = 2003,

        _2004 = 2004,

        _2005 = 2005,

        _2006 = 2006,

        _2007 = 2007,

        _2008 = 2008,

        _2009 = 2009,

        _2010 = 2010,

        _2011 = 2011,

        _2012 = 2012,

        _2013 = 2013,

        _2014 = 2014,

        _2015 = 2015,

        _2016 = 2016,

        _2017 = 2017,

        _2018 = 2018,

        _2019 = 2019,

        _2020 = 2020,

        _2021 = 2021,

        _2022 = 2022,

        _2023 = 2023,

        _2024 = 2024,

        _2025 = 2025,

        _2026 = 2026,

        _2027 = 2027,

        _2028 = 2028,

        _2029 = 2029,

        _2030 = 2030,

        _2031 = 2031,

        _2032 = 2032,

        _2033 = 2033,

        _2034 = 2034,

        _2035 = 2035,

        _2036 = 2036,

        _2037 = 2037,

        _2038 = 2038,

        _2039 = 2039,

        _2040 = 2040,

        _2041 = 2041,

        _2042 = 2042,

        _2043 = 2043,

        _2044 = 2044,

        _2045 = 2045,

        _2046 = 2046,

        _2047 = 2047,

        _2048 = 2048,

        _2049 = 2049,

        _2050 = 2050,

        _2100 = 2100,

        _2101 = 2101,

        _2102 = 2102,

        _2103 = 2103,

        _2104 = 2104,

        _2105 = 2105,

        _2106 = 2106,

        _2107 = 2107,

        _2108 = 2108,

        _2109 = 2109,

        _2110 = 2110,

        _2111 = 2111,

        _2112 = 2112,

        _2113 = 2113,

        _2114 = 2114,

        _2115 = 2115,

        _2200 = 2200,

        _2201 = 2201,

        _2202 = 2202,

        _2203 = 2203,

        _2204 = 2204,

        _2205 = 2205,

        _2206 = 2206,

        _2207 = 2207,

        _2300 = 2300,

        _2500 = 2500,

        _2501 = 2501,

        _2502 = 2502,

        _2600 = 2600,

        _2601 = 2601,

        _2700 = 2700,

        _2701 = 2701,

        _2702 = 2702,

        _2703 = 2703,

        _2800 = 2800,

        _2801 = 2801,

        _2802 = 2802,

        _2803 = 2803,

        _2804 = 2804,

        _2805 = 2805,

        _2806 = 2806,

        _3000 = 3000,

        _3001 = 3001,

        _3002 = 3002,

        _3003 = 3003,

        _3004 = 3004,

        _3005 = 3005,

        _3006 = 3006,

        _3007 = 3007,

        _3008 = 3008,

        _3009 = 3009,

        _3010 = 3010,

        _3011 = 3011,

        _3012 = 3012,

        _3013 = 3013,

        _3014 = 3014,

        _3015 = 3015,

        _3016 = 3016,

        _3017 = 3017,

        _3018 = 3018,

        _3019 = 3019,

        _3020 = 3020,

        _3021 = 3021,

        _3022 = 3022,

        _3023 = 3023,

        _3024 = 3024,

        _3025 = 3025,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupApplicationListRequest
    {
        [Newtonsoft.Json.JsonProperty("memberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserMembership> Memberships { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupApplicationListRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupApplicationListRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupsForMemberFilter
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupMembershipBase
    {
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupV2 Group { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupMembershipBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupMembershipBase>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupMembership
    {
        [Newtonsoft.Json.JsonProperty("member", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupMember Member { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupV2 Group { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupMembership FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupMembership>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfGroupMembership
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupMembership> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfGroupMembership FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfGroupMembership>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupMembershipSearchResponse
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupMembership> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupMembershipSearchResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupMembershipSearchResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupPotentialMembership
    {
        [Newtonsoft.Json.JsonProperty("member", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupPotentialMember Member { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupV2 Group { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupPotentialMembership FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupPotentialMembership>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfGroupPotentialMembership
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupPotentialMembership> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfGroupPotentialMembership FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfGroupPotentialMembership>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupPotentialMembershipSearchResponse
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupPotentialMembership> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupPotentialMembershipSearchResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupPotentialMembershipSearchResponse>(data);
        }

    }

    /// <summary>DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyManifest
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("mobileAssetContentPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobileAssetContentPath { get; set; }

        [Newtonsoft.Json.JsonProperty("mobileGearAssetDataBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GearAssetDataBaseDefinition> MobileGearAssetDataBases { get; set; }

        [Newtonsoft.Json.JsonProperty("mobileWorldContentPaths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MobileWorldContentPaths { get; set; }

        [Newtonsoft.Json.JsonProperty("mobileClanBannerDatabasePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobileClanBannerDatabasePath { get; set; }

        [Newtonsoft.Json.JsonProperty("mobileGearCDN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MobileGearCDN { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyManifest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyManifest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GearAssetDataBaseDefinition
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GearAssetDataBaseDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GearAssetDataBaseDefinition>(data);
        }

    }

    /// <summary>I know what you seek. You seek linked accounts. Found them, you have.
    /// This contract returns a minimal amount of data about Destiny Accounts that are linked through your Bungie.Net account. We will not return accounts in this response whose</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLinkedProfilesResponse
    {
        /// <summary>Any Destiny account for whom we could successfully pull characters will be returned here, as the Platform-level summary of user data. (no character data, no Destiny account data other than the Membership ID and Type so you can make further queries)</summary>
        [Newtonsoft.Json.JsonProperty("profiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserInfoCard> Profiles { get; set; }

        /// <summary>If the requested membership had a linked Bungie.Net membership ID, this is the basic information about that BNet account.
        /// I know, Tetron; I know this is mixing UserServices concerns with DestinyServices concerns. But it's so damn convenient! https://www.youtube.com/watch?v=X5R-bB-gKVI</summary>
        [Newtonsoft.Json.JsonProperty("bnetMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BnetMembership BnetMembership { get; set; }

        /// <summary>This is brief summary info for profiles that we believe have valid Destiny info, but who failed to return data for some other reason and thus we know that subsequent calls for their info will also fail.</summary>
        [Newtonsoft.Json.JsonProperty("profilesWithErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyErrorProfile> ProfilesWithErrors { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLinkedProfilesResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLinkedProfilesResponse>(data);
        }

    }

    /// <summary>If a Destiny Profile can't be returned, but we're pretty certain it's a valid Destiny account, this will contain as much info as we can get about the profile for your use.
    /// Assume that the most you'll get is the Error Code, the Membership Type and the Membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyErrorProfile
    {
        /// <summary>The error that we encountered. You should be able to look up localized text to show to the user for these failures.</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorCode ErrorCode { get; set; }

        /// <summary>Basic info about the account that failed. Don't expect anything other than membership ID, Membership Type, and displayName to be populated.</summary>
        [Newtonsoft.Json.JsonProperty("infoCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfoCard InfoCard { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyErrorProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyErrorProfile>(data);
        }

    }

    /// <summary>Represents the possible components that can be returned from Destiny "Get" calls such as GetProfile, GetCharacter, GetVendor etc...
    /// When making one of these requests, you will pass one or more of these components as a comma separated list in the "?components=" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass "?components=Profiles,Characters,CharacterProgressions" You may use either the numerical or string values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyComponentType
    {
        _0 = 0,

        _100 = 100,

        _101 = 101,

        _102 = 102,

        _103 = 103,

        _104 = 104,

        _200 = 200,

        _201 = 201,

        _202 = 202,

        _203 = 203,

        _204 = 204,

        _205 = 205,

        _300 = 300,

        _301 = 301,

        _302 = 302,

        _303 = 303,

        _304 = 304,

        _305 = 305,

        _306 = 306,

        _307 = 307,

        _308 = 308,

        _400 = 400,

        _401 = 401,

        _402 = 402,

        _500 = 500,

        _600 = 600,

        _700 = 700,

        _800 = 800,

        _900 = 900,

    }

    /// <summary>The response for GetDestinyProfile, with components for character and item-level data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProfileResponse
    {
        /// <summary>Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...
        /// COMPONENT TYPE: VendorReceipts</summary>
        [Newtonsoft.Json.JsonProperty("vendorReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VendorReceipts VendorReceipts { get; set; }

        /// <summary>The profile-level inventory of the Destiny Profile.
        /// COMPONENT TYPE: ProfileInventories</summary>
        [Newtonsoft.Json.JsonProperty("profileInventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileInventory ProfileInventory { get; set; }

        /// <summary>The profile-level currencies owned by the Destiny Profile.
        /// COMPONENT TYPE: ProfileCurrencies</summary>
        [Newtonsoft.Json.JsonProperty("profileCurrencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCurrencies ProfileCurrencies { get; set; }

        /// <summary>The basic information about the Destiny Profile (formerly "Account").
        /// COMPONENT TYPE: Profiles</summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Profile Profile { get; set; }

        /// <summary>Items available from Kiosks that are available Profile-wide (i.e. across all characters)
        /// This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.
        /// COMPONENT TYPE: Kiosks</summary>
        [Newtonsoft.Json.JsonProperty("profileKiosks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileKiosks ProfileKiosks { get; set; }

        /// <summary>When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are profile-scoped.
        /// This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
        /// COMPONENT TYPE: ItemSockets</summary>
        [Newtonsoft.Json.JsonProperty("profilePlugSets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfilePlugSets ProfilePlugSets { get; set; }

        /// <summary>When we have progression information - such as Checklists - that may apply profile-wide, it will be returned here rather than in the per-character progression data.
        /// COMPONENT TYPE: ProfileProgression</summary>
        [Newtonsoft.Json.JsonProperty("profileProgression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileProgression ProfileProgression { get; set; }

        /// <summary>COMPONENT TYPE: PresentationNodes</summary>
        [Newtonsoft.Json.JsonProperty("profilePresentationNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfilePresentationNodes ProfilePresentationNodes { get; set; }

        /// <summary>COMPONENT TYPE: Records</summary>
        [Newtonsoft.Json.JsonProperty("profileRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileRecords ProfileRecords { get; set; }

        /// <summary>COMPONENT TYPE: Collectibles</summary>
        [Newtonsoft.Json.JsonProperty("profileCollectibles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCollectibles ProfileCollectibles { get; set; }

        /// <summary>Basic information about each character, keyed by the CharacterId.
        /// COMPONENT TYPE: Characters</summary>
        [Newtonsoft.Json.JsonProperty("characters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Characters Characters { get; set; }

        /// <summary>The character-level non-equipped inventory items, keyed by the Character's Id.
        /// COMPONENT TYPE: CharacterInventories</summary>
        [Newtonsoft.Json.JsonProperty("characterInventories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterInventories CharacterInventories { get; set; }

        /// <summary>Character-level progression data, keyed by the Character's Id.
        /// COMPONENT TYPE: CharacterProgressions</summary>
        [Newtonsoft.Json.JsonProperty("characterProgressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterProgressions CharacterProgressions { get; set; }

        /// <summary>Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.
        /// COMPONENT TYPE: CharacterRenderData</summary>
        [Newtonsoft.Json.JsonProperty("characterRenderData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterRenderData CharacterRenderData { get; set; }

        /// <summary>Character activity data - the activities available to this character and its status, keyed by the Character's Id.
        /// COMPONENT TYPE: CharacterActivities</summary>
        [Newtonsoft.Json.JsonProperty("characterActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterActivities CharacterActivities { get; set; }

        /// <summary>The character's equipped items, keyed by the Character's Id.
        /// COMPONENT TYPE: CharacterEquipment</summary>
        [Newtonsoft.Json.JsonProperty("characterEquipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterEquipment CharacterEquipment { get; set; }

        /// <summary>Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.
        /// This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.
        /// COMPONENT TYPE: Kiosks</summary>
        [Newtonsoft.Json.JsonProperty("characterKiosks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterKiosks CharacterKiosks { get; set; }

        /// <summary>When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states, per character, that are character-scoped.
        /// This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
        /// COMPONENT TYPE: ItemSockets</summary>
        [Newtonsoft.Json.JsonProperty("characterPlugSets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterPlugSets CharacterPlugSets { get; set; }

        /// <summary>Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that's happening under the surface?
        /// Let's talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.
        /// At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.
        /// Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus "itemComponents" was all that you needed: it was keyed by item's instance IDs and provided the stateful information you needed inside.
        /// Unfortunately, we don't live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it's in Account-level inventory - and the values related to that item's state in relation to the given character.
        /// To give a concrete example, look at a Moments of Triumph bounty. They exist in a character's inventory, and show/care about a character's progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.
        /// I'm not crying, you're crying Okay we're both crying but it's going to be okay I promise Actually I shouldn't promise that, I don't know if it's going to be okay</summary>
        [Newtonsoft.Json.JsonProperty("characterUninstancedItemComponents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyBaseItemComponentSetOfuint32> CharacterUninstancedItemComponents { get; set; }

        /// <summary>COMPONENT TYPE: PresentationNodes</summary>
        [Newtonsoft.Json.JsonProperty("characterPresentationNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterPresentationNodes CharacterPresentationNodes { get; set; }

        /// <summary>COMPONENT TYPE: Records</summary>
        [Newtonsoft.Json.JsonProperty("characterRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterRecords CharacterRecords { get; set; }

        /// <summary>COMPONENT TYPE: Collectibles</summary>
        [Newtonsoft.Json.JsonProperty("characterCollectibles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterCollectibles CharacterCollectibles { get; set; }

        /// <summary>Information about instanced items across all returned characters, keyed by the item's instance ID.
        /// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</summary>
        [Newtonsoft.Json.JsonProperty("itemComponents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemComponents ItemComponents { get; set; }

        /// <summary>A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
        /// COMPONENT TYPE: CurrencyLookups</summary>
        [Newtonsoft.Json.JsonProperty("characterCurrencyLookups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterCurrencyLookups CharacterCurrencyLookups { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProfileResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProfileResponse>(data);
        }

    }

    /// <summary>For now, this isn't used for much: it's a record of the recent refundable purchases that the user has made. In the future, it could be used for providing refunds/buyback via the API. Wouldn't that be fun?</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorReceiptsComponent
    {
        /// <summary>The receipts for refundable purchases made at a vendor.</summary>
        [Newtonsoft.Json.JsonProperty("receipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorReceipt> Receipts { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorReceiptsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorReceiptsComponent>(data);
        }

    }

    /// <summary>If a character purchased an item that is refundable, a Vendor Receipt will be created on the user's Destiny Profile. These expire after a configurable period of time, but until then can be used to get refunds on items. BNet does not provide the ability to refund a purchase *yet*, but you know.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorReceipt
    {
        /// <summary>The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.</summary>
        [Newtonsoft.Json.JsonProperty("currencyPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemQuantity> CurrencyPaid { get; set; }

        /// <summary>The item that was received, and its quantity.</summary>
        [Newtonsoft.Json.JsonProperty("itemReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemReceived ItemReceived { get; set; }

        /// <summary>The unlock flag used to determine whether you still have the purchased item.</summary>
        [Newtonsoft.Json.JsonProperty("licenseUnlockHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LicenseUnlockHash { get; set; }

        /// <summary>The ID of the character who made the purchase.</summary>
        [Newtonsoft.Json.JsonProperty("purchasedByCharacterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PurchasedByCharacterId { get; set; }

        /// <summary>Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.</summary>
        [Newtonsoft.Json.JsonProperty("refundPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RefundPolicy2 RefundPolicy { get; set; }

        /// <summary>The identifier of this receipt.</summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SequenceNumber { get; set; }

        /// <summary>The seconds since epoch at which this receipt is rendered invalid.</summary>
        [Newtonsoft.Json.JsonProperty("timeToExpiration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TimeToExpiration { get; set; }

        /// <summary>The date at which this receipt is rendered invalid.</summary>
        [Newtonsoft.Json.JsonProperty("expiresOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpiresOn { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorReceipt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorReceipt>(data);
        }

    }

    /// <summary>The base class for any component-returning object that may need to indicate information about the state of the component being returned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ComponentResponse
    {
        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ComponentResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComponentResponse>(data);
        }

    }

    /// <summary>A set of flags for reason(s) why the component populated in the way that it did. Inspect the individual flags for the reasons.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ComponentPrivacySetting
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyVendorReceiptsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyVendorReceiptsComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyVendorReceiptsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyVendorReceiptsComponent>(data);
        }

    }

    /// <summary>A list of minimal information for items in an inventory: be it a character's inventory, or a Profile's inventory. (Note that the Vault is a collection of inventory buckets in the Profile's inventory)
    /// Inventory Items returned here are in a flat list, but importantly they have a bucketHash property that indicates the specific inventory bucket that is holding them. These buckets constitute things like the separate sections of the Vault, the user's inventory slots, etc. See DestinyInventoryBucketDefinition for more info.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyInventoryComponent
    {
        /// <summary>The items in this inventory. If you care to bucket them, use the item's bucketHash property to group them.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemComponent> Items { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyInventoryComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyInventoryComponent>(data);
        }

    }

    /// <summary>The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemComponent
    {
        /// <summary>The identifier for the item's definition, which is where most of the useful static information for the item can be found.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.</summary>
        [Newtonsoft.Json.JsonProperty("itemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemInstanceId { get; set; }

        /// <summary>The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>If the item is bound to a location, it will be specified in this enum.</summary>
        [Newtonsoft.Json.JsonProperty("bindStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BindStatus BindStatus { get; set; }

        /// <summary>An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location2 Location { get; set; }

        /// <summary>The hash identifier for the specific inventory bucket in which the item is located.</summary>
        [Newtonsoft.Json.JsonProperty("bucketHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BucketHash { get; set; }

        /// <summary>If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).</summary>
        [Newtonsoft.Json.JsonProperty("transferStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransferStatus TransferStatus { get; set; }

        /// <summary>If the item can be locked, this will indicate that state.</summary>
        [Newtonsoft.Json.JsonProperty("lockable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Lockable { get; set; }

        /// <summary>A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public State State { get; set; }

        /// <summary>If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
        /// If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.</summary>
        [Newtonsoft.Json.JsonProperty("overrideStyleItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverrideStyleItemHash { get; set; }

        /// <summary>If the item can expire, this is the date at which it will/did expire.</summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemBindStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>Whether you can transfer an item, and why not if you can't.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TransferStatuses
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    /// <summary>A flags enumeration where each bit represents a different possible state that the item can be in that may effect how the item is displayed to the user and what actions can be performed against it.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyInventoryComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyInventoryComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyInventoryComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyInventoryComponent>(data);
        }

    }

    /// <summary>The most essential summary information about a Profile (in Destiny 1, we called these "Accounts").</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProfileComponent
    {
        /// <summary>If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.</summary>
        [Newtonsoft.Json.JsonProperty("userInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfo UserInfo { get; set; }

        /// <summary>The last time the user played with any character on this Profile.</summary>
        [Newtonsoft.Json.JsonProperty("dateLastPlayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateLastPlayed { get; set; }

        /// <summary>If you want to know what expansions they own, this will contain that data.</summary>
        [Newtonsoft.Json.JsonProperty("versionsOwned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VersionsOwned VersionsOwned { get; set; }

        /// <summary>A list of the character IDs, for further querying on your part.</summary>
        [Newtonsoft.Json.JsonProperty("characterIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<long> CharacterIds { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProfileComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProfileComponent>(data);
        }

    }

    /// <summary>A flags enumeration indicating the versions of the game that a given user has purchased.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyGameVersions
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyProfileComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyProfileComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyProfileComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyProfileComponent>(data);
        }

    }

    /// <summary>A Kiosk is a Vendor (DestinyVendorDefinition) that sells items based on whether you have already acquired that item before.
    /// This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the individual character's DestinyCharacterKiosksComponent.
    /// Note that, because this component returns vendorItemIndexes (that is to say, indexes into the Kiosk Vendor's itemList property), these results are necessarily content version dependent. Make sure that you have the latest version of the content manifest databases before using this data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyKiosksComponent
    {
        /// <summary>A dictionary keyed by the Kiosk Vendor's hash identifier (use it to look up the DestinyVendorDefinition for the relevant kiosk vendor), and whose value is a list of all the items that the user can "see" in the Kiosk, and any other interesting metadata.</summary>
        [Newtonsoft.Json.JsonProperty("kioskItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<DestinyKioskItem>> KioskItems { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyKiosksComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyKiosksComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyKioskItem
    {
        /// <summary>The index of the item in the related DestinyVendorDefintion's itemList property, representing the sale.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If true, the user can not only see the item, but they can acquire it. It is possible that a user can see a kiosk item and not be able to acquire it.</summary>
        [Newtonsoft.Json.JsonProperty("canAcquire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanAcquire { get; set; }

        /// <summary>Indexes into failureStrings for the Vendor, indicating the reasons why it failed if any.</summary>
        [Newtonsoft.Json.JsonProperty("failureIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> FailureIndexes { get; set; }

        /// <summary>I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for "flavor" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.</summary>
        [Newtonsoft.Json.JsonProperty("flavorObjective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlavorObjective FlavorObjective { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyKioskItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyKioskItem>(data);
        }

    }

    /// <summary>Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyObjectiveProgress
    {
        /// <summary>The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectiveHash { get; set; }

        /// <summary>If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved.</summary>
        [Newtonsoft.Json.JsonProperty("destinationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationHash { get; set; }

        /// <summary>If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.valueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.valueStyle before rendering progress.</summary>
        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Progress { get; set; }

        /// <summary>As of Forsaken, objectives' completion value is determined dynamically at runtime.
        /// This value represents the threshold of progress you need to surpass in order for this objective to be considered "complete".
        /// If you were using objective data, switch from using the DestinyObjectiveDefinition's "completionValue" to this value.</summary>
        [Newtonsoft.Json.JsonProperty("completionValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompletionValue { get; set; }

        /// <summary>Whether or not the Objective is completed.</summary>
        [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complete { get; set; }

        /// <summary>If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property.</summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyObjectiveProgress FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyObjectiveProgress>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyKiosksComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyKiosksComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyKiosksComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyKiosksComponent>(data);
        }

    }

    /// <summary>Sockets may refer to a "Plug Set": a set of reusable plugs that may be shared across multiple sockets (or even, in theory, multiple sockets over multiple items).
    /// This is the set of those plugs that we came across in the users' inventory, along with the values for plugs in the set. Any given set in this component may be represented in Character and Profile-level, as some plugs may be Profile-level restricted, and some character-level restricted. (note that the ones that are even more specific will remain on the actual socket component itself, as they cannot be reused)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPlugSetsComponent
    {
        /// <summary>The shared list of plugs for each relevant PlugSet, keyed by the hash identifier of the PlugSet (DestinyPlugSetDefinition).</summary>
        [Newtonsoft.Json.JsonProperty("plugs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<DestinyItemPlug>> Plugs { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPlugSetsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPlugSetsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemPlug
    {
        /// <summary>The hash identifier of the DestinyInventoryItemDefinition that represents this plug.</summary>
        [Newtonsoft.Json.JsonProperty("plugItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugItemHash { get; set; }

        /// <summary>Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the "gating" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.</summary>
        [Newtonsoft.Json.JsonProperty("plugObjectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyObjectiveProgress> PlugObjectives { get; set; }

        /// <summary>If true, this plug has met all of its insertion requirements. Big if true.</summary>
        [Newtonsoft.Json.JsonProperty("canInsert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanInsert { get; set; }

        /// <summary>If true, this plug will provide its benefits while inserted.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
        /// This list will be empty if the plug can be inserted.</summary>
        [Newtonsoft.Json.JsonProperty("insertFailIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> InsertFailIndexes { get; set; }

        /// <summary>If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
        /// This list will be empty if the plug is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("enableFailIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> EnableFailIndexes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemPlug FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemPlug>(data);
        }

    }

    /// <summary>Sometimes, we have large sets of reusable plugs that are defined identically and thus can (and in some cases, are so large that they *must*) be shared across the places where they are used. These are the definitions for those reusable sets of plugs. 
    /// See DestinyItemSocketEntryDefinition.plugSource and reusablePlugSetHash for the relationship between these reusable plug sets and the sockets that leverage them (for starters, Emotes).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPlugSetDefinition
    {
        /// <summary>If you want to show these plugs in isolation, these are the display properties for them.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties13 DisplayProperties { get; set; }

        /// <summary>This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.
        /// If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.</summary>
        [Newtonsoft.Json.JsonProperty("reusablePlugItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSocketEntryPlugItemDefinition> ReusablePlugItems { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPlugSetDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPlugSetDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyPlugSetsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPlugSetsComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyPlugSetsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyPlugSetsComponent>(data);
        }

    }

    /// <summary>The set of progression-related information that applies at a Profile-wide level for your Destiny experience. This differs from the Jimi Hendrix Experience because there's less guitars on fire. Yet. #spoileralert?
    /// This will include information such as Checklist info.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProfileProgressionComponent
    {
        /// <summary>The set of checklists that can be examined on a profile-wide basis, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)
        /// For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.</summary>
        [Newtonsoft.Json.JsonProperty("checklists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, bool>> Checklists { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProfileProgressionComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProfileProgressionComponent>(data);
        }

    }

    /// <summary>By public demand, Checklists are loose sets of "things to do/things you have done" in Destiny that we were actually able to track. They include easter eggs you find in the world, unique chests you unlock, and other such data where the first time you do it is significant enough to be tracked, and you have the potential to "get them all".
    /// These may be account-wide, or may be per character. The status of these will be returned in related "Checklist" data coming down from API requests such as GetProfile or GetCharacter.
    /// Generally speaking, the items in a checklist can be completed in any order: we return an ordered list which only implies the way we are showing them in our own UI, and you can feel free to alter it as you wish.
    /// Note that, in the future, there will be something resembling the old D1 Record Books in at least some vague form. When that is created, it may be that it will supercede much or all of this Checklist data. It remains to be seen if that will be the case, so for now assume that the Checklists will still exist even after the release of D2: Forsaken.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyChecklistDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>A localized string prompting you to view the checklist.</summary>
        [Newtonsoft.Json.JsonProperty("viewActionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViewActionString { get; set; }

        /// <summary>Indicates whether you will find this checklist on the Profile or Character components.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope8 Scope { get; set; }

        /// <summary>The individual checklist items. Gotta catch 'em all.</summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyChecklistEntryDefinition> Entries { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyChecklistDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyChecklistDefinition>(data);
        }

    }

    /// <summary>The properties of an individual checklist item. Note that almost everything is optional: it is *highly* variable what kind of data we'll actually be able to return: at times we may have no other relationships to entities at all.
    /// Whatever UI you build, do it with the knowledge that any given entry might not actually be able to be associated with some other Destiny entity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyChecklistEntryDefinition
    {
        /// <summary>The identifier for this Checklist entry. Guaranteed unique only within this Checklist Definition, and not globally/for all checklists.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>Even if no other associations exist, we will give you *something* for display properties. In cases where we have no associated entities, it may be as simple as a numerical identifier.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties14 DisplayProperties { get; set; }

        [Newtonsoft.Json.JsonProperty("destinationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationHash { get; set; }

        [Newtonsoft.Json.JsonProperty("locationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationHash { get; set; }

        /// <summary>Note that a Bubble's hash doesn't uniquely identify a "top level" entity in Destiny. Only the combination of location and bubble can uniquely identify a place in the world of Destiny: so if bubbleHash is populated, locationHash must too be populated for it to have any meaning.
        /// You can use this property if it is populated to look up the DestinyLocationDefinition's associated .locationReleases[].activityBubbleName property.</summary>
        [Newtonsoft.Json.JsonProperty("bubbleHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BubbleHash { get; set; }

        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        [Newtonsoft.Json.JsonProperty("vendorInteractionIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorInteractionIndex { get; set; }

        /// <summary>The scope at which this specific entry can be computed.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope9 Scope { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyChecklistEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyChecklistEntryDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyProfileProgressionComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyProfileProgressionComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyProfileProgressionComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyProfileProgressionComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationNodesComponent
    {
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyPresentationNodeComponent> Nodes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationNodesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationNodesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPresentationNodeComponent
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationNodeState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("objective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyObjectiveProgress Objective { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPresentationNodeComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPresentationNodeComponent>(data);
        }

    }

    /// <summary>I know this doesn't look like a Flags Enumeration right now, but I assure you it is. This is the possible states that a Presentation Node can be in, and it is almost certain that its potential states will increase in the future. So don't treat it like a straight up enumeration.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyPresentationNodeState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyPresentationNodesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPresentationNodesComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyPresentationNodesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyPresentationNodesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyRecordsComponent
    {
        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyRecordComponent> Records { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyRecordsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyRecordsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyRecordComponent
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyRecordState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyObjectiveProgress> Objectives { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyRecordComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyRecordComponent>(data);
        }

    }

    /// <summary>A Flags enumeration where each bit represents a possible state that a Record/Triumph can be in.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyRecordState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProfileRecordsComponent
    {
        /// <summary>Your "Triumphs" score.</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Score { get; set; }

        /// <summary>If this profile is tracking a record, this is the hash identifier of the record it is tracking.</summary>
        [Newtonsoft.Json.JsonProperty("trackedRecordHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackedRecordHash { get; set; }

        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyRecordComponent> Records { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProfileRecordsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProfileRecordsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyProfileRecordsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyProfileRecordsComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyProfileRecordsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyProfileRecordsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCollectiblesComponent
    {
        [Newtonsoft.Json.JsonProperty("collectibles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCollectibleComponent> Collectibles { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCollectiblesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCollectiblesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCollectibleComponent
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCollectibleState? State { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCollectibleComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCollectibleComponent>(data);
        }

    }

    /// <summary>A Flags Enumeration where each bit represents a different state that the Collectible can be in. A collectible can be in any number of these states, and you can choose to use or ignore any or all of them when making your own UI that shows Collectible info. Our displays are going to honor them, but we're also the kind of people who only pretend to inhale before quickly passing it to the left. So, you know, do what you got to do.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyCollectibleState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyProfileCollectiblesComponent
    {
        /// <summary>The list of collectibles determined by the game as having been "recently" acquired.</summary>
        [Newtonsoft.Json.JsonProperty("recentCollectibleHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> RecentCollectibleHashes { get; set; }

        /// <summary>The list of collectibles determined by the game as having been "recently" acquired.
        /// The game client itself actually controls this data, so I personally question whether anyone will get much use out of this: because we can't edit this value through the API. But in case anyone finds it useful, here it is.</summary>
        [Newtonsoft.Json.JsonProperty("newnessFlaggedCollectibleHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> NewnessFlaggedCollectibleHashes { get; set; }

        [Newtonsoft.Json.JsonProperty("collectibles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCollectibleComponent> Collectibles { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyProfileCollectiblesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyProfileCollectiblesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyProfileCollectiblesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyProfileCollectiblesComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyProfileCollectiblesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyProfileCollectiblesComponent>(data);
        }

    }

    /// <summary>This component contains base properties of the character. You'll probably want to always request this component, but hey you do you.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterComponent
    {
        /// <summary>Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.</summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MembershipId { get; set; }

        /// <summary>membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.</summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipType32 MembershipType { get; set; }

        /// <summary>The unique identifier for the character.</summary>
        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        /// <summary>The last date that the user played Destiny.</summary>
        [Newtonsoft.Json.JsonProperty("dateLastPlayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateLastPlayed { get; set; }

        /// <summary>If the user is currently playing, this is how long they've been playing.</summary>
        [Newtonsoft.Json.JsonProperty("minutesPlayedThisSession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MinutesPlayedThisSession { get; set; }

        /// <summary>If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.</summary>
        [Newtonsoft.Json.JsonProperty("minutesPlayedTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MinutesPlayedTotal { get; set; }

        /// <summary>The user's calculated "Light Level". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.</summary>
        [Newtonsoft.Json.JsonProperty("light", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Light { get; set; }

        /// <summary>Your character's stats, such as Agility, Resilience, etc... *not* historical stats.
        /// You'll have to call a different endpoint for those.</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, int> Stats { get; set; }

        /// <summary>Use this hash to look up the character's DestinyRaceDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("raceHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RaceHash { get; set; }

        /// <summary>Use this hash to look up the character's DestinyGenderDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("genderHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GenderHash { get; set; }

        /// <summary>Use this hash to look up the character's DestinyClassDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("classHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClassHash { get; set; }

        /// <summary>Mostly for historical purposes at this point, this is an enumeration for the character's race.
        /// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.</summary>
        [Newtonsoft.Json.JsonProperty("raceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RaceType RaceType { get; set; }

        /// <summary>Mostly for historical purposes at this point, this is an enumeration for the character's class.
        /// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.</summary>
        [Newtonsoft.Json.JsonProperty("classType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassType2 ClassType { get; set; }

        /// <summary>Mostly for historical purposes at this point, this is an enumeration for the character's Gender.
        /// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.</summary>
        [Newtonsoft.Json.JsonProperty("genderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenderType GenderType { get; set; }

        /// <summary>A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.</summary>
        [Newtonsoft.Json.JsonProperty("emblemPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmblemPath { get; set; }

        /// <summary>A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.</summary>
        [Newtonsoft.Json.JsonProperty("emblemBackgroundPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmblemBackgroundPath { get; set; }

        /// <summary>The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("emblemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EmblemHash { get; set; }

        /// <summary>A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.</summary>
        [Newtonsoft.Json.JsonProperty("emblemColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmblemColor EmblemColor { get; set; }

        /// <summary>The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.</summary>
        [Newtonsoft.Json.JsonProperty("levelProgression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LevelProgression LevelProgression { get; set; }

        /// <summary>The "base" level of your character, not accounting for any light level.</summary>
        [Newtonsoft.Json.JsonProperty("baseCharacterLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BaseCharacterLevel { get; set; }

        /// <summary>A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.</summary>
        [Newtonsoft.Json.JsonProperty("percentToNextLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PercentToNextLevel { get; set; }

        /// <summary>If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.</summary>
        [Newtonsoft.Json.JsonProperty("titleRecordHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TitleRecordHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyRace
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>In Destiny, "Races" are really more like "Species". Sort of. I mean, are the Awoken a separate species from humans? I'm not sure. But either way, they're defined here. You'll see Exo, Awoken, and Human as examples of these Species. Players will choose one for their character.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyRaceDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition.</summary>
        [Newtonsoft.Json.JsonProperty("raceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RaceType2 RaceType { get; set; }

        /// <summary>A localized string referring to the singular form of the Race's name when referred to in gendered form. Keyed by the DestinyGender.</summary>
        [Newtonsoft.Json.JsonProperty("genderedRaceNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> GenderedRaceNames { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyRaceDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyRaceDefinition>(data);
        }

    }

    /// <summary>Gender is a social construct, and as such we have definitions for Genders. Right now there happens to only be two, but we'll see what the future holds.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyGenderDefinition
    {
        /// <summary>This is a quick reference enumeration for all of the currently defined Genders. We use the enumeration for quicker lookups in related data, like DestinyClassDefinition.genderedClassNames.</summary>
        [Newtonsoft.Json.JsonProperty("genderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenderType2 GenderType { get; set; }

        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyGenderDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyGenderDefinition>(data);
        }

    }

    /// <summary>Defines a Character Class in Destiny 2. These are types of characters you can play, like Titan, Warlock, and Hunter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyClassDefinition
    {
        /// <summary>In Destiny 1, we added a convenience Enumeration for referring to classes. We've kept it, though mostly for posterity. This is the enum value for this definition's class.</summary>
        [Newtonsoft.Json.JsonProperty("classType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassType3 ClassType { get; set; }

        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>A localized string referring to the singular form of the Class's name when referred to in gendered form. Keyed by the DestinyGender.</summary>
        [Newtonsoft.Json.JsonProperty("genderedClassNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> GenderedClassNames { get; set; }

        /// <summary>Mentors don't really mean anything anymore. Don't expect this to be populated.</summary>
        [Newtonsoft.Json.JsonProperty("mentorVendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MentorVendorHash { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyClassDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyClassDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyCharacterComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCharacterComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyCharacterComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyCharacterComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyInventoryComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyInventoryComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyInventoryComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyInventoryComponent>(data);
        }

    }

    /// <summary>This component returns anything that could be considered "Progression" on a user: data where the user is gaining levels, reputation, completions, rewards, etc...</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterProgressionComponent
    {
        /// <summary>A Dictionary of all known progressions for the Character, keyed by the Progression's hash.
        /// Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("progressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyProgression> Progressions { get; set; }

        /// <summary>A dictionary of all known Factions, keyed by the Faction's hash. It contains data about this character's status with the faction.</summary>
        [Newtonsoft.Json.JsonProperty("factions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyFactionProgression> Factions { get; set; }

        /// <summary>Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone's status.</summary>
        [Newtonsoft.Json.JsonProperty("milestones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyMilestone> Milestones { get; set; }

        /// <summary>If the user has any active quests, the quests' statuses will be returned here.
        /// Note that quests have been largely supplanted by Milestones, but that doesn't mean that they won't make a comeback independent of milestones at some point.</summary>
        [Newtonsoft.Json.JsonProperty("quests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyQuestStatus> Quests { get; set; }

        /// <summary>Sometimes, you have items in your inventory that don't have instances, but still have Objective information. This provides you that objective information for uninstanced items. 
        /// This dictionary is keyed by the item's hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.</summary>
        [Newtonsoft.Json.JsonProperty("uninstancedItemObjectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<DestinyObjectiveProgress>> UninstancedItemObjectives { get; set; }

        /// <summary>The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)
        /// For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.</summary>
        [Newtonsoft.Json.JsonProperty("checklists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, bool>> Checklists { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterProgressionComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterProgressionComponent>(data);
        }

    }

    /// <summary>Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyFactionProgression
    {
        /// <summary>The hash identifier of the Faction related to this progression. Use it to look up the DestinyFactionDefinition for more rendering info.</summary>
        [Newtonsoft.Json.JsonProperty("factionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FactionHash { get; set; }

        /// <summary>The index of the Faction vendor that is currently available. Will be set to -1 if no vendors are available.</summary>
        [Newtonsoft.Json.JsonProperty("factionVendorIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FactionVendorIndex { get; set; }

        /// <summary>The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.</summary>
        [Newtonsoft.Json.JsonProperty("progressionHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressionHash { get; set; }

        /// <summary>The amount of progress earned today for this progression.</summary>
        [Newtonsoft.Json.JsonProperty("dailyProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DailyProgress { get; set; }

        /// <summary>If this progression has a daily limit, this is that limit.</summary>
        [Newtonsoft.Json.JsonProperty("dailyLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DailyLimit { get; set; }

        /// <summary>The amount of progress earned toward this progression in the current week.</summary>
        [Newtonsoft.Json.JsonProperty("weeklyProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WeeklyProgress { get; set; }

        /// <summary>If this progression has a weekly limit, this is that limit.</summary>
        [Newtonsoft.Json.JsonProperty("weeklyLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WeeklyLimit { get; set; }

        /// <summary>This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)</summary>
        [Newtonsoft.Json.JsonProperty("currentProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentProgress { get; set; }

        /// <summary>This is the level of the progression (for instance, the Character Level).</summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Level { get; set; }

        /// <summary>This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)</summary>
        [Newtonsoft.Json.JsonProperty("levelCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LevelCap { get; set; }

        /// <summary>Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)</summary>
        [Newtonsoft.Json.JsonProperty("stepIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StepIndex { get; set; }

        /// <summary>The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.</summary>
        [Newtonsoft.Json.JsonProperty("progressToNextLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProgressToNextLevel { get; set; }

        /// <summary>The total amount of progression (i.e. "Experience") needed in order to reach the next level.</summary>
        [Newtonsoft.Json.JsonProperty("nextLevelAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NextLevelAt { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyFactionProgression FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyFactionProgression>(data);
        }

    }

    /// <summary>Represents a runtime instance of a user's milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said "things to do." Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestone
    {
        /// <summary>The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.</summary>
        [Newtonsoft.Json.JsonProperty("milestoneHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneHash { get; set; }

        /// <summary>Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.</summary>
        [Newtonsoft.Json.JsonProperty("availableQuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneQuest> AvailableQuests { get; set; }

        /// <summary>The currently active Activities in this milestone, when the Milestone is driven by Challenges.
        /// Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.</summary>
        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneChallengeActivity> Activities { get; set; }

        /// <summary>Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, double> Values { get; set; }

        /// <summary>A milestone may have one or more active vendors that are "related" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. [I told you I'd regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.
        /// Before we even use it, it's already deprecated! How much of a bummer is that? We need more data.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> VendorHashes { get; set; }

        /// <summary>Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.</summary>
        [Newtonsoft.Json.JsonProperty("vendors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneVendor> Vendors { get; set; }

        /// <summary>If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as "overview/checklist" rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren't under a specific Quest.</summary>
        [Newtonsoft.Json.JsonProperty("rewards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneRewardCategory> Rewards { get; set; }

        /// <summary>If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate { get; set; }

        /// <summary>If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.</summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndDate { get; set; }

        /// <summary>Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestone FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestone>(data);
        }

    }

    /// <summary>If a Milestone has one or more Quests, this will contain the live information for the character's status with one of those quests.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneQuest
    {
        /// <summary>Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item's DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.</summary>
        [Newtonsoft.Json.JsonProperty("questItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuestItemHash { get; set; }

        /// <summary>The current status of the quest for the character making the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Status2 Status { get; set; }

        /// <summary>*IF* the Milestone has an active Activity that can give you greater details about what you need to do, it will be returned here. Remember to associate this with the DestinyMilestoneDefinition's activities to get details about the activity, including what specific quest it is related to if you have multiple quests to choose from.</summary>
        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Activity Activity { get; set; }

        /// <summary>The activities referred to by this quest can have many associated challenges. They are all contained here, with activityHashes so that you can associate them with the specific activity variants in which they can be found. In retrospect, I probably should have put these under the specific Activity Variants, but it's too late to change it now. Theoretically, a quest without Activities can still have Challenges, which is why this is on a higher level than activity/variants, but it probably should have been in both places. That may come as a later revision.</summary>
        [Newtonsoft.Json.JsonProperty("challenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyChallengeStatus> Challenges { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneQuest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneQuest>(data);
        }

    }

    /// <summary>Data regarding the progress of a Quest for a specific character. Quests are composed of multiple steps, each with potentially multiple objectives: this QuestStatus will return Objective data for the *currently active* step in this quest.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyQuestStatus
    {
        /// <summary>The hash identifier for the Quest Item. (Note: Quests are defined as Items, and thus you would use this to look up the quest's DestinyInventoryItemDefinition). For information on all steps in the quest, you can then examine its DestinyInventoryItemDefinition.setData property for Quest Steps (which are *also* items). You can use the Item Definition to display human readable data about the overall quest.</summary>
        [Newtonsoft.Json.JsonProperty("questHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuestHash { get; set; }

        /// <summary>The hash identifier of the current Quest Step, which is also a DestinyInventoryItemDefinition. You can use this to get human readable data about the current step and what to do in that step.</summary>
        [Newtonsoft.Json.JsonProperty("stepHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StepHash { get; set; }

        /// <summary>A step can have multiple objectives. This will give you the progress for each objective in the current step, in the order in which they are rendered in-game.</summary>
        [Newtonsoft.Json.JsonProperty("stepObjectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyObjectiveProgress> StepObjectives { get; set; }

        /// <summary>Whether or not the quest is tracked</summary>
        [Newtonsoft.Json.JsonProperty("tracked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tracked { get; set; }

        /// <summary>The current Quest Step will be an instanced item in the player's inventory. If you care about that, this is the instance ID of that item.</summary>
        [Newtonsoft.Json.JsonProperty("itemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemInstanceId { get; set; }

        /// <summary>Whether or not the whole quest has been completed, regardless of whether or not you have redeemed the rewards for the quest.</summary>
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completed { get; set; }

        /// <summary>Whether or not you have redeemed rewards for this quest.</summary>
        [Newtonsoft.Json.JsonProperty("redeemed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redeemed { get; set; }

        /// <summary>Whether or not you have started this quest.</summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Started { get; set; }

        /// <summary>If the quest has a related Vendor that you should talk to in order to initiate the quest/earn rewards/continue the quest, this will be the hash identifier of that Vendor. Look it up its DestinyVendorDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyQuestStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyQuestStatus>(data);
        }

    }

    /// <summary>Sometimes, we know the specific activity that the Milestone wants you to play. This entity provides additional information about that Activity and all of its variants. (sometimes there's only one variant, but I think you get the point)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneActivity
    {
        /// <summary>The hash of an arbitrarily chosen variant of this activity. We'll go ahead and call that the "canonical" activity, because if you're using this value you should only use it for properties that are common across the variants: things like the name of the activity, it's location, etc... Use this hash to look up the DestinyActivityDefinition of this activity for rendering data.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityModeHash { get; set; }

        /// <summary>The enumeration equivalent of the most specific Activity Mode under which this activity is played.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyMilestoneActivityActivityModeType? ActivityModeType { get; set; }

        /// <summary>If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data. Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.</summary>
        [Newtonsoft.Json.JsonProperty("modifierHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ModifierHashes { get; set; }

        /// <summary>If you want more than just name/location/etc... you're going to have to dig into and show the variants of the conceptual activity. These will differ in seemingly arbitrary ways, like difficulty level and modifiers applied. Show it in whatever way tickles your fancy.</summary>
        [Newtonsoft.Json.JsonProperty("variants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneActivityVariant> Variants { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneActivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneActivity>(data);
        }

    }

    /// <summary>Represents custom data that we know about an individual variant of an activity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneActivityVariant
    {
        /// <summary>The hash for the specific variant of the activity related to this milestone. You can pull more detailed static info from the DestinyActivityDefinition, such as difficulty level.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>An OPTIONAL component: if it makes sense to talk about this activity variant in terms of whether or not it has been completed or what progress you have made in it, this will be returned. Otherwise, this will be NULL.</summary>
        [Newtonsoft.Json.JsonProperty("completionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletionStatus CompletionStatus { get; set; }

        /// <summary>The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityModeHash { get; set; }

        /// <summary>The enumeration equivalent of the most specific Activity Mode under which this activity is played.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyMilestoneActivityVariantActivityModeType? ActivityModeType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneActivityVariant FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneActivityVariant>(data);
        }

    }

    /// <summary>Represents this player's personal completion status for the Activity under a Milestone, if the activity has trackable completion and progress information. (most activities won't, or the concept won't apply. For instance, it makes sense to talk about a tier of a raid as being Completed or having progress, but it doesn't make sense to talk about a Crucible Playlist in those terms.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneActivityCompletionStatus
    {
        /// <summary>If the activity has been "completed", that information will be returned here.</summary>
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completed { get; set; }

        /// <summary>If the Activity has discrete "phases" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.</summary>
        [Newtonsoft.Json.JsonProperty("phases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneActivityPhase> Phases { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneActivityCompletionStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneActivityCompletionStatus>(data);
        }

    }

    /// <summary>Represents whatever information we can return about an explicit phase in an activity. In the future, I hope we'll have more than just "guh, you done gone and did something," but for the forseeable future that's all we've got. I'm making it more than just a list of booleans out of that overly-optimistic hope.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneActivityPhase
    {
        /// <summary>Indicates if the phase has been completed.</summary>
        [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complete { get; set; }

        /// <summary>In DestinyActivityDefinition, if the activity has phases, there will be a set of phases defined in the "insertionPoints" property. This is the hash that maps to that phase.</summary>
        [Newtonsoft.Json.JsonProperty("phaseHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PhaseHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneActivityPhase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneActivityPhase>(data);
        }

    }

    /// <summary>Represents the status and other related information for a challenge that is - or was - available to a player. 
    /// A challenge is a bonus objective, generally tacked onto Quests or Activities, that provide additional variations on play.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyChallengeStatus
    {
        /// <summary>The progress - including completion status - of the active challenge.</summary>
        [Newtonsoft.Json.JsonProperty("objective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Objective Objective { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyChallengeStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyChallengeStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneChallengeActivity
    {
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        [Newtonsoft.Json.JsonProperty("challenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyChallengeStatus> Challenges { get; set; }

        /// <summary>If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.
        /// Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.</summary>
        [Newtonsoft.Json.JsonProperty("modifierHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ModifierHashes { get; set; }

        /// <summary>If returned, this is the index into the DestinyActivityDefinition's "loadouts" property, indicating the currently active loadout requirements.</summary>
        [Newtonsoft.Json.JsonProperty("loadoutRequirementIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoadoutRequirementIndex { get; set; }

        /// <summary>If the Activity has discrete "phases" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.</summary>
        [Newtonsoft.Json.JsonProperty("phases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneActivityPhase> Phases { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneChallengeActivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneChallengeActivity>(data);
        }

    }

    /// <summary>If a Milestone has one or more Vendors that are relevant to it, this will contain information about that vendor that you can choose to show.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneVendor
    {
        /// <summary>The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        /// <summary>If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I'm taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I'm going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST.</summary>
        [Newtonsoft.Json.JsonProperty("previewItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreviewItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneVendor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneVendor>(data);
        }

    }

    /// <summary>Represents a category of "summary" rewards that can be earned for the Milestone regardless of specific quest rewards that can be earned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneRewardCategory
    {
        /// <summary>Look up the relevant DestinyMilestoneDefinition, and then use rewardCategoryHash to look up the category info in DestinyMilestoneDefinition.rewards.</summary>
        [Newtonsoft.Json.JsonProperty("rewardCategoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RewardCategoryHash { get; set; }

        /// <summary>The individual reward entries for this category, and their status.</summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneRewardEntry> Entries { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneRewardCategory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneRewardCategory>(data);
        }

    }

    /// <summary>The character-specific data for a milestone's reward entry. See DestinyMilestoneDefinition for more information about Reward Entries.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneRewardEntry
    {
        /// <summary>The identifier for the reward entry in question. It is important to look up the related DestinyMilestoneRewardEntryDefinition to get the static details about the reward, which you can do by looking up the milestone's DestinyMilestoneDefinition and examining the DestinyMilestoneDefinition.rewards[rewardCategoryHash].rewardEntries[rewardEntryHash] data.</summary>
        [Newtonsoft.Json.JsonProperty("rewardEntryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RewardEntryHash { get; set; }

        /// <summary>If TRUE, the player has earned this reward.</summary>
        [Newtonsoft.Json.JsonProperty("earned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Earned { get; set; }

        /// <summary>If TRUE, the player has redeemed/picked up/obtained this reward. Feel free to alias this to "gotTheShinyBauble" in your own codebase.</summary>
        [Newtonsoft.Json.JsonProperty("redeemed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redeemed { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneRewardEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneRewardEntry>(data);
        }

    }

    /// <summary>Milestones are an in-game concept where they're attempting to tell you what you can do next in-game.
    /// If that sounds a lot like Advisors in Destiny 1, it is! So we threw out Advisors in the Destiny 2 API and tacked all of the data we would have put on Advisors onto Milestones instead.
    /// Each Milestone represents something going on in the game right now:
    /// - A "ritual activity" you can perform, like nightfall
    /// - A "special event" that may have activities related to it, like Taco Tuesday (there's no Taco Tuesday in Destiny 2)
    /// - A checklist you can fulfill, like helping your Clan complete all of its weekly objectives
    /// - A tutorial quest you can play through, like the introduction to the Crucible.
    /// Most of these milestones appear in game as well. Some of them are BNet only, because we're so extra. You're welcome.
    /// There are some important caveats to understand about how we currently render Milestones and their deficiencies. The game currently doesn't have any content that actually tells you oughtright *what* the Milestone is: that is to say, what you'll be doing. The best we get is either a description of the overall Milestone, or of the Quest that the Milestone is having you partake in: which is usually something that assumes you already know what it's talking about, like "Complete 5 Challenges". 5 Challenges for what? What's a challenge? These are not questions that the Milestone data will answer for you unfortunately.
    /// This isn't great, and in the future I'd like to add some custom text to give you more contextual information to pass on to your users. But for now, you can do what we do to render what little display info we do have:
    /// Start by looking at the currently active quest (ideally, you've fetched DestinyMilestone or DestinyPublicMilestone data from the API, so you know the currently active quest for the Milestone in question). Look up the Quests property in the Milestone Definition, and check if it has display properties. If it does, show that as the description of the Milestone. If it doesn't, fall back on the Milestone's description.
    /// This approach will let you avoid, whenever possible, the even less useful (and sometimes nonexistant) milestone-level names and descriptions.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>A custom image someone made just for the milestone. Isn't that special?</summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>An enumeration listing one of the possible types of milestones. Check out the DestinyMilestoneType enum for more info!</summary>
        [Newtonsoft.Json.JsonProperty("milestoneType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MilestoneType MilestoneType { get; set; }

        /// <summary>If True, then the Milestone has been integrated with BNet's recruiting feature.</summary>
        [Newtonsoft.Json.JsonProperty("recruitable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Recruitable { get; set; }

        /// <summary>If the milestone has a friendly identifier for association with other features - such as Recruiting - that identifier can be found here. This is "friendly" in that it looks better in a URL than whatever the identifier for the Milestone actually is.</summary>
        [Newtonsoft.Json.JsonProperty("friendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        /// <summary>If TRUE, this entry should be returned in the list of milestones for the "Explore Destiny" (i.e. new BNet homepage) features of Bungie.net (as long as the underlying event is active) Note that this is a property specifically used by BNet and the companion app for the "Live Events" feature of the front page/welcome view: it's not a reflection of what you see in-game.</summary>
        [Newtonsoft.Json.JsonProperty("showInExplorer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowInExplorer { get; set; }

        /// <summary>Determines whether we'll show this Milestone in the user's personal Milestones list.</summary>
        [Newtonsoft.Json.JsonProperty("showInMilestones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowInMilestones { get; set; }

        /// <summary>If TRUE, "Explore Destiny" (the front page of BNet and the companion app) prioritize using the activity image over any overriding Quest or Milestone image provided. This unfortunate hack is brought to you by Trials of The Nine.</summary>
        [Newtonsoft.Json.JsonProperty("explorePrioritizesActivityImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExplorePrioritizesActivityImage { get; set; }

        /// <summary>A shortcut for clients - and the server - to understand whether we can predict the start and end dates for this event. In practice, there are multiple ways that an event could have predictable date ranges, but not all events will be able to be predicted via any mechanism (for instance, events that are manually triggered on and off)</summary>
        [Newtonsoft.Json.JsonProperty("hasPredictableDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPredictableDates { get; set; }

        /// <summary>The full set of possible Quests that give the overview of the Milestone event/activity in question. Only one of these can be active at a time for a given Conceptual Milestone, but many of them may be "available" for the user to choose from. (for instance, with Milestones you can choose from the three available Quests, but only one can be active at a time) Keyed by the quest item.
        /// As of Forsaken (~September 2018), Quest-style Milestones are being removed for many types of activities. There will likely be further revisions to the Milestone concept in the future.</summary>
        [Newtonsoft.Json.JsonProperty("quests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyMilestoneQuestDefinition> Quests { get; set; }

        /// <summary>If this milestone can provide rewards, this will define the categories into which the individual reward entries are placed.
        /// This is keyed by the Category's hash, which is only guaranteed to be unique within a given Milestone.</summary>
        [Newtonsoft.Json.JsonProperty("rewards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyMilestoneRewardCategoryDefinition> Rewards { get; set; }

        /// <summary>If you're going to show Vendors for the Milestone, you can use this as a localized "header" for the section where you show that vendor data. It'll provide a more context-relevant clue about what the vendor's role is in the Milestone.</summary>
        [Newtonsoft.Json.JsonProperty("vendorsDisplayTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorsDisplayTitle { get; set; }

        /// <summary>Sometimes, milestones will have rewards provided by Vendors. This definition gives the information needed to understand which vendors are relevant, the order in which they should be returned if order matters, and the conditions under which the Vendor is relevant to the user.</summary>
        [Newtonsoft.Json.JsonProperty("vendors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneVendorDefinition> Vendors { get; set; }

        /// <summary>Sometimes, milestones will have arbitrary values associated with them that are of interest to us or to third party developers. This is the collection of those values' definitions, keyed by the identifier of the value and providing useful definition information such as localizable names and descriptions for the value.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyMilestoneValueDefinition> Values { get; set; }

        /// <summary>Some milestones are explicit objectives that you can see and interact with in the game. Some milestones are more conceptual, built by BNet to help advise you on activities and events that happen in-game but that aren't explicitly shown in game as Milestones. If this is TRUE, you can see this as a milestone in the game. If this is FALSE, it's an event or activity you can participate in, but you won't see it as a Milestone in the game's UI.</summary>
        [Newtonsoft.Json.JsonProperty("isInGameMilestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInGameMilestone { get; set; }

        /// <summary>A Milestone can now be represented by one or more activities directly (without a backing Quest), and that activity can have many challenges, modifiers, and related to it.</summary>
        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneChallengeActivityDefinition> Activities { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultOrder { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneDefinition>(data);
        }

    }

    /// <summary>The type of milestone. Milestones can be Tutorials, one-time/triggered/non-repeating but not necessarily tutorials, or Repeating Milestones.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyMilestoneType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    /// <summary>Any data we need to figure out whether this Quest Item is the currently active one for the conceptual Milestone. Even just typing this description, I already regret it.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneQuestDefinition
    {
        /// <summary>The item representing this Milestone quest. Use this hash to look up the DestinyInventoryItemDefinition for the quest to find its steps and human readable data.</summary>
        [Newtonsoft.Json.JsonProperty("questItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuestItemHash { get; set; }

        /// <summary>The individual quests may have different definitions from the overall milestone: if there's a specific active quest, use these displayProperties instead of that of the overall DestinyMilestoneDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties15 DisplayProperties { get; set; }

        /// <summary>If populated, this image can be shown instead of the generic milestone's image when this quest is live, or it can be used to show a background image for the quest itself that differs from that of the Activity or the Milestone.</summary>
        [Newtonsoft.Json.JsonProperty("overrideImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverrideImage { get; set; }

        /// <summary>The rewards you will get for completing this quest, as best as we could extract them from our data. Sometimes, it'll be a decent amount of data. Sometimes, it's going to be sucky. Sorry.</summary>
        [Newtonsoft.Json.JsonProperty("questRewards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuestRewards QuestRewards { get; set; }

        /// <summary>The full set of all possible "conceptual activities" that are related to this Milestone. Tiers or alternative modes of play within these conceptual activities will be defined as sub-entities. Keyed by the Conceptual Activity Hash. Use the key to look up DestinyActivityDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyMilestoneActivityDefinition> Activities { get; set; }

        /// <summary>Sometimes, a Milestone's quest is related to an entire Destination rather than a specific activity. In that situation, this will be the hash of that Destination. Hotspots are currently the only Milestones that expose this data, but that does not preclude this data from being returned for other Milestones in the future.</summary>
        [Newtonsoft.Json.JsonProperty("destinationHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneQuestDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneQuestDefinition>(data);
        }

    }

    /// <summary>If rewards are given in a quest - as opposed to overall in the entire Milestone - there's way less to track. We're going to simplify this contract as a result. However, this also gives us the opportunity to potentially put more than just item information into the reward data if we're able to mine it out in the future. Remember this if you come back and ask "why are quest reward items nested inside of their own class?"</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneQuestRewardsDefinition
    {
        /// <summary>The items that represent your reward for completing the quest.
        /// Be warned, these could be "dummy" items: items that are only used to render a good-looking in-game tooltip, but aren't the actual items themselves.
        /// For instance, when experience is given there's often a dummy item representing "experience", with quantity being the amount of experience you got. We don't have a programmatic association between those and whatever Progression is actually getting that experience... yet.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneQuestRewardItem> Items { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneQuestRewardsDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneQuestRewardsDefinition>(data);
        }

    }

    /// <summary>A subclass of DestinyItemQuantity, that provides not just the item and its quantity but also information that BNet can - at some point - use internally to provide more robust runtime information about the item's qualities.
    /// If you want it, please ask! We're just out of time to wire it up right now. Or a clever person just may do it with our existing endpoints.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneQuestRewardItem
    {
        /// <summary>The quest reward item *may* be associated with a vendor. If so, this is that vendor. Use this hash to look up the DestinyVendorDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        /// <summary>The quest reward item *may* be associated with a vendor. If so, this is the index of the item being sold, which we can use at runtime to find instanced item information for the reward item.</summary>
        [Newtonsoft.Json.JsonProperty("vendorItemIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorItemIndex { get; set; }

        /// <summary>The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.</summary>
        [Newtonsoft.Json.JsonProperty("itemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemInstanceId { get; set; }

        /// <summary>The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneQuestRewardItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneQuestRewardItem>(data);
        }

    }

    /// <summary>Milestones can have associated activities which provide additional information about the context, challenges, modifiers, state etc... related to this Milestone. 
    /// Information we need to be able to return that data is defined here, along with Tier data to establish a relationship between a conceptual Activity and its difficulty levels and variants.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneActivityDefinition
    {
        /// <summary>The "Conceptual" activity hash. Basically, we picked the lowest level activity and are treating it as the canonical definition of the activity for rendering purposes.
        /// If you care about the specific difficulty modes and variations, use the activities under "Variants".</summary>
        [Newtonsoft.Json.JsonProperty("conceptualActivityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConceptualActivityHash { get; set; }

        /// <summary>A milestone-referenced activity can have many variants, such as Tiers or alternative modes of play.
        /// Even if there is only a single variant, the details for these are represented within as a variant definition.
        /// It is assumed that, if this DestinyMilestoneActivityDefinition is active, then all variants should be active.
        /// If a Milestone could ever split the variants' active status conditionally, they should all have their own DestinyMilestoneActivityDefinition instead! The potential duplication will be worth it for the obviousness of processing and use.</summary>
        [Newtonsoft.Json.JsonProperty("variants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyMilestoneActivityVariantDefinition> Variants { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneActivityDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneActivityDefinition>(data);
        }

    }

    /// <summary>Represents a variant on an activity for a Milestone: a specific difficulty tier, or a specific activity variant for example.
    /// These will often have more specific details, such as an associated Guided Game, progression steps, tier-specific rewards, and custom values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneActivityVariantDefinition
    {
        /// <summary>The hash to use for looking up the variant Activity's definition (DestinyActivityDefinition), where you can find its distinguishing characteristics such as difficulty level and recommended light level. 
        /// Frequently, that will be the only distinguishing characteristics in practice, which is somewhat of a bummer.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>If you care to do so, render the variants in the order prescribed by this value.
        /// When you combine live Milestone data with the definition, the order becomes more useful because you'll be cross-referencing between the definition and live data.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneActivityVariantDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneActivityVariantDefinition>(data);
        }

    }

    /// <summary>The definition of a category of rewards, that contains many individual rewards.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneRewardCategoryDefinition
    {
        /// <summary>Identifies the reward category. Only guaranteed unique within this specific component!</summary>
        [Newtonsoft.Json.JsonProperty("categoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryHash { get; set; }

        /// <summary>The string identifier for the category, if you want to use it for some end. Guaranteed unique within the specific component.</summary>
        [Newtonsoft.Json.JsonProperty("categoryIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryIdentifier { get; set; }

        /// <summary>Hopefully this is obvious by now.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties16 DisplayProperties { get; set; }

        /// <summary>If this milestone can provide rewards, this will define the sets of rewards that can be earned, the conditions under which they can be acquired, internal data that we'll use at runtime to determine whether you've already earned or redeemed this set of rewards, and the category that this reward should be placed under.</summary>
        [Newtonsoft.Json.JsonProperty("rewardEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyMilestoneRewardEntryDefinition> RewardEntries { get; set; }

        /// <summary>If you want to use BNet's recommended order for rendering categories programmatically, use this value and compare it to other categories to determine the order in which they should be rendered. I don't feel great about putting this here, I won't lie.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneRewardCategoryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneRewardCategoryDefinition>(data);
        }

    }

    /// <summary>The definition of a specific reward, which may be contained in a category of rewards and that has optional information about how it is obtained.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneRewardEntryDefinition
    {
        /// <summary>The identifier for this reward entry. Runtime data will refer to reward entries by this hash. Only guaranteed unique within the specific Milestone.</summary>
        [Newtonsoft.Json.JsonProperty("rewardEntryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RewardEntryHash { get; set; }

        /// <summary>The string identifier, if you care about it. Only guaranteed unique within the specific Milestone.</summary>
        [Newtonsoft.Json.JsonProperty("rewardEntryIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RewardEntryIdentifier { get; set; }

        /// <summary>The items you will get as rewards, and how much of it you'll get.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemQuantity> Items { get; set; }

        /// <summary>If this reward is redeemed at a Vendor, this is the hash of the Vendor to go to in order to redeem the reward. Use this hash to look up the DestinyVendorDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        /// <summary>For us to bother returning this info, we should be able to return some kind of information about why these rewards are grouped together. This is ideally that information. Look at how confident I am that this will always remain true.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties17 DisplayProperties { get; set; }

        /// <summary>If you want to follow BNet's ordering of these rewards, use this number within a given category to order the rewards. Yeah, I know. I feel dirty too.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneRewardEntryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneRewardEntryDefinition>(data);
        }

    }

    /// <summary>If the Milestone or a component has vendors whose inventories could/should be displayed that are relevant to it, this will return the vendor in question. 
    /// It also contains information we need to determine whether that vendor is actually relevant at the moment, given the user's current state.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneVendorDefinition
    {
        /// <summary>The hash of the vendor whose wares should be shown as associated with the Milestone.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneVendorDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneVendorDefinition>(data);
        }

    }

    /// <summary>The definition for information related to a key/value pair that is relevant for a particular Milestone or component within the Milestone. 
    /// This lets us more flexibly pass up information that's useful to someone, even if it's not necessarily us.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneValueDefinition
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneValueDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneValueDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneChallengeActivityDefinition
    {
        /// <summary>The activity for which this challenge is active.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        [Newtonsoft.Json.JsonProperty("challenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneChallengeDefinition> Challenges { get; set; }

        /// <summary>If the activity and its challenge is visible on any of these nodes, it will be returned.</summary>
        [Newtonsoft.Json.JsonProperty("activityGraphNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneChallengeActivityGraphNodeEntry> ActivityGraphNodes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneChallengeActivityDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneChallengeActivityDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneChallengeDefinition
    {
        /// <summary>The challenge related to this milestone.</summary>
        [Newtonsoft.Json.JsonProperty("challengeObjectiveHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChallengeObjectiveHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneChallengeDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneChallengeDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneChallengeActivityGraphNodeEntry
    {
        [Newtonsoft.Json.JsonProperty("activityGraphHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityGraphHash { get; set; }

        [Newtonsoft.Json.JsonProperty("activityGraphNodeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityGraphNodeHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneChallengeActivityGraphNodeEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneChallengeActivityGraphNodeEntry>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCharacterProgressionComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent>(data);
        }

    }

    /// <summary>Only really useful if you're attempting to render the character's current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you'll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.
    /// Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterRenderComponent
    {
        /// <summary>Custom dyes, calculated by iterating over the character's equipped items. Useful for pre-fetching all of the dye data needed from our server.</summary>
        [Newtonsoft.Json.JsonProperty("customDyes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DyeReference> CustomDyes { get; set; }

        /// <summary>This is actually something that Spasm.js *doesn't* do right now, and that we don't return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user's face in 3D. We'll see if we ever end up with time for that.</summary>
        [Newtonsoft.Json.JsonProperty("customization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customization Customization { get; set; }

        /// <summary>A minimal view of:
        /// - Equipped items
        /// - The rendering-related custom options on those equipped items
        /// Combined, that should be enough to render all of the items on the equipped character.</summary>
        [Newtonsoft.Json.JsonProperty("peerView", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PeerView PeerView { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterRenderComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterRenderComponent>(data);
        }

    }

    /// <summary>Raw data about the customization options chosen for a character's face and appearance.
    /// You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterCustomization
    {
        [Newtonsoft.Json.JsonProperty("personality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Personality { get; set; }

        [Newtonsoft.Json.JsonProperty("face", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Face { get; set; }

        [Newtonsoft.Json.JsonProperty("skinColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkinColor { get; set; }

        [Newtonsoft.Json.JsonProperty("lipColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LipColor { get; set; }

        [Newtonsoft.Json.JsonProperty("eyeColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EyeColor { get; set; }

        [Newtonsoft.Json.JsonProperty("hairColors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> HairColors { get; set; }

        [Newtonsoft.Json.JsonProperty("featureColors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> FeatureColors { get; set; }

        [Newtonsoft.Json.JsonProperty("decalColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecalColor { get; set; }

        [Newtonsoft.Json.JsonProperty("wearHelmet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WearHelmet { get; set; }

        [Newtonsoft.Json.JsonProperty("hairIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HairIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("featureIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeatureIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("decalIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecalIndex { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterCustomization FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterCustomization>(data);
        }

    }

    /// <summary>A minimal view of a character's equipped items, for the purpose of rendering a summary screen or showing the character in 3D.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterPeerView
    {
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemPeerView> Equipment { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterPeerView FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterPeerView>(data);
        }

    }

    /// <summary>Bare minimum summary information for an item, for the sake of 3D rendering the item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemPeerView
    {
        /// <summary>The hash identifier of the item in question. Use it to look up the DestinyInventoryItemDefinition of the item for static rendering data.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>The list of dyes that have been applied to this item.</summary>
        [Newtonsoft.Json.JsonProperty("dyes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DyeReference> Dyes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemPeerView FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemPeerView>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCharacterRenderComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent>(data);
        }

    }

    /// <summary>This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterActivitiesComponent
    {
        /// <summary>The last date that the user started playing an activity.</summary>
        [Newtonsoft.Json.JsonProperty("dateActivityStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateActivityStarted { get; set; }

        /// <summary>The list of activities that the user can play.</summary>
        [Newtonsoft.Json.JsonProperty("availableActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivity> AvailableActivities { get; set; }

        /// <summary>If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP "Activities" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.</summary>
        [Newtonsoft.Json.JsonProperty("currentActivityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentActivityHash { get; set; }

        /// <summary>If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.</summary>
        [Newtonsoft.Json.JsonProperty("currentActivityModeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentActivityModeHash { get; set; }

        /// <summary>And the current activity's most specific mode type, if it can be found.</summary>
        [Newtonsoft.Json.JsonProperty("currentActivityModeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCharacterActivitiesComponentCurrentActivityModeType? CurrentActivityModeType { get; set; }

        /// <summary>If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.</summary>
        [Newtonsoft.Json.JsonProperty("currentActivityModeHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> CurrentActivityModeHashes { get; set; }

        /// <summary>All Activity Modes that apply to the current activity being played, in enum form.</summary>
        [Newtonsoft.Json.JsonProperty("currentActivityModeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityModeType> CurrentActivityModeTypes { get; set; }

        /// <summary>If the user is in a playlist, this is the hash identifier for the playlist that they chose.</summary>
        [Newtonsoft.Json.JsonProperty("currentPlaylistActivityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentPlaylistActivityHash { get; set; }

        /// <summary>This will have the activity hash of the last completed story/campaign mission, in case you care about that.</summary>
        [Newtonsoft.Json.JsonProperty("lastCompletedStoryHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LastCompletedStoryHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterActivitiesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterActivitiesComponent>(data);
        }

    }

    /// <summary>Represents the "Live" data that we can obtain about a Character's status with a specific Activity. This will tell you whether the character can participate in the activity, as well as some other basic mutable information. 
    /// Meant to be combined with static DestinyActivityDefinition data for a full picture of the Activity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivity
    {
        /// <summary>The hash identifier of the Activity. Use this to look up the DestinyActivityDefinition of the activity.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>If true, then the activity should have a "new" indicator in the Director UI.</summary>
        [Newtonsoft.Json.JsonProperty("isNew", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNew { get; set; }

        /// <summary>If true, the user is allowed to lead a Fireteam into this activity.</summary>
        [Newtonsoft.Json.JsonProperty("canLead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanLead { get; set; }

        /// <summary>If true, the user is allowed to join with another Fireteam in this activity.</summary>
        [Newtonsoft.Json.JsonProperty("canJoin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanJoin { get; set; }

        /// <summary>If true, we both have the ability to know that the user has completed this activity and they have completed it. Unfortunately, we can't necessarily know this for all activities. As such, this should probably only be used if you already know in advance which specific activities you wish to check.</summary>
        [Newtonsoft.Json.JsonProperty("isCompleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCompleted { get; set; }

        /// <summary>If true, the user should be able to see this activity.</summary>
        [Newtonsoft.Json.JsonProperty("isVisible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVisible { get; set; }

        /// <summary>The difficulty level of the activity, if applicable.</summary>
        [Newtonsoft.Json.JsonProperty("displayLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayLevel { get; set; }

        /// <summary>The recommended light level for the activity, if applicable.</summary>
        [Newtonsoft.Json.JsonProperty("recommendedLight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecommendedLight { get; set; }

        /// <summary>A DestinyActivityDifficultyTier enum value indicating the difficulty of the activity.</summary>
        [Newtonsoft.Json.JsonProperty("difficultyTier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DifficultyTier DifficultyTier { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivity>(data);
        }

    }

    /// <summary>An enumeration representing the potential difficulty levels of an activity. Their names are... more qualitative than quantitative.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyActivityDifficultyTier
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCharacterActivitiesComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyKiosksComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyKiosksComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyKiosksComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyKiosksComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyPlugSetsComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyBaseItemComponentSetOfuint32
    {
        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent Objectives { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyBaseItemComponentSetOfuint32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyBaseItemComponentSetOfuint32>(data);
        }

    }

    /// <summary>Items can have objectives and progression. When you request this block, you will obtain information about any Objectives and progression tied to this item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemObjectivesComponent
    {
        /// <summary>If the item has a hard association with objectives, your progress on them will be defined here. 
        /// Objectives are our standard way to describe a series of tasks that have to be completed for a reward.</summary>
        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyObjectiveProgress> Objectives { get; set; }

        /// <summary>I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for "flavor" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.</summary>
        [Newtonsoft.Json.JsonProperty("flavorObjective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlavorObjective2 FlavorObjective { get; set; }

        /// <summary>If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information.</summary>
        [Newtonsoft.Json.JsonProperty("dateCompleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCompleted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemObjectivesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemObjectivesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemObjectivesComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyPresentationNodesComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterRecordsComponent
    {
        [Newtonsoft.Json.JsonProperty("featuredRecordHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> FeaturedRecordHashes { get; set; }

        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyRecordComponent> Records { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterRecordsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterRecordsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCharacterRecordsComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCollectiblesComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyBaseItemComponentSetOfint64
    {
        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent Objectives { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyBaseItemComponentSetOfint64 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyBaseItemComponentSetOfint64>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemObjectivesComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemComponentSetOfint64
    {
        [Newtonsoft.Json.JsonProperty("instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent Instances { get; set; }

        [Newtonsoft.Json.JsonProperty("perks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint64AndDestinyItemPerksComponent Perks { get; set; }

        [Newtonsoft.Json.JsonProperty("renderData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint64AndDestinyItemRenderComponent RenderData { get; set; }

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint64AndDestinyItemStatsComponent Stats { get; set; }

        [Newtonsoft.Json.JsonProperty("sockets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent Sockets { get; set; }

        [Newtonsoft.Json.JsonProperty("talentGrids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent TalentGrids { get; set; }

        [Newtonsoft.Json.JsonProperty("plugStates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent PlugStates { get; set; }

        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent Objectives { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemComponentSetOfint64 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemComponentSetOfint64>(data);
        }

    }

    /// <summary>If an item is "instanced", this will contain information about the item's instance that doesn't fit easily into other components. One might say this is the "essential" instance data for the item.
    /// Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.
    /// You can tell from an item's definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition's definition.inventory.isInstanceItem property.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemInstanceComponent
    {
        /// <summary>If the item has a damage type, this is the item's current damage type.</summary>
        [Newtonsoft.Json.JsonProperty("damageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DamageType4 DamageType { get; set; }

        /// <summary>The current damage type's hash, so you can look up localized info and icons for it.</summary>
        [Newtonsoft.Json.JsonProperty("damageTypeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DamageTypeHash { get; set; }

        /// <summary>The item stat that we consider to be "primary" for the item. For instance, this would be "Attack" for Weapons or "Defense" for armor.</summary>
        [Newtonsoft.Json.JsonProperty("primaryStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryStat PrimaryStat { get; set; }

        /// <summary>The Item's "Level" has the most significant bearing on its stats, such as Light and Power.</summary>
        [Newtonsoft.Json.JsonProperty("itemLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemLevel { get; set; }

        /// <summary>The "Quality" of the item has a lesser - but still impactful - bearing on stats like Light and Power.</summary>
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quality { get; set; }

        /// <summary>Is the item currently equipped on the given character?</summary>
        [Newtonsoft.Json.JsonProperty("isEquipped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEquipped { get; set; }

        /// <summary>If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.</summary>
        [Newtonsoft.Json.JsonProperty("canEquip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanEquip { get; set; }

        /// <summary>If the item cannot be equipped until you reach a certain level, that level will be reflected here.</summary>
        [Newtonsoft.Json.JsonProperty("equipRequiredLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EquipRequiredLevel { get; set; }

        /// <summary>Sometimes, there are limitations to equipping that are represented by character-level flags called "unlocks".
        /// This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.</summary>
        [Newtonsoft.Json.JsonProperty("unlockHashesRequiredToEquip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> UnlockHashesRequiredToEquip { get; set; }

        /// <summary>If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.</summary>
        [Newtonsoft.Json.JsonProperty("cannotEquipReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CannotEquipReason CannotEquipReason { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemInstanceComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemInstanceComponent>(data);
        }

    }

    /// <summary>Represents a stat on an item *or* Character (NOT a Historical Stat, but a physical attribute stat like Attack, Defense etc...)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyStat
    {
        /// <summary>The hash identifier for the Stat. Use it to look up the DestinyStatDefinition for static data about the stat.</summary>
        [Newtonsoft.Json.JsonProperty("statHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatHash { get; set; }

        /// <summary>The current value of the Stat.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }

        /// <summary>The highest possible value for the stat, if we were able to compute it. (I wouldn't necessarily trust this value right now. I would like to improve its calculation in later iterations of the API. Consider this a placeholder for desired future functionality)</summary>
        [Newtonsoft.Json.JsonProperty("maximumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumValue { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyStat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyStat>(data);
        }

    }

    /// <summary>The reasons why an item cannot be equipped, if any. Many flags can be set, or "None" if</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum EquipFailureReason
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

    }

    /// <summary>Unlock Flags are small bits (literally, a bit, as in a boolean value) that the game server uses for an extremely wide range of state checks, progress storage, and other interesting tidbits of information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyUnlockDefinition
    {
        /// <summary>Sometimes, but not frequently, these unlock flags also have human readable information: usually when they are being directly tested for some requirement, in which case the string is a localized description of why the requirement check failed.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties18 DisplayProperties { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyUnlockDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyUnlockDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemInstanceComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent>(data);
        }

    }

    /// <summary>Instanced items can have perks: benefits that the item bestows.
    /// These are related to DestinySandboxPerkDefinition, and sometimes - but not always - have human readable info. When they do, they are the icons and text that you see in an item's tooltip.
    /// Talent Grids, Sockets, and the item itself can apply Perks, which are then summarized here for your convenience.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemPerksComponent
    {
        /// <summary>The list of perks to display in an item tooltip - and whether or not they have been activated.</summary>
        [Newtonsoft.Json.JsonProperty("perks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPerkReference> Perks { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemPerksComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemPerksComponent>(data);
        }

    }

    /// <summary>The list of perks to display in an item tooltip - and whether or not they have been activated.
    /// Perks apply a variety of effects to a character, and are generally either intrinsic to the item or provided in activated talent nodes or sockets.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPerkReference
    {
        /// <summary>The hash identifier for the perk, which can be used to look up DestinySandboxPerkDefinition if it exists. Be warned, perks frequently do not have user-viewable information. You should examine whether you actually found a name/description in the perk's definition before you show it to the user.</summary>
        [Newtonsoft.Json.JsonProperty("perkHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PerkHash { get; set; }

        /// <summary>The icon for the perk.</summary>
        [Newtonsoft.Json.JsonProperty("iconPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconPath { get; set; }

        /// <summary>Whether this perk is currently active. (We may return perks that you have not actually activated yet: these represent perks that you should show in the item's tooltip, but that the user has not yet activated.)</summary>
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

        /// <summary>Some perks provide benefits, but aren't visible in the UI. This value will let you know if this is perk should be shown in your UI.</summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPerkReference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPerkReference>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyItemPerksComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemPerksComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyItemPerksComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyItemPerksComponent>(data);
        }

    }

    /// <summary>Many items can be rendered in 3D. When you request this block, you will obtain the custom data needed to render this specific instance of the item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemRenderComponent
    {
        /// <summary>If you should use custom dyes on this item, it will be indicated here.</summary>
        [Newtonsoft.Json.JsonProperty("useCustomDyes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseCustomDyes { get; set; }

        /// <summary>A dictionary for rendering gear components, with:
        /// key = Art Arrangement Region Index
        /// value = The chosen Arrangement Index for the Region, based on the value of a stat on the item used for making the choice.</summary>
        [Newtonsoft.Json.JsonProperty("artRegions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, int> ArtRegions { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemRenderComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemRenderComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyItemRenderComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemRenderComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyItemRenderComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyItemRenderComponent>(data);
        }

    }

    /// <summary>If you want the stats on an item's instanced data, get this component.
    /// These are stats like Attack, Defense etc... and *not* historical stats.
    /// Note that some stats have additional computation in-game at runtime - for instance, Magazine Size - and thus these stats might not be 100% accurate compared to what you see in-game for some stats. I know, it sucks. I hate it too.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemStatsComponent
    {
        /// <summary>If the item has stats that it provides (damage, defense, etc...), it will be given here.</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyStat> Stats { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemStatsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemStatsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyItemStatsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemStatsComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyItemStatsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyItemStatsComponent>(data);
        }

    }

    /// <summary>Instanced items can have sockets, which are slots on the item where plugs can be inserted.
    /// Sockets are a bit complex: be sure to examine the documentation on the DestinyInventoryItemDefinition's "socket" block and elsewhere on these objects for more details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSocketsComponent
    {
        /// <summary>The list of all sockets on the item, and their status information.</summary>
        [Newtonsoft.Json.JsonProperty("sockets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemSocketState> Sockets { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSocketsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSocketsComponent>(data);
        }

    }

    /// <summary>The status of a given item's socket. (which plug is inserted, if any: whether it is enabled, what "reusable" plugs can be inserted, etc...)
    /// If I had it to do over, this would probably have a DestinyItemPlug representing the inserted item instead of most of these properties. :shrug:</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSocketState
    {
        /// <summary>The currently active plug, if any.
        /// Note that, because all plugs are statically defined, its effect on stats and perks can be statically determined using the plug item's definition. The stats and perks can be taken at face value on the plug item as the stats and perks it will provide to the user/item.</summary>
        [Newtonsoft.Json.JsonProperty("plugHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugHash { get; set; }

        /// <summary>Even if a plug is inserted, it doesn't mean it's enabled.
        /// This flag indicates whether the plug is active and providing its benefits.</summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        /// <summary>A plug may theoretically provide benefits but not be visible - for instance, some older items use a plug's damage type perk to modify their own damage type. These, though they are not visible, still affect the item. This field indicates that state.
        /// An invisible plug, while it provides benefits if it is Enabled, cannot be directly modified by the user.</summary>
        [Newtonsoft.Json.JsonProperty("isVisible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVisible { get; set; }

        /// <summary>If a plug is inserted but not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.</summary>
        [Newtonsoft.Json.JsonProperty("enableFailIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> EnableFailIndexes { get; set; }

        /// <summary>If the item supports reusable plugs, this is the list of plug item hashes that are currently allowed to be used for this socket. See the "reusablePlugs" property, which has rendered this obsolete, for more information.</summary>
        [Newtonsoft.Json.JsonProperty("reusablePlugHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ReusablePlugHashes { get; set; }

        /// <summary>Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.</summary>
        [Newtonsoft.Json.JsonProperty("plugObjectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyObjectiveProgress> PlugObjectives { get; set; }

        /// <summary>If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are "enabled", whether they are allowed to be inserted, and any other information such as objectives.
        /// A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn't been completed yet.
        /// In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.</summary>
        [Newtonsoft.Json.JsonProperty("reusablePlugs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemPlug> ReusablePlugs { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSocketState FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSocketState>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemSocketsComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent>(data);
        }

    }

    /// <summary>Well, we're here in Destiny 2, and Talent Grids are unfortunately still around.
    /// The good news is that they're pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.
    /// An important note is that talent grids are defined as such:
    /// A Grid has 1:M Nodes, which has 1:M Steps.
    /// Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a "Super Cool Bonus" node, the actual icon and text for the node is coming from the current Step of that node).
    /// Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).
    /// See DestinyTalentGridDefinition for more information. Brace yourself, the water's cold out there in the deep end.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemTalentGridComponent
    {
        /// <summary>Most items don't have useful talent grids anymore, but Builds in particular still do.
        /// You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.</summary>
        [Newtonsoft.Json.JsonProperty("talentGridHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TalentGridHash { get; set; }

        /// <summary>Detailed information about the individual nodes in the talent grid.
        /// A node represents a single visual "pip" in the talent grid or Build detail view, though each node may have multiple "steps" which indicate the actual bonuses and visual representation of that node.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyTalentNode> Nodes { get; set; }

        /// <summary>Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.
        /// Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)</summary>
        [Newtonsoft.Json.JsonProperty("isGridComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGridComplete { get; set; }

        /// <summary>If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.</summary>
        [Newtonsoft.Json.JsonProperty("gridProgression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridProgression GridProgression { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemTalentGridComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemTalentGridComponent>(data);
        }

    }

    /// <summary>I see you've come to find out more about Talent Nodes. I'm so sorry. Talent Nodes are the conceptual, visual nodes that appear on Talent Grids. Talent Grids, in Destiny 1, were found on almost every instanced item: they had Nodes that could be activated to change the properties of the item. In Destiny 2, Talent Grids only exist for Builds/Subclasses, and while the basic concept is the same (Nodes can be activated once you've gained sufficient Experience on the Item, and provide effects), there are some new concepts from Destiny 1. Examine DestinyTalentGridDefinition and its subordinates for more information. This is the "Live" information for the current status of a Talent Node on a specific item. Talent Nodes have many Steps, but only one can be active at any one time: and it is the Step that determines both the visual and the game state-changing properties that the Node provides. Examine this and DestinyTalentNodeStepDefinition carefully. *IMPORTANT NOTE* Talent Nodes are, unfortunately, Content Version DEPENDENT. Though they refer to hashes for Nodes and Steps, those hashes are not guaranteed to be immutable across content versions. This is a source of great exasperation for me, but as a result anyone using Talent Grid data must ensure that the content version of their static content matches that of the server responses before showing or making decisions based on talent grid data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyTalentNode
    {
        /// <summary>The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]). CONTENT VERSION DEPENDENT.</summary>
        [Newtonsoft.Json.JsonProperty("nodeIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeIndex { get; set; }

        /// <summary>The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes). Deceptively CONTENT VERSION DEPENDENT. We have no guarantee of the hash's immutability between content versions.</summary>
        [Newtonsoft.Json.JsonProperty("nodeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeHash { get; set; }

        /// <summary>An DestinyTalentNodeState enum value indicating the node's state: whether it can be activated or swapped, and why not if neither can be performed.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public State2 State { get; set; }

        /// <summary>If true, the node is activated: it's current step then provides its benefits.</summary>
        [Newtonsoft.Json.JsonProperty("isActivated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActivated { get; set; }

        /// <summary>The currently relevant Step for the node. It is this step that has rendering data for the node and the benefits that are provided if the node is activated. (the actual rules for benefits provided are extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worry about a lot of those old Destiny 1 rules.) This is an index into: DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]</summary>
        [Newtonsoft.Json.JsonProperty("stepIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StepIndex { get; set; }

        /// <summary>If the node has material requirements to be activated, this is the list of those requirements.</summary>
        [Newtonsoft.Json.JsonProperty("materialsToUpgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMaterialRequirement> MaterialsToUpgrade { get; set; }

        /// <summary>The progression level required on the Talent Grid in order to be able to activate this talent node. Talent Grids have their own Progression - similar to Character Level, but in this case it is experience related to the item itself.</summary>
        [Newtonsoft.Json.JsonProperty("activationGridLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivationGridLevel { get; set; }

        /// <summary>If you want to show a progress bar or circle for how close this talent node is to being activate-able, this is the percentage to show. It follows the node's underlying rules about when the progress bar should first show up, and when it should be filled.</summary>
        [Newtonsoft.Json.JsonProperty("progressPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProgressPercent { get; set; }

        /// <summary>Whether or not the talent node is actually visible in the game's UI. Whether you want to show it in your own UI is up to you! I'm not gonna tell you who to sock it to.</summary>
        [Newtonsoft.Json.JsonProperty("hidden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hidden { get; set; }

        /// <summary>This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.</summary>
        [Newtonsoft.Json.JsonProperty("nodeStatsBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NodeStatsBlock NodeStatsBlock { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyTalentNode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyTalentNode>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyTalentNodeState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

    }

    /// <summary>This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyTalentNodeStatBlock
    {
        /// <summary>The stat benefits conferred when this talent node is activated for the current Step that is active on the node.</summary>
        [Newtonsoft.Json.JsonProperty("currentStepStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyStat> CurrentStepStats { get; set; }

        /// <summary>This is a holdover from the old days of Destiny 1, when a node could be activated multiple times, conferring multiple steps worth of benefits: you would use this property to show what activating the "next" step on the node would provide vs. what the current step is providing. While Nodes are currently not being used this way, the underlying system for this functionality still exists. I hesitate to remove this property while the ability for designers to make such a talent grid still exists. Whether you want to show it is up to you.</summary>
        [Newtonsoft.Json.JsonProperty("nextStepStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyStat> NextStepStats { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyTalentNodeStatBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyTalentNodeStatBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemTalentGridComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent>(data);
        }

    }

    /// <summary>Plugs are non-instanced items that can provide Stat and Perk benefits when socketed into an instanced item. Items have Sockets, and Plugs are inserted into Sockets.
    /// This component finds all items that are considered "Plugs" in your inventory, and return information about the plug aside from any specific Socket into which it could be inserted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemPlugComponent
    {
        /// <summary>The hash identifier of the DestinyInventoryItemDefinition that represents this plug.</summary>
        [Newtonsoft.Json.JsonProperty("plugItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugItemHash { get; set; }

        /// <summary>Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the "gating" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.</summary>
        [Newtonsoft.Json.JsonProperty("plugObjectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyObjectiveProgress> PlugObjectives { get; set; }

        /// <summary>If true, this plug has met all of its insertion requirements. Big if true.</summary>
        [Newtonsoft.Json.JsonProperty("canInsert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanInsert { get; set; }

        /// <summary>If true, this plug will provide its benefits while inserted.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
        /// This list will be empty if the plug can be inserted.</summary>
        [Newtonsoft.Json.JsonProperty("insertFailIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> InsertFailIndexes { get; set; }

        /// <summary>If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
        /// This list will be empty if the plug is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("enableFailIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> EnableFailIndexes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemPlugComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemPlugComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemPlugComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent>(data);
        }

    }

    /// <summary>This component provides a quick lookup of every item the requested character has and how much of that item they have.
    /// Requesting this component will allow you to circumvent manually putting together the list of which currencies you have for the purpose of testing currency requirements on an item being purchased, or operations that have costs.
    /// You *could* figure this out yourself by doing a GetCharacter or GetProfile request and forming your own lookup table, but that is inconvenient enough that this feels like a worthwhile (and optional) redundency. Don't bother requesting it if you have already created your own lookup from prior GetCharacter/GetProfile calls.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCurrenciesComponent
    {
        /// <summary>A dictionary - keyed by the item's hash identifier (DestinyInventoryItemDefinition), and whose value is the amount of that item you have across all available inventory buckets for purchasing.
        /// This allows you to see whether the requesting character can afford any given purchase/action without having to re-create this list itself.</summary>
        [Newtonsoft.Json.JsonProperty("itemQuantities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, int> ItemQuantities { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCurrenciesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCurrenciesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyCurrenciesComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent>(data);
        }

    }

    /// <summary>The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterResponse
    {
        /// <summary>The character-level non-equipped inventory items.
        /// COMPONENT TYPE: CharacterInventories</summary>
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inventory2 Inventory { get; set; }

        /// <summary>Base information about the character in question.
        /// COMPONENT TYPE: Characters</summary>
        [Newtonsoft.Json.JsonProperty("character", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Character Character { get; set; }

        /// <summary>Character progression data, including Milestones.
        /// COMPONENT TYPE: CharacterProgressions</summary>
        [Newtonsoft.Json.JsonProperty("progressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Progressions Progressions { get; set; }

        /// <summary>Character rendering data - a minimal set of information about equipment and dyes used for rendering.
        /// COMPONENT TYPE: CharacterRenderData</summary>
        [Newtonsoft.Json.JsonProperty("renderData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RenderData RenderData { get; set; }

        /// <summary>Activity data - info about current activities available to the player.
        /// COMPONENT TYPE: CharacterActivities</summary>
        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Activities Activities { get; set; }

        /// <summary>Equipped items on the character.
        /// COMPONENT TYPE: CharacterEquipment</summary>
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Equipment Equipment { get; set; }

        /// <summary>Items available from Kiosks that are available to this specific character. 
        /// COMPONENT TYPE: Kiosks</summary>
        [Newtonsoft.Json.JsonProperty("kiosks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Kiosks Kiosks { get; set; }

        /// <summary>When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.
        /// This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
        /// COMPONENT TYPE: ItemSockets</summary>
        [Newtonsoft.Json.JsonProperty("plugSets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlugSets PlugSets { get; set; }

        /// <summary>COMPONENT TYPE: PresentationNodes</summary>
        [Newtonsoft.Json.JsonProperty("presentationNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PresentationNodes PresentationNodes { get; set; }

        /// <summary>COMPONENT TYPE: Records</summary>
        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Records Records { get; set; }

        /// <summary>COMPONENT TYPE: Collectibles</summary>
        [Newtonsoft.Json.JsonProperty("collectibles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Collectibles Collectibles { get; set; }

        /// <summary>The set of components belonging to the player's instanced items.
        /// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</summary>
        [Newtonsoft.Json.JsonProperty("itemComponents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemComponents2 ItemComponents { get; set; }

        /// <summary>The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.
        /// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</summary>
        [Newtonsoft.Json.JsonProperty("uninstancedItemComponents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UninstancedItemComponents UninstancedItemComponents { get; set; }

        /// <summary>A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
        /// COMPONENT TYPE: CurrencyLookups</summary>
        [Newtonsoft.Json.JsonProperty("currencyLookups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyLookups CurrencyLookups { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyCharacterComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCharacterComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyCharacterComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyCharacterComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyCharacterProgressionComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCharacterProgressionComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyCharacterProgressionComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyCharacterProgressionComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyCharacterRenderComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCharacterRenderComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyCharacterRenderComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyCharacterRenderComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyCharacterActivitiesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCharacterActivitiesComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyCharacterActivitiesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyCharacterActivitiesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyCharacterRecordsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCharacterRecordsComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyCharacterRecordsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyCharacterRecordsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyCollectiblesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCollectiblesComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyCollectiblesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyCollectiblesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyCurrenciesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCurrenciesComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyCurrenciesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyCurrenciesComponent>(data);
        }

    }

    /// <summary>The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemResponse
    {
        /// <summary>If the item is on a character, this will return the ID of the character that is holding the item.</summary>
        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        /// <summary>Common data for the item relevant to its non-instanced properties.
        /// COMPONENT TYPE: ItemCommonData</summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Item Item { get; set; }

        /// <summary>Basic instance data for the item.
        /// COMPONENT TYPE: ItemInstances</summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Instance Instance { get; set; }

        /// <summary>Information specifically about the item's objectives.
        /// COMPONENT TYPE: ItemObjectives</summary>
        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Objectives2 Objectives { get; set; }

        /// <summary>Information specifically about the perks currently active on the item.
        /// COMPONENT TYPE: ItemPerks</summary>
        [Newtonsoft.Json.JsonProperty("perks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perks2 Perks { get; set; }

        /// <summary>Information about how to render the item in 3D.
        /// COMPONENT TYPE: ItemRenderData</summary>
        [Newtonsoft.Json.JsonProperty("renderData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RenderData2 RenderData { get; set; }

        /// <summary>Information about the computed stats of the item: power, defense, etc...
        /// COMPONENT TYPE: ItemStats</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats3 Stats { get; set; }

        /// <summary>Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's "Builds".
        /// COMPONENT TYPE: ItemTalentGrids</summary>
        [Newtonsoft.Json.JsonProperty("talentGrid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TalentGrid2 TalentGrid { get; set; }

        /// <summary>Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.
        /// COMPONENT TYPE: ItemSockets</summary>
        [Newtonsoft.Json.JsonProperty("sockets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sockets2 Sockets { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyItemComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyItemComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyItemComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyItemInstanceComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemInstanceComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyItemInstanceComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyItemInstanceComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyItemObjectivesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemObjectivesComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyItemObjectivesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyItemObjectivesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyItemPerksComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemPerksComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyItemPerksComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyItemPerksComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyItemRenderComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemRenderComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyItemRenderComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyItemRenderComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyItemStatsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemStatsComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyItemStatsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyItemStatsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyItemTalentGridComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemTalentGridComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyItemTalentGridComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyItemTalentGridComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyItemSocketsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemSocketsComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyItemSocketsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyItemSocketsComponent>(data);
        }

    }

    /// <summary>A response containing all of the components for all requested vendors.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorsResponse
    {
        /// <summary>For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.
        /// COMPONENT TYPE: Vendors</summary>
        [Newtonsoft.Json.JsonProperty("vendorGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VendorGroups VendorGroups { get; set; }

        /// <summary>The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.
        /// COMPONENT TYPE: Vendors</summary>
        [Newtonsoft.Json.JsonProperty("vendors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vendors Vendors { get; set; }

        /// <summary>Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.
        /// COMPONENT TYPE: VendorCategories</summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Categories Categories { get; set; }

        /// <summary>Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.
        /// Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.
        /// COMPONENT TYPE: VendorSales</summary>
        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sales Sales { get; set; }

        /// <summary>The set of item detail components, one set of item components per Vendor. These are keyed by the Vendor Hash, so you will get one Item Component Set per vendor returned.
        /// The components contained inside are themselves keyed by the vendorSaleIndex, and will have whatever item-level components you requested (Sockets, Stats, Instance data etc...) per item being sold by the vendor.</summary>
        [Newtonsoft.Json.JsonProperty("itemComponents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemComponentSetOfint32> ItemComponents { get; set; }

        /// <summary>A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
        /// COMPONENT TYPE: CurrencyLookups</summary>
        [Newtonsoft.Json.JsonProperty("currencyLookups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyLookups2 CurrencyLookups { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorsResponse>(data);
        }

    }

    /// <summary>This component returns references to all of the Vendors in the response, grouped by categorizations that Bungie has deemed to be interesting, in the order in which both the groups and the vendors within that group should be rendered.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorGroupComponent
    {
        /// <summary>The ordered list of groups being returned.</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorGroup> Groups { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorGroupComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorGroupComponent>(data);
        }

    }

    /// <summary>Represents a specific group of vendors that can be rendered in the recommended order.
    /// How do we figure out this order? It's a long story, and will likely get more complicated over time.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorGroup
    {
        [Newtonsoft.Json.JsonProperty("vendorGroupHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorGroupHash { get; set; }

        /// <summary>The ordered list of vendors within a particular group.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> VendorHashes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorGroup>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyVendorGroupComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyVendorGroupComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyVendorGroupComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyVendorGroupComponent>(data);
        }

    }

    /// <summary>This component contains essential/summary information about the vendor.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorComponent
    {
        /// <summary>The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        /// <summary>The date when this vendor's inventory will next rotate/refresh.
        /// Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.
        /// Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.</summary>
        [Newtonsoft.Json.JsonProperty("nextRefreshDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? NextRefreshDate { get; set; }

        /// <summary>If True, the Vendor is currently accessible. 
        /// If False, they may not actually be visible in the world at the moment.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>If True, you can purchase from the Vendor.
        /// Theoretically, Vendors can be restricted from selling items. In practice, none do that (yet?).</summary>
        [Newtonsoft.Json.JsonProperty("canPurchase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanPurchase { get; set; }

        /// <summary>If the Vendor has a related Reputation, this is the Progression data that represents the character's Reputation level with this Vendor.</summary>
        [Newtonsoft.Json.JsonProperty("progression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Progression Progression { get; set; }

        /// <summary>An index into the vendor definition's "locations" property array, indicating which location they are at currently. If -1, then the vendor has no known location (and you may choose not to show them in your UI as a result. I mean, it's your bag honey)</summary>
        [Newtonsoft.Json.JsonProperty("vendorLocationIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorLocationIndex { get; set; }

        /// <summary>If this vendor has a seasonal rank, this will be the calculated value of that rank. How nice is that? I mean, that's pretty sweeet. It's a whole 32 bit integer.</summary>
        [Newtonsoft.Json.JsonProperty("seasonalRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeasonalRank { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyVendorComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyVendorComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyVendorComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyVendorComponent>(data);
        }

    }

    /// <summary>A vendor can have many categories of items that they sell. This component will return the category information for available items, as well as the index into those items in the user's sale item list.
    /// Note that, since both the category and items are indexes, this data is Content Version dependent. Be sure to check that your content is up to date before using this data. This is an unfortunate, but permanent, limitation of Vendor data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorCategoriesComponent
    {
        /// <summary>The list of categories for items that the vendor sells, in rendering order.
        /// These categories each point to a "display category" in the displayCategories property of the DestinyVendorDefinition, as opposed to the other categories.</summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyVendorCategory> Categories { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorCategoriesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorCategoriesComponent>(data);
        }

    }

    /// <summary>Information about the category and items currently sold in that category.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorCategory
    {
        /// <summary>An index into the DestinyVendorDefinition.displayCategories property, so you can grab the display data for this category.</summary>
        [Newtonsoft.Json.JsonProperty("displayCategoryIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayCategoryIndex { get; set; }

        /// <summary>An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned.</summary>
        [Newtonsoft.Json.JsonProperty("itemIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ItemIndexes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorCategory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorCategory>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyVendorCategoriesComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent>(data);
        }

    }

    /// <summary>The collection of all items currently being sold by a specific Vendor and visible to the given character for which the request was made.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorSaleItemSetComponent
    {
        /// <summary>The items being sold by this vendor, keyed by the vendorItemIndex of the item being sold. (because showing sale items depends on the ordering dictated by the categories being shown - see DestinyVendorCategoryComponent - this is a dictionary for quick lookup capability.)</summary>
        [Newtonsoft.Json.JsonProperty("saleItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyVendorSaleItemComponent> SaleItems { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorSaleItemSetComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorSaleItemSetComponent>(data);
        }

    }

    /// <summary>Request this component if you want the details about an item being sold in relation to the character making the request: whether the character can buy it, whether they can afford it, and other data related to purchasing the item.
    /// Note that if you want instance, stats, etc... data for the item, you'll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse's "items" property.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorSaleItemComponent
    {
        /// <summary>The index into the DestinyVendorDefinition.itemList property. Note that this means Vendor data *is* Content Version dependent: make sure you have the latest content before you use Vendor data, or these indexes may mismatch. 
        /// Most systems avoid this problem, but Vendors is one area where we are unable to reasonably avoid content dependency at the moment.</summary>
        [Newtonsoft.Json.JsonProperty("vendorItemIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorItemIndex { get; set; }

        /// <summary>The hash of the item being sold, as a quick shortcut for looking up the DestinyInventoryItemDefinition of the sale item.</summary>
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        /// <summary>If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
        /// If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.</summary>
        [Newtonsoft.Json.JsonProperty("overrideStyleItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverrideStyleItemHash { get; set; }

        /// <summary>How much of the item you'll be getting.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>A flag indicating whether the requesting character can buy the item, and if not the reasons why the character can't buy it.</summary>
        [Newtonsoft.Json.JsonProperty("saleStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SaleStatus SaleStatus { get; set; }

        /// <summary>A summary of the current costs of the item.</summary>
        [Newtonsoft.Json.JsonProperty("costs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemQuantity> Costs { get; set; }

        /// <summary>If you can't buy the item due to a complex character state, these will be hashes for DestinyUnlockDefinitions that you can check to see messages regarding the failure (if the unlocks have human readable information: it is not guaranteed that Unlocks will have human readable strings, and your application will have to handle that)
        /// Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.</summary>
        [Newtonsoft.Json.JsonProperty("requiredUnlocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> RequiredUnlocks { get; set; }

        /// <summary>If any complex unlock states are checked in determining purchasability, these will be returned here along with the status of the unlock check.
        /// Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.</summary>
        [Newtonsoft.Json.JsonProperty("unlockStatuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyUnlockStatus> UnlockStatuses { get; set; }

        /// <summary>Indexes in to the "failureStrings" lookup table in DestinyVendorDefinition for the given Vendor. Gives some more reliable failure information for why you can't purchase an item.
        /// It is preferred to use these over requiredUnlocks and unlockStatuses: the latter are provided mostly in case someone can do something interesting with it that I didn't anticipate.</summary>
        [Newtonsoft.Json.JsonProperty("failureIndexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> FailureIndexes { get; set; }

        /// <summary>A flags enumeration value representing the current state of any "state modifiers" on the item being sold. These are meant to correspond with some sort of visual indicator as to the augmentation: for instance, if an item is on sale or if you already own the item in question.
        /// Determining how you want to represent these in your own app (or if you even want to) is an exercise left for the reader.</summary>
        [Newtonsoft.Json.JsonProperty("augments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Augments Augments { get; set; }

        /// <summary>If this item has its own custom date where it may be removed from the Vendor's rotation, this is that date.
        /// Note that there's not actually any guarantee that it will go away: it could be chosen again and end up still being in the Vendor's sale items! But this is the next date where that test will occur, and is also the date that the game shows for availability on things like Bounties being sold. So it's the best we can give.</summary>
        [Newtonsoft.Json.JsonProperty("overrideNextRefreshDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? OverrideNextRefreshDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorSaleItemComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorSaleItemComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum VendorItemStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

        _256 = 256,

        _512 = 512,

        _1024 = 1024,

        _2048 = 2048,

        _4096 = 4096,

        _8192 = 8192,

    }

    /// <summary>Indicates the status of an "Unlock Flag" on a Character or Profile.
    /// These are individual bits of state that can be either set or not set, and sometimes provide interesting human-readable information in their related DestinyUnlockDefinition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyUnlockStatus
    {
        /// <summary>The hash identifier for the Unlock Flag. Use to lookup DestinyUnlockDefinition for static data. Not all unlocks have human readable data - in fact, most don't. But when they do, it can be very useful to show. Even if they don't have human readable data, you might be able to infer the meaning of an unlock flag with a bit of experimentation...</summary>
        [Newtonsoft.Json.JsonProperty("unlockHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnlockHash { get; set; }

        /// <summary>Whether the unlock flag is set.</summary>
        [Newtonsoft.Json.JsonProperty("isSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSet { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyUnlockStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyUnlockStatus>(data);
        }

    }

    /// <summary>The possible states of Destiny Profile Records. IMPORTANT: Any given item can theoretically have many of these states simultaneously: as a result, this was altered to be a flags enumeration for v3.2.0.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyVendorItemState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

        _256 = 256,

        _512 = 512,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyVendorSaleItemSetComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyVendorSaleItemSetComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyVendorSaleItemSetComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyVendorSaleItemSetComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyBaseItemComponentSetOfint32
    {
        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent Objectives { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyBaseItemComponentSetOfint32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyBaseItemComponentSetOfint32>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemObjectivesComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemComponentSetOfint32
    {
        [Newtonsoft.Json.JsonProperty("instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint32AndDestinyItemInstanceComponent Instances { get; set; }

        [Newtonsoft.Json.JsonProperty("perks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint32AndDestinyItemPerksComponent Perks { get; set; }

        [Newtonsoft.Json.JsonProperty("renderData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint32AndDestinyItemRenderComponent RenderData { get; set; }

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint32AndDestinyItemStatsComponent Stats { get; set; }

        [Newtonsoft.Json.JsonProperty("sockets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint32AndDestinyItemSocketsComponent Sockets { get; set; }

        [Newtonsoft.Json.JsonProperty("talentGrids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent TalentGrids { get; set; }

        [Newtonsoft.Json.JsonProperty("plugStates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent PlugStates { get; set; }

        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent Objectives { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemComponentSetOfint32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemComponentSetOfint32>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint32AndDestinyItemInstanceComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemInstanceComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint32AndDestinyItemInstanceComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint32AndDestinyItemInstanceComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint32AndDestinyItemPerksComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemPerksComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint32AndDestinyItemPerksComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint32AndDestinyItemPerksComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint32AndDestinyItemRenderComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemRenderComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint32AndDestinyItemRenderComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint32AndDestinyItemRenderComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint32AndDestinyItemStatsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemStatsComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint32AndDestinyItemStatsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint32AndDestinyItemStatsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint32AndDestinyItemSocketsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemSocketsComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint32AndDestinyItemSocketsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint32AndDestinyItemSocketsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemTalentGridComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent>(data);
        }

    }

    /// <summary>A response containing all of the components for a vendor.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyVendorResponse
    {
        /// <summary>The base properties of the vendor.
        /// COMPONENT TYPE: Vendors</summary>
        [Newtonsoft.Json.JsonProperty("vendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vendor Vendor { get; set; }

        /// <summary>Categories that the vendor has available, and references to the sales therein.
        /// COMPONENT TYPE: VendorCategories</summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Categories2 Categories { get; set; }

        /// <summary>Sales, keyed by the vendorItemIndex of the item being sold.
        /// COMPONENT TYPE: VendorSales</summary>
        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sales2 Sales { get; set; }

        /// <summary>Item components, keyed by the vendorItemIndex of the active sale items.
        /// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</summary>
        [Newtonsoft.Json.JsonProperty("itemComponents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemComponents3 ItemComponents { get; set; }

        /// <summary>A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
        /// COMPONENT TYPE: CurrencyLookups</summary>
        [Newtonsoft.Json.JsonProperty("currencyLookups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyLookups3 CurrencyLookups { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyVendorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyVendorResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyVendorComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyVendorComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyVendorComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyVendorComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleComponentResponseOfDestinyVendorCategoriesComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyVendorCategoriesComponent Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SingleComponentResponseOfDestinyVendorCategoriesComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleComponentResponseOfDestinyVendorCategoriesComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyVendorSaleItemComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent>(data);
        }

    }

    /// <summary>Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCollectibleNodeDetailResponse
    {
        /// <summary>COMPONENT TYPE: Collectibles</summary>
        [Newtonsoft.Json.JsonProperty("collectibles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Collectibles2 Collectibles { get; set; }

        /// <summary>Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.
        /// NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn't have to have a special override to do the collectible -> item lookup once you delve into an item's details, and it also meant that you didn't have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.
        /// We may all come to regret this decision. We will see.
        /// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</summary>
        [Newtonsoft.Json.JsonProperty("collectibleItemComponents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectibleItemComponents CollectibleItemComponents { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCollectibleNodeDetailResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCollectibleNodeDetailResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemComponentSetOfuint32
    {
        [Newtonsoft.Json.JsonProperty("instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemInstanceComponent Instances { get; set; }

        [Newtonsoft.Json.JsonProperty("perks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent Perks { get; set; }

        [Newtonsoft.Json.JsonProperty("renderData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemRenderComponent RenderData { get; set; }

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemStatsComponent Stats { get; set; }

        [Newtonsoft.Json.JsonProperty("sockets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemSocketsComponent Sockets { get; set; }

        [Newtonsoft.Json.JsonProperty("talentGrids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemTalentGridComponent TalentGrids { get; set; }

        [Newtonsoft.Json.JsonProperty("plugStates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent PlugStates { get; set; }

        [Newtonsoft.Json.JsonProperty("objectives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent Objectives { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemComponentSetOfuint32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemComponentSetOfuint32>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyItemInstanceComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemInstanceComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyItemInstanceComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyItemInstanceComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemPerksComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyItemRenderComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemRenderComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyItemRenderComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyItemRenderComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyItemStatsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemStatsComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyItemStatsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyItemStatsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyItemSocketsComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemSocketsComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyItemSocketsComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyItemSocketsComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryComponentResponseOfuint32AndDestinyItemTalentGridComponent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyItemTalentGridComponent> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("privacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentPrivacySetting? Privacy { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DictionaryComponentResponseOfuint32AndDestinyItemTalentGridComponent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DictionaryComponentResponseOfuint32AndDestinyItemTalentGridComponent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActionRequest
    {
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieMembershipType? MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActionRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyCharacterActionRequest
    {
        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieMembershipType? MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyCharacterActionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyCharacterActionRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemActionRequest
    {
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieMembershipType? MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemActionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemActionRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemTransferRequest
    {
        [Newtonsoft.Json.JsonProperty("itemReferenceHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemReferenceHash { get; set; }

        [Newtonsoft.Json.JsonProperty("stackSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StackSize { get; set; }

        [Newtonsoft.Json.JsonProperty("transferToVault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransferToVault { get; set; }

        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieMembershipType? MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemTransferRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPostmasterTransferRequest
    {
        [Newtonsoft.Json.JsonProperty("itemReferenceHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemReferenceHash { get; set; }

        [Newtonsoft.Json.JsonProperty("stackSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StackSize { get; set; }

        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieMembershipType? MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPostmasterTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPostmasterTransferRequest>(data);
        }

    }

    /// <summary>The results of a bulk Equipping operation performed through the Destiny API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyEquipItemResults
    {
        [Newtonsoft.Json.JsonProperty("equipResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyEquipItemResult> EquipResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyEquipItemResults FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyEquipItemResults>(data);
        }

    }

    /// <summary>The results of an Equipping operation performed through the Destiny API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyEquipItemResult
    {
        /// <summary>The instance ID of the item in question (all items that can be equipped must, but definition, be Instanced and thus have an Instance ID that you can use to refer to them)</summary>
        [Newtonsoft.Json.JsonProperty("itemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemInstanceId { get; set; }

        /// <summary>A PlatformErrorCodes enum indicating whether it succeeded, and if it failed why.</summary>
        [Newtonsoft.Json.JsonProperty("equipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipStatus EquipStatus { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyEquipItemResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyEquipItemResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemSetActionRequest
    {
        [Newtonsoft.Json.JsonProperty("itemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<long> ItemIds { get; set; }

        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieMembershipType? MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemSetActionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemSetActionRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemStateRequest
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? State { get; set; }

        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieMembershipType? MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemStateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemStateRequest>(data);
        }

    }

    /// <summary>A response containing all of the components for all requested vendors.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InventoryChangedResponse
    {
        /// <summary>Items that appeared in the inventory possibly as a result of an action.</summary>
        [Newtonsoft.Json.JsonProperty("addedInventoryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemComponent> AddedInventoryItems { get; set; }

        /// <summary>Items that disappeared from the inventory possibly as a result of an action.</summary>
        [Newtonsoft.Json.JsonProperty("removedInventoryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemComponent> RemovedInventoryItems { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InventoryChangedResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryChangedResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyItemChangeResponse
    {
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemResponse Item { get; set; }

        /// <summary>Items that appeared in the inventory possibly as a result of an action.</summary>
        [Newtonsoft.Json.JsonProperty("addedInventoryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemComponent> AddedInventoryItems { get; set; }

        /// <summary>Items that disappeared from the inventory possibly as a result of an action.</summary>
        [Newtonsoft.Json.JsonProperty("removedInventoryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemComponent> RemovedInventoryItems { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyItemChangeResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyItemChangeResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyInsertPlugsActionRequest
    {
        /// <summary>Action token provided by the AwaGetActionToken API call.</summary>
        [Newtonsoft.Json.JsonProperty("actionToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionToken { get; set; }

        /// <summary>The instance ID of the item having a plug inserted. Only instanced items can have sockets.</summary>
        [Newtonsoft.Json.JsonProperty("itemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemInstanceId { get; set; }

        /// <summary>The plugs being inserted.</summary>
        [Newtonsoft.Json.JsonProperty("plug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Plug2 Plug { get; set; }

        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieMembershipType? MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyInsertPlugsActionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyInsertPlugsActionRequest>(data);
        }

    }

    /// <summary>Represents all of the data related to a single plug to be inserted.
    /// Note that, while you *can* point to a socket that represents infusion, you will receive an error if you attempt to do so. Come on guys, let's play nice.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyInsertPlugsRequestEntry
    {
        /// <summary>The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.
        /// Don't point to or try to insert a plug into an infusion socket. It won't work.</summary>
        [Newtonsoft.Json.JsonProperty("socketIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SocketIndex { get; set; }

        /// <summary>This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and "default" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.</summary>
        [Newtonsoft.Json.JsonProperty("socketArrayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocketArrayType SocketArrayType { get; set; }

        /// <summary>Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.</summary>
        [Newtonsoft.Json.JsonProperty("plugItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlugItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyInsertPlugsRequestEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyInsertPlugsRequestEntry>(data);
        }

    }

    /// <summary>If you look in the DestinyInventoryItemDefinition's "sockets" property, you'll see that there are two types of sockets: intrinsic, and "socketEntry."
    /// Unfortunately, because Intrinsic sockets are a whole separate array, it is no longer sufficient to know the index into that array to know which socket we're talking about. You have to know whether it's in the default "socketEntries" or if it's in the "intrinsic" list.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinySocketArrayType
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPostGameCarnageReportData
    {
        /// <summary>Date and time for the activity.</summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Period { get; set; }

        /// <summary>If this activity has "phases", this is the phase at which the activity was started.</summary>
        [Newtonsoft.Json.JsonProperty("startingPhaseIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartingPhaseIndex { get; set; }

        /// <summary>Details about the activity.</summary>
        [Newtonsoft.Json.JsonProperty("activityDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActivityDetails ActivityDetails { get; set; }

        /// <summary>Collection of players and their data for this activity.</summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPostGameCarnageReportEntry> Entries { get; set; }

        /// <summary>Collection of stats for the player in this activity.</summary>
        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPostGameCarnageReportTeamEntry> Teams { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPostGameCarnageReportData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPostGameCarnageReportData>(data);
        }

    }

    /// <summary>Summary information about the activity that was played.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsActivity
    {
        /// <summary>The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it'd be named activityHash. Too late now.</summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferenceId { get; set; }

        /// <summary>The unique hash identifier of the DestinyActivityDefinition that was played.</summary>
        [Newtonsoft.Json.JsonProperty("directorActivityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DirectorActivityHash { get; set; }

        /// <summary>The unique identifier for this *specific* match that was played.
        /// This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("instanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? InstanceId { get; set; }

        /// <summary>Indicates the most specific game mode of the activity that we could find.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mode2 Mode { get; set; }

        /// <summary>The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.</summary>
        [Newtonsoft.Json.JsonProperty("modes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityModeType> Modes { get; set; }

        /// <summary>Whether or not the match was a private match. There's no private matches in Destiny 2... yet... DUN DUN DUNNNN</summary>
        [Newtonsoft.Json.JsonProperty("isPrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsActivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsActivity>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPostGameCarnageReportEntry
    {
        /// <summary>Standing of the player</summary>
        [Newtonsoft.Json.JsonProperty("standing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Standing { get; set; }

        /// <summary>Score of the player if available</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Score Score { get; set; }

        /// <summary>Identity details of the player</summary>
        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Player Player { get; set; }

        /// <summary>ID of the player's character used in the activity.</summary>
        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        /// <summary>Collection of stats for the player in this activity.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> Values { get; set; }

        /// <summary>Extended data extracted from the activity blob.</summary>
        [Newtonsoft.Json.JsonProperty("extended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Extended Extended { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPostGameCarnageReportEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPostGameCarnageReportEntry>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsValue
    {
        /// <summary>Unique ID for this stat</summary>
        [Newtonsoft.Json.JsonProperty("statId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatId { get; set; }

        /// <summary>Basic stat value.</summary>
        [Newtonsoft.Json.JsonProperty("basic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Basic Basic { get; set; }

        /// <summary>Per game average for the statistic, if applicable</summary>
        [Newtonsoft.Json.JsonProperty("pga", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pga Pga { get; set; }

        /// <summary>Weighted value of the stat if a weight greater than 1 has been assigned.</summary>
        [Newtonsoft.Json.JsonProperty("weighted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weighted Weighted { get; set; }

        /// <summary>When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.</summary>
        [Newtonsoft.Json.JsonProperty("activityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ActivityId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsValue>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsValuePair
    {
        /// <summary>Raw value of the statistic</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>Localized formated version of the value.</summary>
        [Newtonsoft.Json.JsonProperty("displayValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayValue { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsValuePair FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsValuePair>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPlayer
    {
        /// <summary>Details about the player as they are known in game (platform display name, Destiny emblem)</summary>
        [Newtonsoft.Json.JsonProperty("destinyUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyUserInfo DestinyUserInfo { get; set; }

        /// <summary>Class of the character if applicable and available.</summary>
        [Newtonsoft.Json.JsonProperty("characterClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CharacterClass { get; set; }

        [Newtonsoft.Json.JsonProperty("classHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClassHash { get; set; }

        [Newtonsoft.Json.JsonProperty("raceHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RaceHash { get; set; }

        [Newtonsoft.Json.JsonProperty("genderHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GenderHash { get; set; }

        /// <summary>Level of the character if available. Zero if it is not available.</summary>
        [Newtonsoft.Json.JsonProperty("characterLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CharacterLevel { get; set; }

        /// <summary>Light Level of the character if available. Zero if it is not available.</summary>
        [Newtonsoft.Json.JsonProperty("lightLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LightLevel { get; set; }

        /// <summary>Details about the player as they are known on BungieNet. This will be undefined if the player has marked their credential private, or does not have a BungieNet account.</summary>
        [Newtonsoft.Json.JsonProperty("bungieNetUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BungieNetUserInfo BungieNetUserInfo { get; set; }

        /// <summary>Current clan name for the player. This value may be null or an empty string if the user does not have a clan.</summary>
        [Newtonsoft.Json.JsonProperty("clanName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClanName { get; set; }

        /// <summary>Current clan tag for the player. This value may be null or an empty string if the user does not have a clan.</summary>
        [Newtonsoft.Json.JsonProperty("clanTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClanTag { get; set; }

        /// <summary>If we know the emblem's hash, this can be used to look up the player's emblem at the time of a match when receiving PGCR data, or otherwise their currently equipped emblem (if we are able to obtain it).</summary>
        [Newtonsoft.Json.JsonProperty("emblemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EmblemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPlayer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPlayer>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPostGameCarnageReportExtendedData
    {
        /// <summary>List of weapons and their perspective values.</summary>
        [Newtonsoft.Json.JsonProperty("weapons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyHistoricalWeaponStats> Weapons { get; set; }

        /// <summary>Collection of stats for the player in this activity.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> Values { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPostGameCarnageReportExtendedData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPostGameCarnageReportExtendedData>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalWeaponStats
    {
        /// <summary>The hash ID of the item definition that describes the weapon.</summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferenceId { get; set; }

        /// <summary>Collection of stats for the period.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> Values { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalWeaponStats FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalWeaponStats>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPostGameCarnageReportTeamEntry
    {
        /// <summary>Integer ID for the team.</summary>
        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; }

        /// <summary>Team's standing relative to other teams.</summary>
        [Newtonsoft.Json.JsonProperty("standing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Standing Standing { get; set; }

        /// <summary>Score earned by the team</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Score2 Score { get; set; }

        /// <summary>Alpha or Bravo</summary>
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPostGameCarnageReportTeamEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPostGameCarnageReportTeamEntry>(data);
        }

    }

    /// <summary>If you want to report a player causing trouble in a game, this request will let you report that player and the specific PGCR in which the trouble was caused, along with why.
    /// Please don't do this just because you dislike the person! I mean, I know people will do it anyways, but can you like take a good walk, or put a curse on them or something? Do me a solid and reconsider.
    /// Note that this request object doesn't have the actual PGCR ID nor your Account/Character ID in it. We will infer that information from your authentication information and the PGCR ID that you pass into the URL of the reporting endpoint itself.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyReportOffensePgcrRequest
    {
        /// <summary>So you've decided to report someone instead of cursing them and their descendants. Well, okay then. This is the category or categorie(s) of infractions for which you are reporting the user. These are hash identifiers that map to DestinyReportReasonCategoryDefinition entries.</summary>
        [Newtonsoft.Json.JsonProperty("reasonCategoryHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ReasonCategoryHashes { get; set; }

        /// <summary>If applicable, provide a more specific reason(s) within the general category of problems provided by the reasonHash. This is also an identifier for a reason. All reasonHashes provided must be children of at least one the reasonCategoryHashes provided.</summary>
        [Newtonsoft.Json.JsonProperty("reasonHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ReasonHashes { get; set; }

        /// <summary>Within the PGCR provided when calling the Reporting endpoint, this should be the character ID of the user that you thought was violating terms of use. They must exist in the PGCR provided.</summary>
        [Newtonsoft.Json.JsonProperty("offendingCharacterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? OffendingCharacterId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyReportOffensePgcrRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyReportOffensePgcrRequest>(data);
        }

    }

    /// <summary>If you're going to report someone for a Terms of Service violation, you need to choose a category and reason for the report. This definition holds both the categories and the reasons within those categories, for simplicity and my own laziness' sake.
    /// Note tha this means that, to refer to a Reason by reasonHash, you need a combination of the reasonHash *and* the associated ReasonCategory's hash: there are some reasons defined under multiple categories.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyReportReasonCategoryDefinition
    {
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>The specific reasons for the report under this category.</summary>
        [Newtonsoft.Json.JsonProperty("reasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyReportReasonDefinition> Reasons { get; set; }

        /// <summary>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The index of the entity as it was found in the investment tables.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</summary>
        [Newtonsoft.Json.JsonProperty("redacted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyReportReasonCategoryDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyReportReasonCategoryDefinition>(data);
        }

    }

    /// <summary>A specific reason for being banned. Only accessible under the related category (DestinyReportReasonCategoryDefinition) under which it is shown. Note that this means that report reasons' reasonHash are not globally unique: and indeed, entries like "Other" are defined under most categories for example.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyReportReasonDefinition
    {
        /// <summary>The identifier for the reason: they are only guaranteed unique under the Category in which they are found.</summary>
        [Newtonsoft.Json.JsonProperty("reasonHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReasonHash { get; set; }

        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyReportReasonDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyReportReasonDefinition>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsDefinition
    {
        /// <summary>Unique programmer friendly ID for this stat</summary>
        [Newtonsoft.Json.JsonProperty("statId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatId { get; set; }

        /// <summary>Statistic group</summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Group Group { get; set; }

        /// <summary>Time periods the statistic covers</summary>
        [Newtonsoft.Json.JsonProperty("periodTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PeriodType> PeriodTypes { get; set; }

        /// <summary>Game modes where this statistic can be reported.</summary>
        [Newtonsoft.Json.JsonProperty("modes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyActivityModeType> Modes { get; set; }

        /// <summary>Category for the stat.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Category3 Category { get; set; }

        /// <summary>Display name</summary>
        [Newtonsoft.Json.JsonProperty("statName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatName { get; set; }

        /// <summary>Display name abbreviated</summary>
        [Newtonsoft.Json.JsonProperty("statNameAbbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatNameAbbr { get; set; }

        /// <summary>Description of a stat if applicable.</summary>
        [Newtonsoft.Json.JsonProperty("statDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatDescription { get; set; }

        /// <summary>Unit, if any, for the statistic</summary>
        [Newtonsoft.Json.JsonProperty("unitType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnitType2 UnitType { get; set; }

        /// <summary>Optional URI to an icon for the statistic</summary>
        [Newtonsoft.Json.JsonProperty("iconImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconImage { get; set; }

        /// <summary>Optional icon for the statistic</summary>
        [Newtonsoft.Json.JsonProperty("mergeMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyHistoricalStatsDefinitionMergeMethod? MergeMethod { get; set; }

        /// <summary>Localized Unit Name for the stat.</summary>
        [Newtonsoft.Json.JsonProperty("unitLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitLabel { get; set; }

        /// <summary>Weight assigned to this stat indicating its relative impressiveness.</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }

        /// <summary>The tier associated with this medal - be it implicitly or explicitly.</summary>
        [Newtonsoft.Json.JsonProperty("medalTierHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MedalTierHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsDefinition>(data);
        }

    }

    /// <summary>If the enum value is > 100, it is a "special" group that cannot be queried for directly (special cases apply to when they are returned, and are not relevant in general cases)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyStatsGroupType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _100 = 100,

        _101 = 101,

        _102 = 102,

        _103 = 103,

        _104 = 104,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PeriodType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PeriodTypeOf : System.Collections.ObjectModel.ObservableCollection<PeriodType>
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PeriodTypeOf FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PeriodTypeOf>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityModeTypeOf : System.Collections.ObjectModel.ObservableCollection<DestinyActivityModeType>
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityModeTypeOf FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityModeTypeOf>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyStatsCategoryType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

        _15 = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UnitType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyStatsMergeMethod
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLeaderboard
    {
        [Newtonsoft.Json.JsonProperty("statId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatId { get; set; }

        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyLeaderboardEntry> Entries { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLeaderboard FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLeaderboard>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLeaderboardEntry
    {
        /// <summary>Where this player ranks on the leaderboard. A value of 1 is the top rank.</summary>
        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rank { get; set; }

        /// <summary>Identity details of the player</summary>
        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Player2 Player { get; set; }

        /// <summary>ID of the player's best character for the reported stat.</summary>
        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        /// <summary>Value of the stat for this player</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Value2 Value { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLeaderboardEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLeaderboardEntry>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyLeaderboardResults
    {
        /// <summary>Indicate the membership ID of the account that is the focal point of the provided leaderboards.</summary>
        [Newtonsoft.Json.JsonProperty("focusMembershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FocusMembershipId { get; set; }

        /// <summary>Indicate the character ID of the character that is the focal point of the provided leaderboards. May be null, in which case any character from the focus membership can appear in the provided leaderboards.</summary>
        [Newtonsoft.Json.JsonProperty("focusCharacterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FocusCharacterId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyLeaderboardResults FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyLeaderboardResults>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyClanAggregateStat
    {
        /// <summary>The id of the mode of stats (allPvp, allPvE, etc)</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mode3 Mode { get; set; }

        /// <summary>The id of the stat</summary>
        [Newtonsoft.Json.JsonProperty("statId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatId { get; set; }

        /// <summary>Value of the stat for this player</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Value3 Value { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyClanAggregateStat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyClanAggregateStat>(data);
        }

    }

    /// <summary>The results of a search for Destiny content. This will be improved on over time, I've been doing some experimenting to see what might be useful.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyEntitySearchResult
    {
        /// <summary>A list of suggested words that might make for better search results, based on the text searched for.</summary>
        [Newtonsoft.Json.JsonProperty("suggestedWords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SuggestedWords { get; set; }

        /// <summary>The items found that are matches/near matches for the searched-for term, sorted by something vaguely resembling "relevance". Hopefully this will get better in the future.</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Results Results { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyEntitySearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyEntitySearchResult>(data);
        }

    }

    /// <summary>An individual Destiny Entity returned from the entity search.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyEntitySearchResultItem
    {
        /// <summary>The hash identifier of the entity. You will use this to look up the DestinyDefinition relevant for the entity found.</summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hash { get; set; }

        /// <summary>The type of entity, returned as a string matching the DestinyDefinition's contract class name. You'll have to have your own mapping from class names to actually looking up those definitions in the manifest databases.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>Basic display properties on the entity, so you don't have to look up the definition to show basic results for the item.</summary>
        [Newtonsoft.Json.JsonProperty("displayProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayProperties19 DisplayProperties { get; set; }

        /// <summary>The ranking value for sorting that we calculated using our relevance formula. This will hopefully get better with time and iteration.</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyEntitySearchResultItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyEntitySearchResultItem>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfDestinyEntitySearchResultItem
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyEntitySearchResultItem> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfDestinyEntitySearchResultItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfDestinyEntitySearchResultItem>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsByPeriod
    {
        [Newtonsoft.Json.JsonProperty("allTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> AllTime { get; set; }

        [Newtonsoft.Json.JsonProperty("allTimeTier1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> AllTimeTier1 { get; set; }

        [Newtonsoft.Json.JsonProperty("allTimeTier2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> AllTimeTier2 { get; set; }

        [Newtonsoft.Json.JsonProperty("allTimeTier3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> AllTimeTier3 { get; set; }

        [Newtonsoft.Json.JsonProperty("daily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyHistoricalStatsPeriodGroup> Daily { get; set; }

        [Newtonsoft.Json.JsonProperty("monthly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyHistoricalStatsPeriodGroup> Monthly { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsByPeriod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsByPeriod>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsPeriodGroup
    {
        /// <summary>Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is 'all time'.</summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Period { get; set; }

        /// <summary>If the period group is for a specific activity, this property will be set.</summary>
        [Newtonsoft.Json.JsonProperty("activityDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActivityDetails2 ActivityDetails { get; set; }

        /// <summary>Collection of stats for the period.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> Values { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsPeriodGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsPeriodGroup>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsResults : System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsByPeriod>
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsResults FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsResults>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsAccountResult
    {
        [Newtonsoft.Json.JsonProperty("mergedDeletedCharacters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyHistoricalStatsWithMerged MergedDeletedCharacters { get; set; }

        [Newtonsoft.Json.JsonProperty("mergedAllCharacters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyHistoricalStatsWithMerged MergedAllCharacters { get; set; }

        [Newtonsoft.Json.JsonProperty("characters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyHistoricalStatsPerCharacter> Characters { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsAccountResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsAccountResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsWithMerged
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsByPeriod> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("merged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyHistoricalStatsByPeriod Merged { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsWithMerged FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsWithMerged>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalStatsPerCharacter
    {
        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deleted { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsByPeriod> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("merged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyHistoricalStatsByPeriod Merged { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalStatsPerCharacter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalStatsPerCharacter>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyActivityHistoryResults
    {
        /// <summary>List of activities, the most recent activity first.</summary>
        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyHistoricalStatsPeriodGroup> Activities { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyActivityHistoryResults FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyActivityHistoryResults>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyHistoricalWeaponStatsData
    {
        /// <summary>List of weapons and their perspective values.</summary>
        [Newtonsoft.Json.JsonProperty("weapons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyHistoricalWeaponStats> Weapons { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyHistoricalWeaponStatsData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyHistoricalWeaponStatsData>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyAggregateActivityResults
    {
        /// <summary>List of all activities the player has participated in.</summary>
        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyAggregateActivityStats> Activities { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyAggregateActivityResults FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyAggregateActivityResults>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyAggregateActivityStats
    {
        /// <summary>Hash ID that can be looked up in the DestinyActivityTable.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>Collection of stats for the player in this activity.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsValue> Values { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyAggregateActivityStats FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyAggregateActivityStats>(data);
        }

    }

    /// <summary>Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneContent
    {
        /// <summary>The "About this Milestone" text from the Firehose.</summary>
        [Newtonsoft.Json.JsonProperty("about", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string About { get; set; }

        /// <summary>The Current Status of the Milestone, as driven by the Firehose.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>A list of tips, provided by the Firehose.</summary>
        [Newtonsoft.Json.JsonProperty("tips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tips { get; set; }

        /// <summary>If DPS has defined items related to this Milestone, they can categorize those items in the Firehose. That data will then be returned as item categories here.</summary>
        [Newtonsoft.Json.JsonProperty("itemCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyMilestoneContentItemCategory> ItemCategories { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneContent>(data);
        }

    }

    /// <summary>Part of our dynamic, localized Milestone content is arbitrary categories of items. These are built in our content management system, and thus aren't the same as programmatically generated rewards.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyMilestoneContentItemCategory
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("itemHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ItemHashes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyMilestoneContentItemCategory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyMilestoneContentItemCategory>(data);
        }

    }

    /// <summary>Information about milestones, presented in a character state-agnostic manner. Combine this data with DestinyMilestoneDefinition to get a full picture of the milestone, which is basically a checklist of things to do in the game. Think of this as GetPublicAdvisors 3.0, for those who used the Destiny 1 API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPublicMilestone
    {
        /// <summary>The hash identifier for the milestone. Use it to look up the DestinyMilestoneDefinition for static data about the Milestone.</summary>
        [Newtonsoft.Json.JsonProperty("milestoneHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneHash { get; set; }

        /// <summary>A milestone not need have even a single quest, but if there are active quests they will be returned here.</summary>
        [Newtonsoft.Json.JsonProperty("availableQuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPublicMilestoneQuest> AvailableQuests { get; set; }

        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPublicMilestoneChallengeActivity> Activities { get; set; }

        /// <summary>Sometimes milestones - or activities active in milestones - will have relevant vendors. These are the vendors that are currently relevant.
        /// Deprecated, already, for the sake of the new "vendors" property that has more data. What was I thinking.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> VendorHashes { get; set; }

        /// <summary>This is why we can't have nice things. This is the ordered list of vendors to be shown that relate to this milestone, potentially along with other interesting data.</summary>
        [Newtonsoft.Json.JsonProperty("vendors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPublicMilestoneVendor> Vendors { get; set; }

        /// <summary>If known, this is the date when the Milestone started/became active.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate { get; set; }

        /// <summary>If known, this is the date when the Milestone will expire/recycle/end.</summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndDate { get; set; }

        /// <summary>Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPublicMilestone FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPublicMilestone>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPublicMilestoneQuest
    {
        /// <summary>Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item's DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.</summary>
        [Newtonsoft.Json.JsonProperty("questItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuestItemHash { get; set; }

        /// <summary>A milestone need not have an active activity, but if there is one it will be returned here, along with any variant and additional information.</summary>
        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Activity2 Activity { get; set; }

        /// <summary>For the given quest there could be 0-to-Many challenges: mini quests that you can perform in the course of doing this quest, that may grant you rewards and benefits.</summary>
        [Newtonsoft.Json.JsonProperty("challenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPublicMilestoneChallenge> Challenges { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPublicMilestoneQuest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPublicMilestoneQuest>(data);
        }

    }

    /// <summary>A milestone may have one or more conceptual Activities associated with it, and each of those conceptual activities could have a variety of variants, modes, tiers, what-have-you. Our attempts to determine what qualifies as a conceptual activity are, unfortunately, janky. So if you see missing modes or modes that don't seem appropriate to you, let us know and I'll buy you a beer if we ever meet up in person.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPublicMilestoneActivity
    {
        /// <summary>The hash identifier of the activity that's been chosen to be considered the canonical "conceptual" activity definition. This may have many variants, defined herein.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>The activity may have 0-to-many modifiers: if it does, this will contain the hashes to the DestinyActivityModifierDefinition that defines the modifier being applied.</summary>
        [Newtonsoft.Json.JsonProperty("modifierHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ModifierHashes { get; set; }

        /// <summary>Every relevant variation of this conceptual activity, including the conceptual activity itself, have variants defined here.</summary>
        [Newtonsoft.Json.JsonProperty("variants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyPublicMilestoneActivityVariant> Variants { get; set; }

        /// <summary>The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityModeHash { get; set; }

        /// <summary>The enumeration equivalent of the most specific Activity Mode under which this activity is played.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPublicMilestoneActivityActivityModeType? ActivityModeType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPublicMilestoneActivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPublicMilestoneActivity>(data);
        }

    }

    /// <summary>Represents a variant of an activity that's relevant to a milestone.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPublicMilestoneActivityVariant
    {
        /// <summary>The hash identifier of this activity variant. Examine the activity's definition in the Manifest database to determine what makes it a distinct variant. Usually it will be difficulty level or whether or not it is a guided game variant of the activity, but theoretically it could be distinguished in any arbitrary way.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        /// <summary>The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityModeHash { get; set; }

        /// <summary>The enumeration equivalent of the most specific Activity Mode under which this activity is played.</summary>
        [Newtonsoft.Json.JsonProperty("activityModeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPublicMilestoneActivityVariantActivityModeType? ActivityModeType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPublicMilestoneActivityVariant FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPublicMilestoneActivityVariant>(data);
        }

    }

    /// <summary>A Milestone can have many Challenges. Challenges are just extra Objectives that provide a fun way to mix-up play and provide extra rewards.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPublicMilestoneChallenge
    {
        /// <summary>The objective for the Challenge, which should have human-readable data about what needs to be done to accomplish the objective. Use this hash to look up the DestinyObjectiveDefinition.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectiveHash { get; set; }

        /// <summary>IF the Objective is related to a specific Activity, this will be that activity's hash. Use it to look up the DestinyActivityDefinition for additional data to show.</summary>
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPublicMilestoneChallenge FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPublicMilestoneChallenge>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPublicMilestoneChallengeActivity
    {
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        [Newtonsoft.Json.JsonProperty("challengeObjectiveHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ChallengeObjectiveHashes { get; set; }

        /// <summary>If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.
        /// Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.</summary>
        [Newtonsoft.Json.JsonProperty("modifierHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ModifierHashes { get; set; }

        /// <summary>If returned, this is the index into the DestinyActivityDefinition's "loadouts" property, indicating the currently active loadout requirements.</summary>
        [Newtonsoft.Json.JsonProperty("loadoutRequirementIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoadoutRequirementIndex { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPublicMilestoneChallengeActivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPublicMilestoneChallengeActivity>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPublicMilestoneVendor
    {
        /// <summary>The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about.</summary>
        [Newtonsoft.Json.JsonProperty("vendorHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VendorHash { get; set; }

        /// <summary>If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I'm taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I'm going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST.</summary>
        [Newtonsoft.Json.JsonProperty("previewItemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreviewItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPublicMilestoneVendor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPublicMilestoneVendor>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AwaInitializeResponse
    {
        /// <summary>ID used to get the token. Present this ID to the user as it will identify this specific request on their device.</summary>
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }

        /// <summary>True if the PUSH message will only be sent to the device that made this request.</summary>
        [Newtonsoft.Json.JsonProperty("sentToSelf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SentToSelf { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AwaInitializeResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwaInitializeResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AwaPermissionRequested
    {
        /// <summary>Type of advanced write action.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type Type { get; set; }

        /// <summary>Item instance ID the action shall be applied to. This is optional for all but a new AwaType values. Rule of thumb is to provide the item instance ID if one is available.</summary>
        [Newtonsoft.Json.JsonProperty("affectedItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AffectedItemId { get; set; }

        /// <summary>Destiny membership type of the account to modify.</summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipType33 MembershipType { get; set; }

        /// <summary>Destiny character ID, if applicable, that will be affected by the action.</summary>
        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AwaPermissionRequested FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwaPermissionRequested>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AwaType
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AwaUserResponse
    {
        /// <summary>Indication of the selection the user has made (Approving or rejecting the action)</summary>
        [Newtonsoft.Json.JsonProperty("selection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Selection Selection { get; set; }

        /// <summary>Correlation ID of the request</summary>
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }

        /// <summary>Secret nonce received via the PUSH notification.</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<byte[]> Nonce { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AwaUserResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwaUserResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AwaUserSelection
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AwaAuthorizationResult
    {
        /// <summary>Indication of how the user responded to the request. If the value is "Approved" the actionToken will contain the token that can be presented when performing the advanced write action.</summary>
        [Newtonsoft.Json.JsonProperty("userSelection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserSelection UserSelection { get; set; }

        [Newtonsoft.Json.JsonProperty("responseReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwaResponseReason? ResponseReason { get; set; }

        /// <summary>Message to the app developer to help understand the response.</summary>
        [Newtonsoft.Json.JsonProperty("developerNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeveloperNote { get; set; }

        /// <summary>Credential used to prove the user authorized an advanced write action.</summary>
        [Newtonsoft.Json.JsonProperty("actionToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionToken { get; set; }

        /// <summary>This token may be used to perform the requested action this number of times, at a maximum. If this value is 0, then there is no limit.</summary>
        [Newtonsoft.Json.JsonProperty("maximumNumberOfUses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumNumberOfUses { get; set; }

        /// <summary>Time, UTC, when token expires.</summary>
        [Newtonsoft.Json.JsonProperty("validUntil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ValidUntil { get; set; }

        /// <summary>Advanced Write Action Type from the permission request.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type2 Type { get; set; }

        /// <summary>MembershipType from the permission request.</summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipType34 MembershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AwaAuthorizationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwaAuthorizationResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AwaResponseReason
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CommunityContentSortMode
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CommunityStatusSort
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CommunityLiveStatus
    {
        [Newtonsoft.Json.JsonProperty("dateStatusUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateStatusUpdated { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("partnershipIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnershipIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("partnershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnershipType? PartnershipType { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnailSmall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbnailSmall { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnailLarge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbnailLarge { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyCharacterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DestinyCharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("userInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard UserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("currentActivityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentActivityHash { get; set; }

        [Newtonsoft.Json.JsonProperty("dateLastPlayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateLastPlayed { get; set; }

        [Newtonsoft.Json.JsonProperty("dateStreamStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateStreamStarted { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("currentViewers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentViewers { get; set; }

        [Newtonsoft.Json.JsonProperty("followers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Followers { get; set; }

        [Newtonsoft.Json.JsonProperty("overallViewers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallViewers { get; set; }

        [Newtonsoft.Json.JsonProperty("isFeatured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFeatured { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("activityModeHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityModeHash { get; set; }

        [Newtonsoft.Json.JsonProperty("dateFeatured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateFeatured { get; set; }

        [Newtonsoft.Json.JsonProperty("trendingValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TrendingValue { get; set; }

        [Newtonsoft.Json.JsonProperty("isSubscribable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSubscribable { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CommunityLiveStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommunityLiveStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfCommunityLiveStatus
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CommunityLiveStatus> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfCommunityLiveStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfCommunityLiveStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingCategories
    {
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TrendingCategory> Categories { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingCategories FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingCategories>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingCategory
    {
        [Newtonsoft.Json.JsonProperty("categoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfTrendingEntry Entries { get; set; }

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingCategory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingCategory>(data);
        }

    }

    /// <summary>The list entry view for trending items. Returns just enough to show the item on the trending page.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingEntry
    {
        /// <summary>The weighted score of this trending item.</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("isFeatured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFeatured { get; set; }

        /// <summary>We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntityType EntityType { get; set; }

        /// <summary>The localized "display name/article title/'primary localized identifier'" of the entity.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>If the entity has a localized tagline/subtitle/motto/whatever, that is found here.</summary>
        [Newtonsoft.Json.JsonProperty("tagline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tagline { get; set; }

        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo</summary>
        [Newtonsoft.Json.JsonProperty("webmVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebmVideo { get; set; }

        /// <summary>If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo</summary>
        [Newtonsoft.Json.JsonProperty("mp4Video", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mp4Video { get; set; }

        /// <summary>If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.</summary>
        [Newtonsoft.Json.JsonProperty("featureImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeatureImage { get; set; }

        /// <summary>If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container's header.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TrendingEntry> Items { get; set; }

        /// <summary>If the entry has a date at which it was created, this is that date.</summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingEntry>(data);
        }

    }

    /// <summary>The known entity types that you can have returned from Trending.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TrendingEntryType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfTrendingEntry
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TrendingEntry> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfTrendingEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfTrendingEntry>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingDetail
    {
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingEntryType? EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("news", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingEntryNews News { get; set; }

        [Newtonsoft.Json.JsonProperty("support", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingEntrySupportArticle Support { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingEntryDestinyItem DestinyItem { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingEntryDestinyActivity DestinyActivity { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyRitual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingEntryDestinyRitual DestinyRitual { get; set; }

        [Newtonsoft.Json.JsonProperty("creation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingEntryCommunityCreation Creation { get; set; }

        [Newtonsoft.Json.JsonProperty("stream", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingEntryCommunityStream Stream { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingDetail>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingEntryNews
    {
        [Newtonsoft.Json.JsonProperty("article", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentItemPublicContract Article { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingEntryNews FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingEntryNews>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingEntrySupportArticle
    {
        [Newtonsoft.Json.JsonProperty("article", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentItemPublicContract Article { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingEntrySupportArticle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingEntrySupportArticle>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingEntryDestinyItem
    {
        [Newtonsoft.Json.JsonProperty("itemHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingEntryDestinyItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingEntryDestinyItem>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingEntryDestinyActivity
    {
        [Newtonsoft.Json.JsonProperty("activityHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivityHash { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPublicActivityStatus Status { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingEntryDestinyActivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingEntryDestinyActivity>(data);
        }

    }

    /// <summary>Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character's progress in it.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyPublicActivityStatus
    {
        /// <summary>Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions.</summary>
        [Newtonsoft.Json.JsonProperty("challengeObjectiveHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ChallengeObjectiveHashes { get; set; }

        /// <summary>The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions.</summary>
        [Newtonsoft.Json.JsonProperty("modifierHashes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ModifierHashes { get; set; }

        /// <summary>If the activity itself provides any specific "mock" rewards, this will be the items and their quantity.
        /// Why "mock", you ask? Because these are the rewards as they are represented in the tooltip of the Activity.
        /// These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain.</summary>
        [Newtonsoft.Json.JsonProperty("rewardTooltipItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyItemQuantity> RewardTooltipItems { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyPublicActivityStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyPublicActivityStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingEntryDestinyRitual
    {
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("subtitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subtitle { get; set; }

        [Newtonsoft.Json.JsonProperty("dateStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateStart { get; set; }

        [Newtonsoft.Json.JsonProperty("dateEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateEnd { get; set; }

        /// <summary>A destiny event does not necessarily have a related Milestone, but if it does the details will be returned here.</summary>
        [Newtonsoft.Json.JsonProperty("milestoneDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MilestoneDetails MilestoneDetails { get; set; }

        /// <summary>A destiny event will not necessarily have milestone "custom content", but if it does the details will be here.</summary>
        [Newtonsoft.Json.JsonProperty("eventContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventContent EventContent { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingEntryDestinyRitual FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingEntryDestinyRitual>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingEntryCommunityCreation
    {
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Media { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        [Newtonsoft.Json.JsonProperty("authorMembershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AuthorMembershipId { get; set; }

        [Newtonsoft.Json.JsonProperty("postId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PostId { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        [Newtonsoft.Json.JsonProperty("upvotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Upvotes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingEntryCommunityCreation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingEntryCommunityCreation>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrendingEntryCommunityStream
    {
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("partnershipIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnershipIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("partnershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnershipType? PartnershipType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrendingEntryCommunityStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrendingEntryCommunityStream>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FireteamActivityType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FireteamDateRange
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FireteamPlatform
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FireteamPublicSearchOption
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FireteamSlotSearch
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FireteamSummary
    {
        [Newtonsoft.Json.JsonProperty("fireteamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FireteamId { get; set; }

        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FireteamPlatform? Platform { get; set; }

        [Newtonsoft.Json.JsonProperty("activityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FireteamActivityType? ActivityType { get; set; }

        [Newtonsoft.Json.JsonProperty("isImmediate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsImmediate { get; set; }

        [Newtonsoft.Json.JsonProperty("scheduledTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ScheduledTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerMembershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? OwnerMembershipId { get; set; }

        [Newtonsoft.Json.JsonProperty("playerSlotCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerSlotCount { get; set; }

        [Newtonsoft.Json.JsonProperty("alternateSlotCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlternateSlotCount { get; set; }

        [Newtonsoft.Json.JsonProperty("availablePlayerSlotCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailablePlayerSlotCount { get; set; }

        [Newtonsoft.Json.JsonProperty("availableAlternateSlotCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableAlternateSlotCount { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }

        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateModified { get; set; }

        [Newtonsoft.Json.JsonProperty("isPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublic { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }

        [Newtonsoft.Json.JsonProperty("datePlayerModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DatePlayerModified { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FireteamSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FireteamSummary>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfFireteamSummary
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FireteamSummary> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfFireteamSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfFireteamSummary>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FireteamResponse
    {
        [Newtonsoft.Json.JsonProperty("Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FireteamSummary Summary { get; set; }

        [Newtonsoft.Json.JsonProperty("Members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FireteamMember> Members { get; set; }

        [Newtonsoft.Json.JsonProperty("Alternates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FireteamMember> Alternates { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FireteamResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FireteamResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FireteamMember
    {
        [Newtonsoft.Json.JsonProperty("destinyUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard DestinyUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("bungieNetUserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCard BungieNetUserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("characterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterId { get; set; }

        [Newtonsoft.Json.JsonProperty("dateJoined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateJoined { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMicrophone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMicrophone { get; set; }

        [Newtonsoft.Json.JsonProperty("lastPlatformInviteAttemptDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastPlatformInviteAttemptDate { get; set; }

        [Newtonsoft.Json.JsonProperty("lastPlatformInviteAttemptResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FireteamPlatformInviteResult? LastPlatformInviteAttemptResult { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FireteamMember FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FireteamMember>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FireteamPlatformInviteResult
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResultOfFireteamResponse
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FireteamResponse> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedQuery Query { get; set; }

        [Newtonsoft.Json.JsonProperty("replacementContinuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementContinuationToken { get; set; }

        /// <summary>If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.</summary>
        [Newtonsoft.Json.JsonProperty("useTotalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTotalResults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchResultOfFireteamResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResultOfFireteamResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CoreSettingsConfiguration
    {
        [Newtonsoft.Json.JsonProperty("systems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, CoreSystem> Systems { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreReasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> IgnoreReasons { get; set; }

        [Newtonsoft.Json.JsonProperty("forumCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ForumCategories { get; set; }

        [Newtonsoft.Json.JsonProperty("groupAvatars", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> GroupAvatars { get; set; }

        [Newtonsoft.Json.JsonProperty("destinyMembershipTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> DestinyMembershipTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("recruitmentPlatformTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> RecruitmentPlatformTags { get; set; }

        [Newtonsoft.Json.JsonProperty("recruitmentMiscTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> RecruitmentMiscTags { get; set; }

        [Newtonsoft.Json.JsonProperty("recruitmentActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> RecruitmentActivities { get; set; }

        [Newtonsoft.Json.JsonProperty("userContentLocales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> UserContentLocales { get; set; }

        [Newtonsoft.Json.JsonProperty("systemContentLocales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> SystemContentLocales { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerDecals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ClanBannerDecals { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerDecalColors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ClanBannerDecalColors { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerGonfalons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ClanBannerGonfalons { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerGonfalonColors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ClanBannerGonfalonColors { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerGonfalonDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ClanBannerGonfalonDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerGonfalonDetailColors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ClanBannerGonfalonDetailColors { get; set; }

        [Newtonsoft.Json.JsonProperty("clanBannerStandards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ClanBannerStandards { get; set; }

        [Newtonsoft.Json.JsonProperty("destiny2CoreSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Destiny2CoreSettings Destiny2CoreSettings { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CoreSettingsConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoreSettingsConfiguration>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CoreSystem
    {
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CoreSystem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoreSystem>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CoreSetting
    {
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        [Newtonsoft.Json.JsonProperty("imagePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImagePath { get; set; }

        [Newtonsoft.Json.JsonProperty("childSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CoreSetting> ChildSettings { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CoreSetting FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoreSetting>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Destiny2CoreSettings
    {
        [Newtonsoft.Json.JsonProperty("collectionRootNode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CollectionRootNode { get; set; }

        [Newtonsoft.Json.JsonProperty("badgesRootNode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BadgesRootNode { get; set; }

        [Newtonsoft.Json.JsonProperty("recordsRootNode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecordsRootNode { get; set; }

        [Newtonsoft.Json.JsonProperty("medalsRootNode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MedalsRootNode { get; set; }

        [Newtonsoft.Json.JsonProperty("undiscoveredCollectibleImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UndiscoveredCollectibleImage { get; set; }

        [Newtonsoft.Json.JsonProperty("ammoTypeHeavyIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmmoTypeHeavyIcon { get; set; }

        [Newtonsoft.Json.JsonProperty("ammoTypeSpecialIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmmoTypeSpecialIcon { get; set; }

        [Newtonsoft.Json.JsonProperty("ammoTypePrimaryIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmmoTypePrimaryIcon { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Destiny2CoreSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Destiny2CoreSettings>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GlobalAlert
    {
        [Newtonsoft.Json.JsonProperty("AlertKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlertKey { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertHtml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlertHtml { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? AlertTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlertLink { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GlobalAlertLevel? AlertLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GlobalAlertType? AlertType { get; set; }

        [Newtonsoft.Json.JsonProperty("StreamInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StreamInfo StreamInfo { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GlobalAlert FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlobalAlert>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlobalAlertLevel
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlobalAlertType
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StreamInfo
    {
        [Newtonsoft.Json.JsonProperty("ChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StreamInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StreamInfo>(data);
        }

    }

    /// <summary>Type of the supplied membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A category filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CategoryFilter
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

    }

    /// <summary>A date filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum QuickDate
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>The sort mode.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Sort
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    /// <summary>The category filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CategoryFilter2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

    }

    /// <summary>The date filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum QuickDate2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>The sort mode.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Sort2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SortMode
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SortMode2
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>The Destiny membership type of the account we wish to access settings.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>The Destiny membership type of linked account we are manipulating.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MType2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>Requested range in which to pull recommended groups</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CreateDateRange
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>Type of groups requested</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupType2
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>Type of group to find.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupType3
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>Filter out other member types. Use None for all members.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MemberType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    /// <summary>Membership type of the provide membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>New membertype for the specified member.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MemberType2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    /// <summary>Membership type of the provided membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType3
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>Membership type of the provided membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType4
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>Membership type of the provided membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType5
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>Membership type of the provided founderIdNew.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType6
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>MembershipType of the account to use when joining.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType7
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>MembershipType of the account to leave.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType8
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>Membership type of the supplied membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType9
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>Filter apply to list of joined groups.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Filter
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>Type of group the supplied member founded.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupType4
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>Membership type of the supplied membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType10
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>Filter apply to list of potential joined groups.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Filter2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>Type of group the supplied member applied.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupType5
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>Membership type of the supplied membership ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType11
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>MembershipType of the account being invited.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType12
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>MembershipType of the account being cancelled.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType13
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type, or All.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType14
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>The type for the membership whose linked Destiny accounts you want returned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType15
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType16
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType17
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType18
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType19
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType20
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType21
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType22
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType23
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType24
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PeriodType2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType25
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType26
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Mode
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType27
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>A valid non-BungieNet membership type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType28
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>The type of media to get</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MediaFilter
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

    }

    /// <summary>The sort mode.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Sort3
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>The type of partnership for which the status should be returned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartnershipType2
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>The sort mode.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Sort4
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>The type of partnership for which the status should be returned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartnershipType3
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>The sort mode.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Sort5
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>The type of partnership for which the status should be returned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartnershipType4
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>The sort mode.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Sort6
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>The type of partnership for which the status should be returned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartnershipType5
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>The sort mode.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Sort7
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>The type of account for which info will be extracted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MembershipType29
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _10 = 10,

        _254 = 254,

        _1 = -1,

    }

    /// <summary>The type of partnership for which info will be extracted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartnershipType6
    {
        _0 = 0,

        _1 = 1,

    }

    /// <summary>The type of entity to be returned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TrendingEntryType2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

    }

    /// <summary>The activity type to filter by.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ActivityType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    /// <summary>The date range to grab available fireteams.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DateRange2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>The platform filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Platform
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>Determines public/private filtering.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PublicOnly
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>Filters based on available slots</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SlotFilter
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>The activity type to filter by.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ActivityType2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    /// <summary>The date range to grab available fireteams.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DateRange3
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>The platform filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Platform2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>Filters based on available slots</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SlotFilter2
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>The platform filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Platform3
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiUsage Response1 { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Application> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response3
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeneralUser Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response4
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GeneralUser> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response4>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response5
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserTheme> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response5>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response6
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserMembershipData Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response6>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response7
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserMembershipData Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response7>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response8
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PublicPartnershipDetail> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response8>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response9
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentTypeDescription Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response9>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response10
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentItemPublicContract Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response10>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response11
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentItemPublicContract Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response11>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response12
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfContentItemPublicContract Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response12>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response13
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfContentItemPublicContract Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response13>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response14
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response14>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response15
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response15>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response16
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response16>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response17
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response17>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response18
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response18 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response18>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response19
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response19 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response19>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response20
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response20 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response20>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response21
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TagResponse> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response21 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response21>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response22
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response22 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response22>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response23
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForumRecruitmentDetail Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response23 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response23>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response24
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForumRecruitmentDetail Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response24 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response24>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response25
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForumRecruitmentDetail Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response25 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response25>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response26
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SaveMessageResult Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response26 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response26>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response27
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ForumRecruitmentDetail> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response27 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response27>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response28
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response28 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response28>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response29
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupTheme> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response29 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response29>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response30
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response30 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response30>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response31
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response31 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response31>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response32
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupV2Card> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response32>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response33
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response33 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response33>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response34
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response34 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response34>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response35
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response35 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response35>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response36
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupOptionalConversation> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response36 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response36>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response37
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupCreationResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response37 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response37>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response38
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response38 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response38>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response39
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response39 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response39>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response40
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response40 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response40>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response41
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response41 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response41>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response42
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response42 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response42>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response43
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfGroupMember Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response43 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response43>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response44
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfGroupMember Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response44 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response44>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response45
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response45 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response45>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response46
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupMemberLeaveResult Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response46 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response46>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response47
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response47 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response47>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response48
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response48 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response48>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response49
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfGroupBan Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response49 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response49>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response50
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response50 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response50>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response51
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupApplicationResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response51 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response51>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response52
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfGroupMemberApplication Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response52 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response52>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response53
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfGroupMemberApplication Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response53 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response53>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response54
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupMemberLeaveResult Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response54 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response54>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response55
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<EntityActionResult> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response55 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response55>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response56
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<EntityActionResult> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response56 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response56>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response57
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<EntityActionResult> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response57 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response57>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response58
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response58 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response58>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response59
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<EntityActionResult> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response59 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response59>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response60
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupMembershipSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response60 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response60>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response61
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupPotentialMembershipSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response61 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response61>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response62
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupApplicationResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response62 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response62>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response63
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupApplicationResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response63 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response63>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response64
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyManifest Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response64 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response64>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response65
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyDefinition Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response65 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response65>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response66
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserInfoCard> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response66 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response66>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response67
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyLinkedProfilesResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response67 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response67>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response68
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyProfileResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response68 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response68>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response69
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCharacterResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response69 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response69>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response70
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyMilestone Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response70 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response70>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response71
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response71 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response71>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response72
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyVendorsResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response72 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response72>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response73
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyVendorResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response73 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response73>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response74
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyCollectibleNodeDetailResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response74 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response74>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response75
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response75 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response75>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response76
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response76 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response76>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response77
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response77 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response77>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response78
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyEquipItemResults Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response78 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response78>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response79
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response79 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response79>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response80
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyItemChangeResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response80 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response80>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response81
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyPostGameCarnageReportData Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response81 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response81>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response82
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response82 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response82>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response83
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDefinition> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response83 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response83>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response84
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, DestinyLeaderboard>> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response84 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response84>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response85
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DestinyClanAggregateStat> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response85 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response85>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response86
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, DestinyLeaderboard>> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response86 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response86>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response87
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, DestinyLeaderboard>> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response87 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response87>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response88
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyEntitySearchResult Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response88 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response88>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response89
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsByPeriod> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response89 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response89>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response90
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyHistoricalStatsAccountResult Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response90 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response90>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response91
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyActivityHistoryResults Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response91 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response91>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response92
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyHistoricalWeaponStatsData Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response92 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response92>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response93
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyAggregateActivityResults Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response93 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response93>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response94
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinyMilestoneContent Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response94 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response94>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response95
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, DestinyPublicMilestone> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response95 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response95>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response96
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwaInitializeResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response96 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response96>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response97
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response97 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response97>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response98
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwaAuthorizationResult Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response98 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response98>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response99
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostSearchResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response99 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response99>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response100
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfCommunityLiveStatus Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response100 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response100>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response101
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfCommunityLiveStatus Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response101 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response101>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response102
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfCommunityLiveStatus Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response102 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response102>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response103
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfCommunityLiveStatus Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response103 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response103>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response104
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunityLiveStatus Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response104 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response104>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response105
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingCategories Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response105 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response105>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response106
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfTrendingEntry Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response106 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response106>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response107
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrendingDetail Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response107 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response107>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response108
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response108 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response108>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response109
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfFireteamSummary Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response109 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response109>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response110
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfFireteamSummary Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response110 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response110>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response111
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchResultOfFireteamResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response111 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response111>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response112
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FireteamResponse Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response112 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response112>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response113
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response113 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response113>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response114
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoreSettingsConfiguration Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response114 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response114>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response115
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GlobalAlert> Response { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlatformErrorCodes? ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ThrottleSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottleSeconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MessageData { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedErrorTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorTrace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response115 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response115>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Range : DateRange
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Range FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Range>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Status : ApplicationStatus
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Status FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MembershipType30 : BungieMembershipType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MembershipType30 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MembershipType30>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MembershipType31 : BungieMembershipType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MembershipType31 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MembershipType31>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HostGuidedGamePermissionOverride : HostGuidedGamesPermissionLevel
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static HostGuidedGamePermissionOverride FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HostGuidedGamePermissionOverride>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JoinLevel : RuntimeGroupMemberType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static JoinLevel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JoinLevel>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope : DestinyProgressionScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayEffectType : DestinyProgressionStepDisplayEffect
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayEffectType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayEffectType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BackgroundColor : DestinyColor
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BackgroundColor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BackgroundColor>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Action : DestinyItemActionBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Action FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Action>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Inventory : DestinyItemInventoryBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Inventory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Inventory>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetData : DestinyItemSetBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SetData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetData>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Stats : DestinyItemStatBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Stats FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Stats>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EquippingBlock : DestinyEquippingBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static EquippingBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EquippingBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TranslationBlock : DestinyItemTranslationBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TranslationBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslationBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Preview : DestinyItemPreviewBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Preview FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Preview>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Quality : DestinyItemQualityBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Quality FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Quality>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Value : DestinyItemValueBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Value FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Value>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SourceData : DestinyItemSourceBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SourceData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SourceData>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Objectives : DestinyItemObjectiveBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Objectives FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Objectives>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Plug : DestinyItemPlugDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Plug FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Plug>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Gearset : DestinyItemGearsetBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Gearset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Gearset>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sack : DestinyItemSackBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Sack FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sack>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sockets : DestinyItemSocketBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Sockets FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sockets>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Summary : DestinyItemSummaryBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Summary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Summary>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TalentGrid : DestinyItemTalentGridBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TalentGrid FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TalentGrid>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialItemType2 : SpecialItemType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SpecialItemType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialItemType2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemType : DestinyItemType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemSubType : DestinyItemSubType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemSubType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemSubType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClassType : DestinyClass
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ClassType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClassType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DefaultDamageType : DamageType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DefaultDamageType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultDamageType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TierType2 : TierType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TierType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TierType2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope2 : BucketScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Category : BucketCategory
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Category FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Category>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Location : ItemLocation
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Location FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Location>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InfusionProcess : DestinyItemTierTypeInfusionBlock
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InfusionProcess FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InfusionProcess>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AggregationType : DestinyStatAggregationType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AggregationType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StatCategory : DestinyStatCategory
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StatCategory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatCategory>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties2 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Attributes : EquippingItemBlockAttributes
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Attributes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Attributes>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AmmoType : DestinyAmmunitionType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AmmoType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AmmoType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Overlay : DestinyVendorCategoryOverlayDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Overlay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Overlay>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SortOrder : VendorDisplayCategorySortOrder
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SortOrder FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortOrder>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InteractionType : VendorInteractionType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InteractionType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InteractionType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HeaderDisplayProperties : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static HeaderDisplayProperties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HeaderDisplayProperties>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemRewardsSelection : DestinyVendorInteractionRewardSelection
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemRewardsSelection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemRewardsSelection>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ReplyType : DestinyVendorReplyType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ReplyType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReplyType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties3 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SortItemsBy : DestinyItemSortType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SortItemsBy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortItemsBy>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RefundPolicy : DestinyVendorItemRefundPolicy
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RefundPolicy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RefundPolicy>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Action2 : DestinyVendorSaleItemActionBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Action2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Action2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VisibilityScope : DestinyGatingScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static VisibilityScope FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VisibilityScope>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PurchasableScope : DestinyGatingScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PurchasableScope FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PurchasableScope>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Exclusivity : BungieMembershipType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Exclusivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Exclusivity>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties4 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties4>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InsertAction : DestinyInsertPlugActionDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InsertAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InsertAction>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Visibility : DestinySocketVisibility
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Visibility FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Visibility>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActionType : SocketTypeActionType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ActionType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActionType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CategoryStyle : DestinySocketCategoryStyle
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CategoryStyle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryStyle>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OverrideDisplay : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OverrideDisplay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OverrideDisplay>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Position : DestinyPositionDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Position FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Position>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HighlightType : ActivityGraphNodeHighlightType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static HighlightType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HighlightType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties5 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties5>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OriginalDisplayProperties : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OriginalDisplayProperties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalDisplayProperties>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SelectionScreenDisplayProperties : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SelectionScreenDisplayProperties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SelectionScreenDisplayProperties>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Matchmaking : DestinyActivityMatchmakingBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Matchmaking FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Matchmaking>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GuidedGame : DestinyActivityGuidedBlockDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GuidedGame FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GuidedGame>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyActivityDefinitionDirectActivityModeType
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties6 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties6>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope3 : DestinyGatingScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ValueStyle : DestinyUnlockValueUIStyle
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ValueStyle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValueStyle>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Perks : DestinyObjectivePerkEntryDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Perks FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Perks>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Stats2 : DestinyObjectiveStatEntryDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Stats2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Stats2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompletedValueStyle : DestinyUnlockValueUIStyle
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CompletedValueStyle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompletedValueStyle>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InProgressValueStyle : DestinyUnlockValueUIStyle
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InProgressValueStyle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InProgressValueStyle>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Style : DestinyObjectiveGrantStyle
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Style FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Style>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties7 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties7>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DamageType2 : DamageType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DamageType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DamageType2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PerkGroups : DestinyTalentNodeStepGroups
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PerkGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PerkGroups>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Stat : DestinyItemInvestmentStatDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Stat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Stat>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Style2 : DestinyObjectiveGrantStyle
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Style2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Style2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties8 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties8>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NavPointType : DestinyActivityNavPointType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NavPointType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NavPointType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyActivityPlaylistItemDefinitionDirectActivityModeType
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ModeType : DestinyActivityModeType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ModeType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModeType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActivityModeCategory : DestinyActivityModeCategory
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ActivityModeCategory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActivityModeCategory>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Position2 : DestinyPositionDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Position2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Position2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope4 : DestinyGatingScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope4>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties9 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties9>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Exclusive : BungieMembershipType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Exclusive FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Exclusive>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Category2 : DestinyRewardSourceCategory
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Category2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Category2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlugAvailability : PlugAvailabilityMode
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PlugAvailability FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlugAvailability>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AlternatePlugStyle : PlugUiStyles
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AlternatePlugStyle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlternatePlugStyle>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParentItemOverride : DestinyParentItemOverride
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ParentItemOverride FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentItemOverride>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlugSources : SocketPlugSources
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PlugSources FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlugSources>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HudDamageType : DamageType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static HudDamageType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HudDamageType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RandomActivationRequirement : DestinyNodeActivationRequirement
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RandomActivationRequirement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RandomActivationRequirement>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties10 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties10>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DamageType3 : DamageType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DamageType3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DamageType3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActivationRequirement : DestinyNodeActivationRequirement
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ActivationRequirement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActivationRequirement>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StepGroups : DestinyTalentNodeStepGroups
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StepGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StepGroups>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties11 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties11>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EnumValue : DamageType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static EnumValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnumValue>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties12 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties12>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PerkVisibility : ItemPerkVisibility
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PerkVisibility FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PerkVisibility>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope5 : DestinyScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope5>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope6 : DestinyScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope6>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Children : DestinyPresentationNodeChildrenBlock
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Children FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Children>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayStyle : DestinyPresentationDisplayStyle
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayStyle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayStyle>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ScreenStyle : DestinyPresentationScreenStyle
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ScreenStyle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenStyle>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Requirements : DestinyPresentationNodeRequirementsBlock
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Requirements FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Requirements>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope7 : DestinyScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope7>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GrantDestinyItemType : DestinyItemType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GrantDestinyItemType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GrantDestinyItemType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GrantDestinySubType : DestinyItemSubType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GrantDestinySubType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GrantDestinySubType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GrantDestinyClass : DestinyClass
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GrantDestinyClass FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GrantDestinyClass>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupQueryGroupMemberCountFilter
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupType6 : GroupType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupType6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupType6>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlatformMembershipType : BungieMembershipType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PlatformMembershipType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlatformMembershipType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupEditActionMembershipOption
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupEditActionChatSecurity
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupEditActionHomepage
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupEditActionDefaultPublicity
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupOptionsEditActionHostGuidedGamePermissionOverride
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupOptionsEditActionJoinLevel
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupOptionalConversationEditRequestChatSecurity
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BnetMembership : UserInfoCard
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BnetMembership FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BnetMembership>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorCode : PlatformErrorCodes
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ErrorCode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorCode>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InfoCard : UserInfoCard
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InfoCard FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InfoCard>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VendorReceipts : SingleComponentResponseOfDestinyVendorReceiptsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static VendorReceipts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VendorReceipts>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileInventory : SingleComponentResponseOfDestinyInventoryComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfileInventory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileInventory>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileCurrencies : SingleComponentResponseOfDestinyInventoryComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfileCurrencies FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileCurrencies>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Profile : SingleComponentResponseOfDestinyProfileComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Profile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Profile>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileKiosks : SingleComponentResponseOfDestinyKiosksComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfileKiosks FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileKiosks>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfilePlugSets : SingleComponentResponseOfDestinyPlugSetsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfilePlugSets FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfilePlugSets>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileProgression : SingleComponentResponseOfDestinyProfileProgressionComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfileProgression FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileProgression>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfilePresentationNodes : SingleComponentResponseOfDestinyPresentationNodesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfilePresentationNodes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfilePresentationNodes>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileRecords : SingleComponentResponseOfDestinyProfileRecordsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfileRecords FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileRecords>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileCollectibles : SingleComponentResponseOfDestinyProfileCollectiblesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfileCollectibles FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileCollectibles>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Characters : DictionaryComponentResponseOfint64AndDestinyCharacterComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Characters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Characters>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterInventories : DictionaryComponentResponseOfint64AndDestinyInventoryComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterInventories FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterInventories>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterProgressions : DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterProgressions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterProgressions>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterRenderData : DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterRenderData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterRenderData>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterActivities : DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterActivities FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterActivities>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterEquipment : DictionaryComponentResponseOfint64AndDestinyInventoryComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterEquipment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterEquipment>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterKiosks : DictionaryComponentResponseOfint64AndDestinyKiosksComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterKiosks FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterKiosks>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterPlugSets : DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterPlugSets FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterPlugSets>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterPresentationNodes : DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterPresentationNodes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterPresentationNodes>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterRecords : DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterRecords FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterRecords>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterCollectibles : DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterCollectibles FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterCollectibles>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemComponents : DestinyItemComponentSetOfint64
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemComponents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemComponents>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharacterCurrencyLookups : DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CharacterCurrencyLookups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CharacterCurrencyLookups>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemReceived : DestinyItemQuantity
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemReceived FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemReceived>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RefundPolicy2 : DestinyVendorItemRefundPolicy
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RefundPolicy2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RefundPolicy2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BindStatus : ItemBindStatus
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BindStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BindStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Location2 : ItemLocation
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Location2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Location2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransferStatus : TransferStatuses
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TransferStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class State : ItemState
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static State FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<State>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserInfo : UserInfoCard
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserInfo>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VersionsOwned : DestinyGameVersions
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static VersionsOwned FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionsOwned>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FlavorObjective : DestinyObjectiveProgress
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FlavorObjective FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlavorObjective>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties13 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties13>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope8 : DestinyScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope8>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties14 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties14>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scope9 : DestinyScope
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Scope9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope9>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MembershipType32 : BungieMembershipType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MembershipType32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MembershipType32>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RaceType : DestinyRace
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RaceType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RaceType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClassType2 : DestinyClass
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ClassType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClassType2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GenderType : DestinyGender
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GenderType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GenderType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EmblemColor : DestinyColor
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static EmblemColor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmblemColor>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LevelProgression : DestinyProgression
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static LevelProgression FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LevelProgression>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RaceType2 : DestinyRace
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RaceType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RaceType2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GenderType2 : DestinyGender
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GenderType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GenderType2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClassType3 : DestinyClass
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ClassType3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClassType3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Status2 : DestinyQuestStatus
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Status2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Activity : DestinyMilestoneActivity
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Activity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Activity>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyMilestoneActivityActivityModeType
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompletionStatus : DestinyMilestoneActivityCompletionStatus
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CompletionStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompletionStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyMilestoneActivityVariantActivityModeType
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Objective : DestinyObjectiveProgress
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Objective FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Objective>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MilestoneType : DestinyMilestoneType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MilestoneType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties15 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties15>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class QuestRewards : DestinyMilestoneQuestRewardsDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static QuestRewards FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QuestRewards>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties16 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties16>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties17 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties17>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Customization : DestinyCharacterCustomization
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Customization FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Customization>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PeerView : DestinyCharacterPeerView
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PeerView FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PeerView>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyCharacterActivitiesComponentCurrentActivityModeType
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DifficultyTier : DestinyActivityDifficultyTier
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DifficultyTier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DifficultyTier>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FlavorObjective2 : DestinyObjectiveProgress
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FlavorObjective2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlavorObjective2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DamageType4 : DamageType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DamageType4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DamageType4>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PrimaryStat : DestinyStat
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PrimaryStat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrimaryStat>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CannotEquipReason : EquipFailureReason
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CannotEquipReason FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CannotEquipReason>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties18 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties18 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties18>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GridProgression : DestinyProgression
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GridProgression FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GridProgression>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class State2 : DestinyTalentNodeState
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static State2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<State2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NodeStatsBlock : DestinyTalentNodeStatBlock
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NodeStatsBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NodeStatsBlock>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Inventory2 : SingleComponentResponseOfDestinyInventoryComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Inventory2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Inventory2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Character : SingleComponentResponseOfDestinyCharacterComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Character FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Character>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Progressions : SingleComponentResponseOfDestinyCharacterProgressionComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Progressions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Progressions>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RenderData : SingleComponentResponseOfDestinyCharacterRenderComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RenderData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderData>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Activities : SingleComponentResponseOfDestinyCharacterActivitiesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Activities FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Activities>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Equipment : SingleComponentResponseOfDestinyInventoryComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Equipment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Equipment>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Kiosks : SingleComponentResponseOfDestinyKiosksComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Kiosks FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Kiosks>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlugSets : SingleComponentResponseOfDestinyPlugSetsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PlugSets FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlugSets>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PresentationNodes : SingleComponentResponseOfDestinyPresentationNodesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PresentationNodes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PresentationNodes>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Records : SingleComponentResponseOfDestinyCharacterRecordsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Records FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Records>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Collectibles : SingleComponentResponseOfDestinyCollectiblesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Collectibles FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Collectibles>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemComponents2 : DestinyItemComponentSetOfint64
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemComponents2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemComponents2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UninstancedItemComponents : DestinyBaseItemComponentSetOfuint32
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UninstancedItemComponents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UninstancedItemComponents>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CurrencyLookups : SingleComponentResponseOfDestinyCurrenciesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CurrencyLookups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyLookups>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Item : SingleComponentResponseOfDestinyItemComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Item FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Item>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Instance : SingleComponentResponseOfDestinyItemInstanceComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Instance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Instance>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Objectives2 : SingleComponentResponseOfDestinyItemObjectivesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Objectives2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Objectives2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Perks2 : SingleComponentResponseOfDestinyItemPerksComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Perks2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Perks2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RenderData2 : SingleComponentResponseOfDestinyItemRenderComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RenderData2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderData2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Stats3 : SingleComponentResponseOfDestinyItemStatsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Stats3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Stats3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TalentGrid2 : SingleComponentResponseOfDestinyItemTalentGridComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TalentGrid2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TalentGrid2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sockets2 : SingleComponentResponseOfDestinyItemSocketsComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Sockets2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sockets2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VendorGroups : SingleComponentResponseOfDestinyVendorGroupComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static VendorGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VendorGroups>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Vendors : DictionaryComponentResponseOfuint32AndDestinyVendorComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Vendors FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Vendors>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Categories : DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Categories FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Categories>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sales : DictionaryComponentResponseOfuint32AndDestinyVendorSaleItemSetComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Sales FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sales>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CurrencyLookups2 : SingleComponentResponseOfDestinyCurrenciesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CurrencyLookups2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyLookups2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Progression : DestinyProgression
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Progression FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Progression>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SaleStatus : VendorItemStatus
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SaleStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SaleStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Augments : DestinyVendorItemState
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Augments FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Augments>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Vendor : SingleComponentResponseOfDestinyVendorComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Vendor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Vendor>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Categories2 : SingleComponentResponseOfDestinyVendorCategoriesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Categories2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Categories2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sales2 : DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Sales2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sales2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemComponents3 : DestinyItemComponentSetOfint32
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemComponents3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemComponents3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CurrencyLookups3 : SingleComponentResponseOfDestinyCurrenciesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CurrencyLookups3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyLookups3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Collectibles2 : SingleComponentResponseOfDestinyCollectiblesComponent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Collectibles2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Collectibles2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CollectibleItemComponents : DestinyItemComponentSetOfuint32
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CollectibleItemComponents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollectibleItemComponents>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EquipStatus : PlatformErrorCodes
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static EquipStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EquipStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Plug2 : DestinyInsertPlugsRequestEntry
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Plug2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Plug2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SocketArrayType : DestinySocketArrayType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SocketArrayType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SocketArrayType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActivityDetails : DestinyHistoricalStatsActivity
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ActivityDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActivityDetails>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Mode2 : DestinyActivityModeType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Mode2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mode2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Score : DestinyHistoricalStatsValue
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Score FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Score>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Player : DestinyPlayer
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Player FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Player>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Extended : DestinyPostGameCarnageReportExtendedData
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Extended FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Extended>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Basic : DestinyHistoricalStatsValuePair
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Basic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Basic>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Pga : DestinyHistoricalStatsValuePair
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Pga FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pga>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Weighted : DestinyHistoricalStatsValuePair
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Weighted FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weighted>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DestinyUserInfo : UserInfoCard
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DestinyUserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DestinyUserInfo>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BungieNetUserInfo : UserInfoCard
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BungieNetUserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BungieNetUserInfo>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Standing : DestinyHistoricalStatsValue
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Standing FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Standing>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Score2 : DestinyHistoricalStatsValue
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Score2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Score2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Group : DestinyStatsGroupType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Group FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Group>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Category3 : DestinyStatsCategoryType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Category3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Category3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UnitType2 : UnitType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UnitType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnitType2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyHistoricalStatsDefinitionMergeMethod
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Player2 : DestinyPlayer
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Player2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Player2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Value2 : DestinyHistoricalStatsValue
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Value2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Value2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Mode3 : DestinyActivityModeType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Mode3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mode3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Value3 : DestinyHistoricalStatsValue
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Value3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Value3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Results : SearchResultOfDestinyEntitySearchResultItem
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Results FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Results>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DisplayProperties19 : DestinyDisplayPropertiesDefinition
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DisplayProperties19 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayProperties19>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActivityDetails2 : DestinyHistoricalStatsActivity
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ActivityDetails2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActivityDetails2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Activity2 : DestinyPublicMilestoneActivity
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Activity2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Activity2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyPublicMilestoneActivityActivityModeType
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DestinyPublicMilestoneActivityVariantActivityModeType
    {
        _0 = 0,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

        _48 = 48,

        _49 = 49,

        _50 = 50,

        _51 = 51,

        _52 = 52,

        _53 = 53,

        _54 = 54,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _58 = 58,

        _59 = 59,

        _60 = 60,

        _61 = 61,

        _62 = 62,

        _63 = 63,

        _64 = 64,

        _65 = 65,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Type : AwaType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Type FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Type>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MembershipType33 : BungieMembershipType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MembershipType33 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MembershipType33>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Selection : AwaUserSelection
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Selection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Selection>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserSelection : AwaUserSelection
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserSelection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSelection>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Type2 : AwaType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Type2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Type2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MembershipType34 : BungieMembershipType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MembershipType34 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MembershipType34>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EntityType : TrendingEntryType
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static EntityType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EntityType>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MilestoneDetails : DestinyPublicMilestone
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MilestoneDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneDetails>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EventContent : DestinyMilestoneContent
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static EventContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EventContent>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}